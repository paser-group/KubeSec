
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ReplicationController
metadata:
  name: stats
spec:
  replicas: 1
  selector:
    name: stats
  template:
    metadata:
      labels:
        name: stats
    spec:
      containers:
      - name: stats
        image: gcr.io/<project-id>/stats:latest
        ports:
        - containerPort: 5000
        resources:
          limits:
            cpu: "0.1"
        command:
        - "/gopath/src/github.com/rlguarino/shortener/stats/stats"
        - "-c" 
        - "/gopath/src/github.com/rlguarino/shortener/kubernetes-example/stats-config.json"



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  labels:
    name: urlservice
    role: service
  name: urlservice
spec:
  ports:
    - port: 5000
      targetPort: 5000
  selector:
    name: "urlservice"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  labels:
    name: stats
    role: service
  name: statservice
spec:
  ports:
    - port: 5000
      targetPort: 5000
  selector:
    name: "stats"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ReplicationController
metadata:
  name: urlservice
spec:
  replicas: 1
  selector:
    name: urlservice
  template:
    metadata:
      labels:
        name: urlservice
    spec:
      containers:
      - name: urlservice
        image: gcr.io/<project-id>/urlservice:latest
        ports:
        - containerPort: 5000
        resources:
          limits:
            cpu: "0.1"
        command:
        - "/gopath/src/github.com/rlguarino/shortener/urlservice/urlservice"
        - "-c" 
        - "/gopath/src/github.com/rlguarino/shortener/kubernetes-example/urlservice-config.json"



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ReplicationController
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    name: frontend
  template:
    metadata:
      labels:
        name: frontend
    spec:
      containers:
      - name: frontend
        image: gcr.io/<project-id>/frontend:latest
        ports:
        - containerPort: 5000
        resources:
          limits:
            cpu: "0.1"
        command:
        - "/gopath/src/github.com/rlguarino/shortener/frontend/frontend"
        - "-c" 
        - "/gopath/src/github.com/rlguarino/shortener/kubernetes-example/frontend-config.json"



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  labels:
    name: frontend
    role: service
  name: frontend
spec:
  type : LoadBalancer
  ports:
    - port: 5000
      targetPort: 5000
  selector:
    name: "frontend"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  labels:
    name: mongo
  name: mongo
spec:
  ports:
    - port: 27017
      targetPort: 27017
  selector:
    name: mongo

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ReplicationController
metadata:
  labels:
    name: mongo
  name: mongo-controller
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: mongo
    spec:
      containers:
      - image: mongo
        name: mongo
        ports:
        - name: mongo
          containerPort: 27017
          hostPort: 27017
        volumeMounts:
            - name: mongo-persistent-storage
              mountPath: /data/db
      volumes:
        - name: mongo-persistent-storage

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: Service
apiVersion: v1
metadata:
  name: database
spec:
  selector:
    app: mysql
  ports:
  - port: 3306
  type: ClusterIP

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Pod
metadata:
  name: webapp
  labels:
    # Must match the selector of service
    app: webapp
    release: "0"
spec:
  containers:
  # Specifies the container to use inside this pod
  - name: webapp
    image: richardchesterwood/k8s-fleetman-webapp-angular:release0

---

  apiVersion: v1
  kind: Pod
  metadata:
    name: webapp-release-0-5
    labels:
      app: webapp
      release: "0-5"
  spec:
    containers:
    - name: webapp
      image: richardchesterwood/k8s-fleetman-webapp-angular:release0-5

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
	name: global-database-config
	namespace: default
data:
	DATABASE_URL: "https://dbserver.somwhere.com:3306"
  DATABASE_PASSWORD: "123456"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: fleetman-queue
spec:
  selector:
    app: queue
  ports:
    - name: http
      port: 8161
      nodePort: 30010
  type: NodePort

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Pod
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  containers:
   - name: mysql
     image: mysql:5
     env:
      # Use secret in real life
      - name: MYSQL_ROOT_PASSWORD
        value: password
      - name: MYSQL_DATABASE
        value: fleetman

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: webapp
spec:
  selector:
    matchLabels:
      app: webapp
  replicas: 2
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
      - name: webapp
        image: richardchesterwood/k8s-fleetman-webapp-angular:release0-5

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: fleetman-webapp
spec:
  selector:
    # Must match the label of pod
    app: webapp
  ports:
    # Exposes the pod to minikube_ip:30080
    - name: http
      port: 80
      nodePort: 30080
  type: NodePort

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp
spec:
  # Minimum time it must be online in order to
  # close the old replica
  # minReadySeconds: 30
  selector:
    matchLabels:
      app: webapp
  replicas: 2
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
      - name: webapp
        image: richardchesterwood/k8s-fleetman-webapp-angular:release0

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Pod
metadata:
  name: queue
  labels:
    app: queue
spec:
  containers:
  - name: queue
    image: richardchesterwood/k8s-fleetman-queue:release1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
data:
  use-proxy-protocol: "true"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

#
# Fluentd configuration - this installs onto all nodes and gathers all logs
# A separate yaml configures Fluentd
#
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluentd-es
  namespace: kube-system
  labels:
    k8s-app: fluentd-es
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: fluentd-es
  labels:
    k8s-app: fluentd-es
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
rules:
- apiGroups:
  - ""
  resources:
  - "namespaces"
  - "pods"
  verbs:
  - "get"
  - "watch"
  - "list"
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: fluentd-es
  labels:
    k8s-app: fluentd-es
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
subjects:
- kind: ServiceAccount
  name: fluentd-es
  namespace: kube-system
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: fluentd-es
  apiGroup: ""
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd-es-v2.2.0
  namespace: kube-system
  labels:
    k8s-app: fluentd-es
    version: v2.2.0
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  selector:
    matchLabels:
      k8s-app: fluentd-es
      version: v2.2.0
  template:
    metadata:
      labels:
        k8s-app: fluentd-es
        kubernetes.io/cluster-service: "true"
        version: v2.2.0
      # This annotation ensures that fluentd does not get evicted if the node
      # supports critical pod annotation based priority scheme.
      # Note that this does not guarantee admission on the nodes (#40573).
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
    spec:
      priorityClassName: system-node-critical
      serviceAccountName: fluentd-es
      containers:
      - name: fluentd-es
        image: k8s.gcr.io/fluentd-elasticsearch:v2.2.0
        env:
        - name: FLUENTD_ARGS
          value: --no-supervisor -q
        resources:
          limits:
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: config-volume
          mountPath: /etc/fluent/config.d
      # nodeSelector:
      #  beta.kubernetes.io/fluentd-ds-ready: "true"
      terminationGracePeriodSeconds: 30
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: config-volume
        configMap:
          name: fluentd-es-config-v0.1.4


---

#
# Elastic Search configuration
#
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-logging
  namespace: kube-system
  labels:
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "Elasticsearch"
spec:
  ports:
  - port: 9200
    protocol: TCP
    targetPort: db
  selector:
    k8s-app: elasticsearch-logging
---
# RBAC authn and authz
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elasticsearch-logging
  namespace: kube-system
  labels:
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: elasticsearch-logging
  labels:
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
rules:
- apiGroups:
  - ""
  resources:
  - "services"
  - "namespaces"
  - "endpoints"
  verbs:
  - "get"
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: kube-system
  name: elasticsearch-logging
  labels:
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
subjects:
- kind: ServiceAccount
  name: elasticsearch-logging
  namespace: kube-system
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: elasticsearch-logging
  apiGroup: ""
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-logging
  namespace: kube-system
  labels:
    k8s-app: elasticsearch-logging
    version: v6.2.5
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  serviceName: elasticsearch-logging
  replicas: 2
  selector:
    matchLabels:
      k8s-app: elasticsearch-logging
      version: v6.2.5
  template:
    metadata:
      labels:
        k8s-app: elasticsearch-logging
        version: v6.2.5
        kubernetes.io/cluster-service: "true"
    spec:
      serviceAccountName: elasticsearch-logging
      containers:
      - image: k8s.gcr.io/elasticsearch:v6.2.5
        name: elasticsearch-logging
        resources:
          # need more cpu upon initialization, therefore burstable class
          limits:
            cpu: 1000m
          requests:
            cpu: 100m
        ports:
        - containerPort: 9200
          name: db
          protocol: TCP
        - containerPort: 9300
          name: transport
          protocol: TCP
        volumeMounts:
        - name: elasticsearch-logging
          mountPath: /data
        env:
        - name: "NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      # Elasticsearch requires vm.max_map_count to be at least 262144.
      # If your OS already sets up this number to a higher value, feel free
      # to remove this init container.
      initContainers:
      - image: alpine:3.6
        command: ["/sbin/sysctl", "-w", "vm.max_map_count=262144"]
        name: elasticsearch-logging-init
        securityContext:
          privileged: true
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-logging
    spec:
      storageClassName: cloud-ssd
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 31Gi
---

#
# Finally, Kibana - for visualising the results
#

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana-logging
  namespace: kube-system
  labels:
    k8s-app: kibana-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: kibana-logging
  template:
    metadata:
      labels:
        k8s-app: kibana-logging
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
    spec:
      containers:
      - name: kibana-logging
        image: docker.elastic.co/kibana/kibana-oss:6.2.4
        resources:
          # need more cpu upon initialization, therefore burstable class
          limits:
            cpu: 1000m
          requests:
            cpu: 100m
        env:
          - name: ELASTICSEARCH_URL
            value: http://elasticsearch-logging:9200
        ports:
        - containerPort: 5601
          name: ui
          protocol: TCP

---
apiVersion: v1
kind: Service
metadata:
  name: kibana-logging
  namespace: kube-system
  labels:
    k8s-app: kibana-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "Kibana"
spec:
  ports:
  - port: 5601
    protocol: TCP
    targetPort: ui
  selector:
    k8s-app: kibana-logging
  type: LoadBalancer


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

global:
  slack_api_url: '<<add your slack endpoint here>>'
route:
  group_by: ['alertname']
  group_wait: 5s
  group_interval: 1m
  repeat_interval: 10m
  receiver: 'slack'

receivers:
- name: 'slack'
  slack_configs:
  - channel: '#alerts'
    icon_emoji: ':bell:'
    send_resolved: true
    text: "<!channel> \nsummary: {{ .CommonAnnotations.message }}\n"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: fleetman-webapp
spec:
  selector:
    app: webapp
  ports:
    - name: http
      port: 80
  type: LoadBalancer

---

apiVersion: v1
kind: Service
metadata:
  name: fleetman-queue
spec:
  selector:
    app: queue
  ports:
    - name: http
      port: 8161
    - name: endpoint
      port: 61616
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: fleetman-position-tracker
spec:
  selector:
    app: position-tracker
  ports:
    - name: http
      port: 8080
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: fleetman-api-gateway
spec:
  selector:
    app: api-gateway
  ports:
    - name: http
      port: 8080
  type: ClusterIP

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Ingress
spec:
	rules:
		- host: guilherr.me
			http:
				paths:
					- path: /
						backend:
							serviceName: fleetman-webapp
              servicePort: 80

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: ConfigMap
apiVersion: v1
metadata:
  name: fluentd-es-config-v0.1.4
  namespace: kube-system
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
data:
  system.conf: |-
    <system>
      root_dir /tmp/fluentd-buffers/
    </system>
  containers.input.conf: |-
    # This configuration file for Fluentd / td-agent is used
    # to watch changes to Docker log files. The kubelet creates symlinks that
    # capture the pod name, namespace, container name & Docker container ID
    # to the docker logs for pods in the /var/log/containers directory on the host.
    # If running this fluentd configuration in a Docker container, the /var/log
    # directory should be mounted in the container.
    #
    # These logs are then submitted to Elasticsearch which assumes the
    # installation of the fluent-plugin-elasticsearch & the
    # fluent-plugin-kubernetes_metadata_filter plugins.
    # See https://github.com/uken/fluent-plugin-elasticsearch &
    # https://github.com/fabric8io/fluent-plugin-kubernetes_metadata_filter for
    # more information about the plugins.
    #
    # Example
    # =======
    # A line in the Docker log file might look like this JSON:
    #
    # {"log":"2014/09/25 21:15:03 Got request with path wombat\n",
    #  "stream":"stderr",
    #   "time":"2014-09-25T21:15:03.499185026Z"}
    #
    # The time_format specification below makes sure we properly
    # parse the time format produced by Docker. This will be
    # submitted to Elasticsearch and should appear like:
    # $ curl 'http://elasticsearch-logging:9200/_search?pretty'
    # ...
    # {
    #      "_index" : "logstash-2014.09.25",
    #      "_type" : "fluentd",
    #      "_id" : "VBrbor2QTuGpsQyTCdfzqA",
    #      "_score" : 1.0,
    #      "_source":{"log":"2014/09/25 22:45:50 Got request with path wombat\n",
    #                 "stream":"stderr","tag":"docker.container.all",
    #                 "@timestamp":"2014-09-25T22:45:50+00:00"}
    #    },
    # ...
    #
    # The Kubernetes fluentd plugin is used to write the Kubernetes metadata to the log
    # record & add labels to the log record if properly configured. This enables users
    # to filter & search logs on any metadata.
    # For example a Docker container's logs might be in the directory:
    #
    #  /var/lib/docker/containers/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b
    #
    # and in the file:
    #
    #  997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b-json.log
    #
    # where 997599971ee6... is the Docker ID of the running container.
    # The Kubernetes kubelet makes a symbolic link to this file on the host machine
    # in the /var/log/containers directory which includes the pod name and the Kubernetes
    # container name:
    #
    #    synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log
    #    ->
    #    /var/lib/docker/containers/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b-json.log
    #
    # The /var/log directory on the host is mapped to the /var/log directory in the container
    # running this instance of Fluentd and we end up collecting the file:
    #
    #   /var/log/containers/synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log
    #
    # This results in the tag:
    #
    #  var.log.containers.synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log
    #
    # The Kubernetes fluentd plugin is used to extract the namespace, pod name & container name
    # which are added to the log message as a kubernetes field object & the Docker container ID
    # is also added under the docker field object.
    # The final tag is:
    #
    #   kubernetes.var.log.containers.synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log
    #
    # And the final log record look like:
    #
    # {
    #   "log":"2014/09/25 21:15:03 Got request with path wombat\n",
    #   "stream":"stderr",
    #   "time":"2014-09-25T21:15:03.499185026Z",
    #   "kubernetes": {
    #     "namespace": "default",
    #     "pod_name": "synthetic-logger-0.25lps-pod",
    #     "container_name": "synth-lgr"
    #   },
    #   "docker": {
    #     "container_id": "997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b"
    #   }
    # }
    #
    # This makes it easier for users to search for logs by pod name or by
    # the name of the Kubernetes container regardless of how many times the
    # Kubernetes pod has been restarted (resulting in a several Docker container IDs).

    # Json Log Example:
    # {"log":"[info:2016-02-16T16:04:05.930-08:00] Some log text here\n","stream":"stdout","time":"2016-02-17T00:04:05.931087621Z"}
    # CRI Log Example:
    # 2016-02-17T00:04:05.931087621Z stdout F [info:2016-02-16T16:04:05.930-08:00] Some log text here
    <source>
      @id fluentd-containers.log
      @type tail
      path /var/log/containers/*.log
      pos_file /var/log/es-containers.log.pos
      time_format %Y-%m-%dT%H:%M:%S.%NZ
      tag raw.kubernetes.*
      read_from_head true
      <parse>
        @type multi_format
        <pattern>
          format json
          time_key time
          time_format %Y-%m-%dT%H:%M:%S.%NZ
        </pattern>
        <pattern>
          format /^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$/
          time_format %Y-%m-%dT%H:%M:%S.%N%:z
        </pattern>
      </parse>
    </source>

    # Detect exceptions in the log output and forward them as one log entry.
    <match raw.kubernetes.**>
      @id raw.kubernetes
      @type detect_exceptions
      remove_tag_prefix raw
      message log
      stream stream
      multiline_flush_interval 5
      max_bytes 500000
      max_lines 1000
    </match>

  system.input.conf: |-
    # Example:
    # 2015-12-21 23:17:22,066 [salt.state       ][INFO    ] Completed state [net.ipv4.ip_forward] at time 23:17:22.066081
    <source>
      @id minion
      @type tail
      format /^(?<time>[^ ]* [^ ,]*)[^\[]*\[[^\]]*\]\[(?<severity>[^ \]]*) *\] (?<message>.*)$/
      time_format %Y-%m-%d %H:%M:%S
      path /var/log/salt/minion
      pos_file /var/log/salt.pos
      tag salt
    </source>

    # Example:
    # Dec 21 23:17:22 gke-foo-1-1-4b5cbd14-node-4eoj startupscript: Finished running startup script /var/run/google.startup.script
    <source>
      @id startupscript.log
      @type tail
      format syslog
      path /var/log/startupscript.log
      pos_file /var/log/es-startupscript.log.pos
      tag startupscript
    </source>

    # Examples:
    # time="2016-02-04T06:51:03.053580605Z" level=info msg="GET /containers/json"
    # time="2016-02-04T07:53:57.505612354Z" level=error msg="HTTP Error" err="No such image: -f" statusCode=404
    # TODO(random-liu): Remove this after cri container runtime rolls out.
    <source>
      @id docker.log
      @type tail
      format /^time="(?<time>[^)]*)" level=(?<severity>[^ ]*) msg="(?<message>[^"]*)"( err="(?<error>[^"]*)")?( statusCode=($<status_code>\d+))?/
      path /var/log/docker.log
      pos_file /var/log/es-docker.log.pos
      tag docker
    </source>

    # Example:
    # 2016/02/04 06:52:38 filePurge: successfully removed file /var/etcd/data/member/wal/00000000000006d0-00000000010a23d1.wal
    <source>
      @id etcd.log
      @type tail
      # Not parsing this, because it doesn't have anything particularly useful to
      # parse out of it (like severities).
      format none
      path /var/log/etcd.log
      pos_file /var/log/es-etcd.log.pos
      tag etcd
    </source>

    # Multi-line parsing is required for all the kube logs because very large log
    # statements, such as those that include entire object bodies, get split into
    # multiple lines by glog.

    # Example:
    # I0204 07:32:30.020537    3368 server.go:1048] POST /stats/container/: (13.972191ms) 200 [[Go-http-client/1.1] 10.244.1.3:40537]
    <source>
      @id kubelet.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/kubelet.log
      pos_file /var/log/es-kubelet.log.pos
      tag kubelet
    </source>

    # Example:
    # I1118 21:26:53.975789       6 proxier.go:1096] Port "nodePort for kube-system/default-http-backend:http" (:31429/tcp) was open before and is still needed
    <source>
      @id kube-proxy.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/kube-proxy.log
      pos_file /var/log/es-kube-proxy.log.pos
      tag kube-proxy
    </source>

    # Example:
    # I0204 07:00:19.604280       5 handlers.go:131] GET /api/v1/nodes: (1.624207ms) 200 [[kube-controller-manager/v1.1.3 (linux/amd64) kubernetes/6a81b50] 127.0.0.1:38266]
    <source>
      @id kube-apiserver.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/kube-apiserver.log
      pos_file /var/log/es-kube-apiserver.log.pos
      tag kube-apiserver
    </source>

    # Example:
    # I0204 06:55:31.872680       5 servicecontroller.go:277] LB already exists and doesn't need update for service kube-system/kube-ui
    <source>
      @id kube-controller-manager.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/kube-controller-manager.log
      pos_file /var/log/es-kube-controller-manager.log.pos
      tag kube-controller-manager
    </source>

    # Example:
    # W0204 06:49:18.239674       7 reflector.go:245] pkg/scheduler/factory/factory.go:193: watch of *api.Service ended with: 401: The event in requested index is outdated and cleared (the requested history has been cleared [2578313/2577886]) [2579312]
    <source>
      @id kube-scheduler.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/kube-scheduler.log
      pos_file /var/log/es-kube-scheduler.log.pos
      tag kube-scheduler
    </source>

    # Example:
    # I1104 10:36:20.242766       5 rescheduler.go:73] Running Rescheduler
    <source>
      @id rescheduler.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/rescheduler.log
      pos_file /var/log/es-rescheduler.log.pos
      tag rescheduler
    </source>

    # Example:
    # I0603 15:31:05.793605       6 cluster_manager.go:230] Reading config from path /etc/gce.conf
    <source>
      @id glbc.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/glbc.log
      pos_file /var/log/es-glbc.log.pos
      tag glbc
    </source>

    # Example:
    # I0603 15:31:05.793605       6 cluster_manager.go:230] Reading config from path /etc/gce.conf
    <source>
      @id cluster-autoscaler.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/cluster-autoscaler.log
      pos_file /var/log/es-cluster-autoscaler.log.pos
      tag cluster-autoscaler
    </source>

    # Logs from systemd-journal for interesting services.
    # TODO(random-liu): Remove this after cri container runtime rolls out.
    <source>
      @id journald-docker
      @type systemd
      filters [{ "_SYSTEMD_UNIT": "docker.service" }]
      <storage>
        @type local
        persistent true
      </storage>
      read_from_head true
      tag docker
    </source>

    <source>
      @id journald-container-runtime
      @type systemd
      filters [{ "_SYSTEMD_UNIT": "{{ container_runtime }}.service" }]
      <storage>
        @type local
        persistent true
      </storage>
      read_from_head true
      tag container-runtime
    </source>

    <source>
      @id journald-kubelet
      @type systemd
      filters [{ "_SYSTEMD_UNIT": "kubelet.service" }]
      <storage>
        @type local
        persistent true
      </storage>
      read_from_head true
      tag kubelet
    </source>

    <source>
      @id journald-node-problem-detector
      @type systemd
      filters [{ "_SYSTEMD_UNIT": "node-problem-detector.service" }]
      <storage>
        @type local
        persistent true
      </storage>
      read_from_head true
      tag node-problem-detector
    </source>

    <source>
      @id kernel
      @type systemd
      filters [{ "_TRANSPORT": "kernel" }]
      <storage>
        @type local
        persistent true
      </storage>
      <entry>
        fields_strip_underscores true
        fields_lowercase true
      </entry>
      read_from_head true
      tag kernel
    </source>

  forward.input.conf: |-
    # Takes the messages sent over TCP
    <source>
      @type forward
    </source>

  monitoring.conf: |-
    # Prometheus Exporter Plugin
    # input plugin that exports metrics
    <source>
      @type prometheus
    </source>

    <source>
      @type monitor_agent
    </source>

    # input plugin that collects metrics from MonitorAgent
    <source>
      @type prometheus_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>

    # input plugin that collects metrics for output plugin
    <source>
      @type prometheus_output_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>

    # input plugin that collects metrics for in_tail plugin
    <source>
      @type prometheus_tail_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>

  output.conf: |-
    # Enriches records with Kubernetes metadata
    <filter kubernetes.**>
      @type kubernetes_metadata
    </filter>

    <match **>
      @id elasticsearch
      @type elasticsearch
      @log_level info
      include_tag_key true
      host elasticsearch-logging
      port 9200
      logstash_format true
      <buffer>
        @type file
        path /var/log/fluentd-buffers/kubernetes.system.buffer
        flush_mode interval
        retry_type exponential_backoff
        flush_thread_count 2
        flush_interval 5s
        retry_forever
        retry_max_interval 30
        chunk_limit_size 2M
        queue_limit_length 8
        overflow_action block
      </buffer>
    </match>

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---

kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
    verbs:
      - update

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: nginx-ingress-role
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      # wait up to five minutes for the drain of connections
      terminationGracePeriodSeconds: 300
      serviceAccountName: nginx-ingress-serviceaccount
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - name: nginx-ingress-controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.28.0
          args:
            - /nginx-ingress-controller
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx
            - --annotations-prefix=nginx.ingress.kubernetes.io
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            # www-data -> 101
            runAsUser: 101
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          lifecycle:
            preStop:
              exec:
                command:
                  - /wait-shutdown

---

apiVersion: v1
kind: LimitRange
metadata:
  name: ingress-nginx
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  limits:
  - default:
    min:
      memory: 90Mi
      cpu: 100m
    type: Container

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: Service
apiVersion: v1
metadata:
  name: ingress-nginx
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  annotations:
    # Enable PROXY protocol
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
    # Ensure the ELB idle timeout is less than nginx keep-alive timeout. By default,
    # NGINX keep-alive is set to 75s. If using WebSockets, the value will need to be
    # increased to '3600' to avoid any potential issues.
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "60"
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: queue
spec:
  selector:
    matchLabels:
      app: queue
  replicas: 1
  template:
    metadata:
      labels:
        app: queue
    spec:
      containers:
      - name: queue
        image: richardchesterwood/k8s-fleetman-queue:release2

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: position-simulator
spec:
  selector:
    matchLabels:
      app: position-simulator
  replicas: 1
  template:
    metadata:
      labels:
        app: position-simulator
    spec:
      containers:
      - name: position-simulator
        image: richardchesterwood/k8s-fleetman-position-simulator:release2
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: position-tracker
spec:
  selector:
    matchLabels:
      app: position-tracker
  replicas: 1
  template:
    metadata:
      labels:
        app: position-tracker
    spec:
      containers:
      - name: position-tracker
        image: richardchesterwood/k8s-fleetman-position-tracker:release3
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
spec:
  selector:
    matchLabels:
      app: api-gateway
  replicas: 1
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: richardchesterwood/k8s-fleetman-api-gateway:release2
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp
spec:
  selector:
    matchLabels:
      app: webapp
  replicas: 1
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
      - name: webapp
        image: richardchesterwood/k8s-fleetman-webapp-angular:release2
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# What do we want
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
spec:
  storageClassName: cloud-ssd
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 7Gi

---

# How do we want it implemented
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: cloud-ssd    
provisioner: kubernetes.io/aws-ebs
parameters:
  type:	gp2


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
spec:
  selector:
    matchLabels:
      app: mongodb
  replicas: 1
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:3.6.5-jessie
        volumeMounts:
          - name: mongo-persistent-storage
            mountPath: /data/db
      volumes:
        - name: mongo-persistent-storage
          persistentVolumeClaim:
            claimName: mongo-pvc

---

kind: Service
apiVersion: v1
metadata:
  name: fleetman-mongodb
spec:
  selector:
    app: mongodb
  ports:
    - name: mongoport
      port: 27017
  type: ClusterIP


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: default
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: jenkins
  namespace: default
rules:
- apiGroups: [""]
  resources: ["pods","services"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get","list","watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["create","delete","get","list","patch","update","watch"]

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: jenkins
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins
subjects:
- kind: ServiceAccount
  name: jenkins
---
# Allows jenkins to create persistent volumes
# This cluster role binding allows anyone in the "manager" group to read secrets in any namespace.
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: jenkins-crb
subjects:
- kind: ServiceAccount
  namespace: default
  name: jenkins
roleRef:
  kind: ClusterRole
  name: jenkinsclusterrole
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  # "namespace" omitted since ClusterRoles are not namespaced
  name: jenkinsclusterrole
rules:
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["create","delete","get","list","patch","update","watch"]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  namespace: default
spec:
  selector:
    matchLabels:
      app: jenkins
  replicas: 1
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      containers:
        - name: jenkins
          image: myjenkins:latest
          env:
            - name: JAVA_OPTS
              value: -Djenkins.install.runSetupWizard=false
          ports:
            - name: http-port
              containerPort: 8080
            - name: jnlp-port
              containerPort: 50000
          volumeMounts:
            - name: jenkins-home
              mountPath: /var/jenkins_home
            - name: docker-sock-volume
              mountPath: "/var/run/docker.sock"
          imagePullPolicy: Never
      volumes:
        # This allows jenkins to use the docker daemon on the host, for running builds
        # see https://stackoverflow.com/questions/27879713/is-it-ok-to-run-docker-from-inside-docker
        - name: docker-sock-volume
          hostPath:
            path: /var/run/docker.sock
        - name: jenkins-home
          hostPath:
            path: /mnt/jenkins-store
      serviceAccountName: jenkins
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  namespace: default
spec:
  type: NodePort
  ports:
    - name: ui
      port: 8080
      targetPort: 8080
      nodePort: 31000
    - name: jnlp
      port: 50000
      targetPort: 50000
  selector:
    app: jenkins

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: fleetman-webapp
spec:
  selector:
    app: webapp
  ports:
    - name: http
      port: 80
      nodePort: 30080
  type: NodePort

---

apiVersion: v1
kind: Service
metadata:
  name: fleetman-queue
spec:
  selector:
    app: queue
  ports:
    - name: http
      port: 8161
      nodePort: 30010
    - name: endpoint
      port: 61616
  type: NodePort

---

apiVersion: v1
kind: Service
metadata:
  name: fleetman-position-tracker
spec:
  selector:
    app: position-tracker
  ports:
    - name: http
      port: 8080
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: fleetman-api-gateway
spec:
  selector:
    app: api-gateway
  ports:
    - name: http
      port: 8080
      nodePort: 30020
  type: NodePort

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: queue
spec:
  selector:
    matchLabels:
      app: queue
  replicas: 1
  template:
    metadata:
      labels:
        app: queue
    spec:
      containers:
      - name: queue
        image: richardchesterwood/k8s-fleetman-queue:release2

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: position-simulator
spec:
  selector:
    matchLabels:
      app: position-simulator
  replicas: 1
  template:
    metadata:
      labels:
        app: position-simulator
    spec:
      containers:
      - name: position-simulator
        image: richardchesterwood/k8s-fleetman-position-simulator:release2
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: position-tracker
spec:
  selector:
    matchLabels:
      app: position-tracker
  replicas: 1
  template:
    metadata:
      labels:
        app: position-tracker
    spec:
      containers:
      - name: position-tracker
        image: richardchesterwood/k8s-fleetman-position-tracker:release3
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
spec:
  selector:
    matchLabels:
      app: api-gateway
  replicas: 1
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: richardchesterwood/k8s-fleetman-api-gateway:release2
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp
spec:
  selector:
    matchLabels:
      app: webapp
  replicas: 1
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
      - name: webapp
        image: richardchesterwood/k8s-fleetman-webapp-angular:release2
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# What do we want
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
spec:
  storageClassName: mylocalstorage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---

# How do we want it implemented
apiVersion: v1
kind: PersistentVolume
metadata:
  name: local-storage
spec:
  storageClassName: mylocalstorage
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/some new/directory/structure/"
    type: DirectoryOrCreate


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
spec:
  selector:
    matchLabels:
      app: mongodb
  replicas: 1
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:3.6.5-jessie
        volumeMounts:
          - name: mongo-persistent-storage
            mountPath: /data/db
      volumes:
        - name: mongo-persistent-storage
          persistentVolumeClaim:
            claimName: mongo-pvc

---

kind: Service
apiVersion: v1
metadata:
  name: fleetman-mongodb
spec:
  selector:
    app: mongodb
  ports:
    - name: mongoport
      port: 27017
  type: ClusterIP


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Pod
metadata:
  name: test-pod
  namespace: default
spec:
  containers:
    - name: service
      image: nginx
      ports:
        - containerPort: 80
      env:
        - name: SOME_ENV_VAR
          value: Hello World


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: hello-service


server.port: 8082

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

---
apiVersion: v1
kind: Service
metadata:
  name: country-service
  labels:
    app: country-service
  annotations:
    getambassador.io/config: |
      ---
      apiVersion: ambassador/v0
      kind: Mapping
      name: countries
      prefix: /
      service: country-service:8000
      method: GET
spec:
  type: ClusterIP
  selector:
    app: country-service
  ports:
  - protocol: TCP
    port: 8000
    targetPort: 8080
    name: http

---
apiVersion: v1
kind: ReplicationController
metadata:
  name: country-service
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: country-service
    spec:
      containers:
      - name: country-service
        image: countries-assembly:1.0.1
        ports:
        - containerPort: 8000
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 15
          timeoutSeconds: 1


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: ambassador-admin
  name: ambassador-admin
spec:
  type: NodePort
  ports:
  - name: ambassador-admin
    port: 8877
    targetPort: 8877
  selector:
    service: ambassador
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: ambassador
spec:
  replicas: 3
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        service: ambassador
    spec:
      containers:
      - name: ambassador
        image: quay.io/datawire/ambassador:0.40.0
        resources:
          limits:
            cpu: 1
            memory: 400Mi
          requests:
            cpu: 200m
            memory: 100Mi
        env:
        - name: AMBASSADOR_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        - name: admin
          containerPort: 8877
        livenessProbe:
          httpGet:
            path: /ambassador/v0/check_alive
            port: 8877
          initialDelaySeconds: 30
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /ambassador/v0/check_ready
            port: 8877
          initialDelaySeconds: 30
          periodSeconds: 3
      restartPolicy: Always


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

---
apiVersion: v1
kind: Service
metadata:
  name: airport-service
  labels:
    app: airport-service
  annotations:
    getambassador.io/config: |
      ---
      apiVersion: ambassador/v0
      kind: Mapping
      name: airports
      prefix: /
      service: airport-service:8000
      method: GET
spec:
  type: ClusterIP
  selector:
    app: airport-service
  ports:
  - protocol: TCP
    port: 8000
    targetPort: 8080
    name: http

---
apiVersion: v1
kind: ReplicationController
metadata:
  name: airport-service
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: airport-service
    spec:
      containers:
      - name: airport-service
        image: airports-assembly:1.0.1
        ports:
        - containerPort: 8000
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 630
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 600
          timeoutSeconds: 5


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: ambassador
  name: ambassador
spec:
  type: LoadBalancer
  ports:
  - name: ambassador
    port: 80
    targetPort: 80
  selector:
    service: ambassador


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============


apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ingress-service
  annotations:
    ingressclass.kubernetes.io/is-default-class: 'true'
    nginx.ingress.kubernetes.io/use-regex: 'true'
spec:
  rules:
  - host: ticketing.info
    http:
      paths:
      - path: /api/v0/?(.*)
        backend:
          serviceName: feed-srv
          servicePort: 8080
      # - path: /bar
      #   backend:
      #     serviceName: service2
      #     servicePort: 8080            


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: feed-depl
spec:
  replicas: 1    
  selector:
   matchLabels:
     app: feed
  template:
     metadata:
       labels:
         app: feed
     spec:
       containers:
         - name: feed
           image: 1ryber/udacity-restapi-feed
           resources:
             requests:
               cpu: 50m
               memory: 50Mi
             limits:
               cpu: 100m
               memory: 100Mi

---    


apiVersion: v1
kind: Service
metadata:
  name: feed
spec:
  selector:
    app: feed
  ports:
    - name: feed
      protocol: TCP
      port: 8080
      targetPort: 8080 

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============


#	Copyright 2016, Google, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ReplicationController
metadata:
  name: kubernetes-pod-ip-finder
spec:
  replicas: 1
  selector:
    name: kubernetes-pod-ip-finder
  template:
    metadata:
      labels:
        name: kubernetes-pod-ip-finder
    spec:
      containers:
      - image: thesandlord/kubernetes-pod-ip-finder
        name: kubernetes-pod-ip-finder
        ports:
        - containerPort: 3000
          name: http-server

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============


#	Copyright 2016, Google, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Service
metadata:
  name: kubernetes-pod-ip-finder
spec:
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
  selector:
    name: kubernetes-pod-ip-finder

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

server.port: 7002

logging:  
   level:    
      root: INFO    
      com.nazmul.microservices: DEBUG

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

server.port: 7001

logging:  
   level:    
      root: INFO    
      com.nazmul.microservices: DEBUG


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

server.port: 7003

logging:  
   level:    
      root: INFO    
      com.nazmul.microservices: DEBUG


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

server.port: 8000

app:  
   product-service:    
      host: localhost    
      port: 7001  
   recommendation-service:    
      host: localhost    
      port: 7002  
   review-service:    
      host: localhost    
      port: 7003


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: zk-hs
  labels:
    app: zk
spec:
  ports:
  - port: 2888
    name: server
  - port: 3888
    name: leader-election
  clusterIP: None
  selector:
    app: zk
---
apiVersion: v1
kind: Service
metadata:
  name: zk-cs
  labels:
    app: zk
spec:
  ports:
  - port: 2181
    name: client
  selector:
    app: zk
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: zk-pdb
spec:
  selector:
    matchLabels:
      app: zk
  maxUnavailable: 1
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: zk
spec:
  selector:
    matchLabels:
      app: zk
  serviceName: zk-hs
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: zk
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - zk
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: kubernetes-zookeeper
        imagePullPolicy: Always
        image: "k8s.gcr.io/kubernetes-zookeeper:1.0-3.4.10"
        resources:
          requests:
            memory: "256Mi"
            cpu: "0.1"
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        command:
        - sh
        - -c
        - "start-zookeeper \
          --servers=1 \
          --data_dir=/var/lib/zookeeper/data \
          --data_log_dir=/var/lib/zookeeper/data/log \
          --conf_dir=/opt/zookeeper/conf \
          --client_port=2181 \
          --election_port=3888 \
          --server_port=2888 \
          --tick_time=2000 \
          --init_limit=10 \
          --sync_limit=5 \
          --heap=128M \
          --max_client_cnxns=60 \
          --snap_retain_count=3 \
          --purge_interval=12 \
          --max_session_timeout=40000 \
          --min_session_timeout=4000 \
          --log_level=INFO"
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "zookeeper-ready 2181"
          initialDelaySeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "zookeeper-ready 2181"
          initialDelaySeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/zookeeper
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-hs
  labels:
    app: kafka
spec:
  ports:
  - port: 9093
    name: server
  clusterIP: None
  selector:
    app: kafka
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: kafka-pdb
spec:
  selector:
    matchLabels:
      app: kafka
  maxUnavailable: 1
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: kafka
spec:
  serviceName: kafka-hs
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
      type: RollingUpdate
  template:
    metadata:
      labels:
        app: kafka
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values: 
                    - kafka
              topologyKey: "kubernetes.io/hostname"
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
             - weight: 1
               podAffinityTerm:
                 labelSelector:
                    matchExpressions:
                      - key: "app"
                        operator: In
                        values: 
                        - zk
                 topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 300
      containers:
      - name: k8skafka
        imagePullPolicy: Always
        image: gcr.io/google_containers/kubernetes-kafka:1.0-10.2.1
        resources:
          requests:
            memory: "1Gi"
            cpu: "0.1"
        ports:
        - containerPort: 9093
          name: server
        command:
        - sh
        - -c
        - "exec kafka-server-start.sh /opt/kafka/config/server.properties --override broker.id=${HOSTNAME##*-} \
          --override listeners=PLAINTEXT://:9093 \
          --override zookeeper.connect=zk-cs.default.svc.cluster.local:2181 \
          --override log.dir=/var/lib/kafka \
          --override auto.create.topics.enable=true \
          --override auto.leader.rebalance.enable=true \
          --override background.threads=10 \
          --override compression.type=producer \
          --override delete.topic.enable=false \
          --override leader.imbalance.check.interval.seconds=300 \
          --override leader.imbalance.per.broker.percentage=10 \
          --override log.flush.interval.messages=9223372036854775807 \
          --override log.flush.offset.checkpoint.interval.ms=60000 \
          --override log.flush.scheduler.interval.ms=9223372036854775807 \
          --override log.retention.bytes=-1 \
          --override log.retention.hours=168 \
          --override log.roll.hours=168 \
          --override log.roll.jitter.hours=0 \
          --override log.segment.bytes=1073741824 \
          --override log.segment.delete.delay.ms=60000 \
          --override message.max.bytes=1000012 \
          --override min.insync.replicas=1 \
          --override num.io.threads=8 \
          --override num.network.threads=3 \
          --override num.recovery.threads.per.data.dir=1 \
          --override num.replica.fetchers=1 \
          --override offset.metadata.max.bytes=4096 \
          --override offsets.commit.required.acks=-1 \
          --override offsets.commit.timeout.ms=5000 \
          --override offsets.load.buffer.size=5242880 \
          --override offsets.retention.check.interval.ms=600000 \
          --override offsets.retention.minutes=1440 \
          --override offsets.topic.compression.codec=0 \
          --override offsets.topic.num.partitions=50 \
          --override offsets.topic.replication.factor=3 \
          --override offsets.topic.segment.bytes=104857600 \
          --override queued.max.requests=500 \
          --override quota.consumer.default=9223372036854775807 \
          --override quota.producer.default=9223372036854775807 \
          --override replica.fetch.min.bytes=1 \
          --override replica.fetch.wait.max.ms=500 \
          --override replica.high.watermark.checkpoint.interval.ms=5000 \
          --override replica.lag.time.max.ms=10000 \
          --override replica.socket.receive.buffer.bytes=65536 \
          --override replica.socket.timeout.ms=30000 \
          --override request.timeout.ms=30000 \
          --override socket.receive.buffer.bytes=102400 \
          --override socket.request.max.bytes=104857600 \
          --override socket.send.buffer.bytes=102400 \
          --override unclean.leader.election.enable=true \
          --override zookeeper.session.timeout.ms=6000 \
          --override zookeeper.set.acl=false \
          --override broker.id.generation.enable=true \
          --override connections.max.idle.ms=600000 \
          --override controlled.shutdown.enable=true \
          --override controlled.shutdown.max.retries=3 \
          --override controlled.shutdown.retry.backoff.ms=5000 \
          --override controller.socket.timeout.ms=30000 \
          --override default.replication.factor=1 \
          --override fetch.purgatory.purge.interval.requests=1000 \
          --override group.max.session.timeout.ms=300000 \
          --override group.min.session.timeout.ms=6000 \
          --override inter.broker.protocol.version=0.10.2-IV0 \
          --override log.cleaner.backoff.ms=15000 \
          --override log.cleaner.dedupe.buffer.size=134217728 \
          --override log.cleaner.delete.retention.ms=86400000 \
          --override log.cleaner.enable=true \
          --override log.cleaner.io.buffer.load.factor=0.9 \
          --override log.cleaner.io.buffer.size=524288 \
          --override log.cleaner.io.max.bytes.per.second=1.7976931348623157E308 \
          --override log.cleaner.min.cleanable.ratio=0.5 \
          --override log.cleaner.min.compaction.lag.ms=0 \
          --override log.cleaner.threads=1 \
          --override log.cleanup.policy=delete \
          --override log.index.interval.bytes=4096 \
          --override log.index.size.max.bytes=10485760 \
          --override log.message.timestamp.difference.max.ms=9223372036854775807 \
          --override log.message.timestamp.type=CreateTime \
          --override log.preallocate=false \
          --override log.retention.check.interval.ms=300000 \
          --override max.connections.per.ip=2147483647 \
          --override num.partitions=1 \
          --override producer.purgatory.purge.interval.requests=1000 \
          --override replica.fetch.backoff.ms=1000 \
          --override replica.fetch.max.bytes=1048576 \
          --override replica.fetch.response.max.bytes=10485760 \
          --override reserved.broker.max.id=1000 "
        env:
        - name: KAFKA_HEAP_OPTS
          value : "-Xmx2G -Xms2G"
        - name: KAFKA_OPTS
          value: "-Dlogging.level=INFO"
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/kafka
        readinessProbe:
          exec:
           command: 
            - sh 
            - -c 
            - "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server=localhost:9093"
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout
      # Download and cache dependencies

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.18.0/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
            # Install pylint
            pip install pylint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

         # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

---
kind: Service
apiVersion: v1
metadata:
  name: exampleservice
spec:
  selector:
    app: myapp
  ports:
    - protocol: "TCP"
      # Port accessible inside cluster
      port: 8081
      # Port to forward to inside the pod
      targetPort: 80
      # Port accessible outside cluster
      nodePort: 30002
  type: LoadBalancer
 
 
 
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: myappdeployment
spec:
  replicas: 5
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
        - name: myapp
          image: dhruvgarg/exampleapp:v1.0.0
          ports:
            - containerPort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 'node'
  - '5'
  - '4'
  - '0.12'
  - '0.10'


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

 sudo: false
 language: node_js
 node_js:
   - "0.10"
   - "0.11"
   - "0.12"
   - "iojs"
   - "4"
   - "6"
   - "8"
   - "node"


 env:
   - CXX=g++-4.8
 addons:
   apt:
     sources:
       - ubuntu-toolchain-r-test
     packages:
       - gcc-4.8
       - g++-4.8



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - "0.10"
  - "0.11"
  - "0.12"
  - "4.0"
  - "4.1"
  - "4.2"
  - "5"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

repo_token: SIAeZjKYlHK74rbcFvNHMUzjRiMpflxve


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============


language: node_js
node_js:
  - "6"
  - "5"
  - "4"

install:
  - make node_modules

script:
  - make lint
  - make test
  - make coveralls


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: required

service: 
  - docker

before_install:
  - docker build -t web-test ./src/web/ -f ./src/web/Dockerfile.dev

script:
  - docker run web-test npm test -- --coverage
 
after_success:
  - docker build -t hedimiladi/calculator-web:latest ./src/web
  - docker build -t hedimiladi/calculator-daemon:latest ./src/calculator-daemon
  - docker build -t hedimiladi/calculator-power-api:latest ./src/power-api
  - docker build -t hedimiladi/calculator-power-handler:latest ./src/power-handler 
  - docker build -t hedimiladi/calculator-postgres:latest ./src/postgres
  - docker build -t hedimiladi/calculator-factorial-api:latest ./src/factorial-api
  - docker build -t hedimiladi/calculator-factorial-handler:latest ./src/factorial-handler
  # nginx image is only required to deploy calculator app in minikube
  - docker build -t hedimiladi/calculator-nginx ./src/nginx

  - echo "$DOCKER_HUB_PASS" | docker login -u "$DOCKER_HUB_ID" --password-stdin

  - docker push hedimiladi/calculator-web:latest
  - docker push hedimiladi/calculator-daemon:latest
  - docker push hedimiladi/calculator-power-api:latest
  - docker push hedimiladi/calculator-power-handler:latest
  - docker push hedimiladi/calculator-postgres:latest
  - docker push hedimiladi/calculator-factorial-api:latest
  - docker push hedimiladi/calculator-factorial-handler:latest
  - docker push hedimiladi/calculator-nginx:latest

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Ingress
metadata: 
  name: ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
    - http:
        paths:
          - path: /?(.*)
            backend:
              serviceName: web-service
              servicePort: 3000
          - path: /api/factorial/?(.*)
            backend:
              serviceName: factorial-api-service
              servicePort: 5000
          - path: /api/power/?(.*)
            backend:
              serviceName: power-api-service
              servicePort: 5001




========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

#################### factorial
apiVersion: apps/v1
kind: Deployment
metadata:
  name: factorial-handler-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: factorial-handler
  template:
    metadata:
      labels:
        app: factorial-handler
    spec:
      containers:
      - name: factorial-handler
        image: hedimiladi/calculator-factorial-handler
        ports:
          - containerPort: 5000
        env:
          - name: REDIS_HOST
            value: redis-service
          - name: REDIS_PORT
            value: '6379'
          - name: PG_USER
            value: postgres
          - name: PG_HOST
            value: postgres-service
          - name: PG_PORT
            value: '5432'
          - name: PG_DATABASE
            value: postgres
          - name: PG_PASSWORD
            valueFrom:
              secretKeyRef:
                name: pgpassword
                key: PGPASSWORD
#################### power
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: power-handler-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: power-handler
  template:
    metadata:
      labels:
        app: power-handler
    spec:
      containers:
      - name: power-handler
        image: hedimiladi/calculator-power-handler
        ports:
          - containerPort: 5001
        env:
          - name: REDIS_HOST
            value: redis-service
          - name: REDIS_PORT
            value: '6379'
          - name: PG_USER
            value: postgres
          - name: PG_HOST
            value: postgres-service
          - name: PG_PORT
            value: '5432'
          - name: PG_DATABASE
            value: postgres
          - name: PG_PASSWORD
            valueFrom:
              secretKeyRef:
                name: pgpassword
                key: PGPASSWORD

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============


apiVersion: apps/v1
kind: Deployment
metadata:
  name: calculator-daemon-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: calculator-daemon
  template:
    metadata:
      labels:
        app: calculator-daemon
    spec:
      containers:
      - name: calculator-daemon
        image: hedimiladi/calculator-daemon
        ports:
          - containerPort: 6000
        env:
          - name: FACTORIAL_API_HOST
            value: factorial-api-service
          - name: FACTORIAL_API_PORT
            value: '5000'
          - name: POWER_API_HOST
            value: power-api-service
          - name: POWER_API_PORT
            value: '5001'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  type: ClusterIP
  ports:
    -  port: 6379
       targetPort: 6379
  selector:
    component: redis 

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      component: redis
  template:
    metadata:
      labels:
        component: redis
    spec:
      containers:
      - name: redis
        image: redis
        ports:
        - containerPort: 6379


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: database-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  type: ClusterIP
  ports:
    -  port: 5432
       targetPort: 5432
  selector:
    component: postgres 

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      component: postgres
  template:
    metadata:
      labels:
        component: postgres
    spec:
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: database-pvc
      containers:
        - name: postgres
          image: hedimiladi/calculator-postgres
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
              subPath: postgres
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pgpassword
                  key: PGPASSWORD

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: web-service
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    app: web
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
      - name: web
        image: hedimiladi/calculator-web
        ports:
        - containerPort: 3000

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

######################## FACTORIAL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: factorial-api-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: factorial-api
  template:
    metadata:
      labels:
        app: factorial-api
    spec:
      containers:
        - name: factorial-api
          image: hedimiladi/calculator-factorial-api
          ports:
            - containerPort: 5000
          env:      
            - name: OWN_PORT
              value: '5000'
            - name: REDIS_HOST
              value: redis-service
            - name: REDIS_PORT
              value: '6379'
            - name: PG_USER
              value: postgres
            - name: PG_HOST
              value: postgres-service     
            - name: PG_PORT
              value: '5432'
            - name: PG_DATABASE
              value: postgres
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pgpassword
                  key: PGPASSWORD
---
apiVersion: v1
kind: Service
metadata:
  name: factorial-api-service
spec:
  type: ClusterIP
  ports:
    - port: 5000
      targetPort: 5000
  selector:
    app: factorial-api

  ######################## POWER
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: power-api-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: power-api
  template:
    metadata:
      labels:
        app: power-api
    spec:
      containers:
        - name: power-api
          image: hedimiladi/calculator-power-api
          ports:
            - containerPort: 5001
          env:      
            - name: OWN_PORT
              value: '5001'
            - name: REDIS_HOST
              value: redis-service
            - name: REDIS_PORT
              value: '6379'
            - name: PG_USER
              value: postgres
            - name: PG_HOST
              value: postgres-service
            - name: PG_PORT
              value: '5432'
            - name: PG_DATABASE
              value: postgres
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pgpassword
                  key: PGPASSWORD
---
apiVersion: v1
kind: Service
metadata:
  name: power-api-service
spec:
  type: ClusterIP
  ports:
    - port: 5001
      targetPort: 5001
  selector:
    app: power-api

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Ingress
metadata: 
  name: ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
    - http:
        paths:
          - path: /?(.*)
            backend:
              serviceName: web-service
              servicePort: 3000
          - path: /api/factorial/?(.*)
            backend:
              serviceName: factorial-api-service
              servicePort: 5000
          - path: /api/power/?(.*)
            backend:
              serviceName: power-api-service
              servicePort: 5001




========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

#################### factorial
apiVersion: apps/v1
kind: Deployment
metadata:
  name: factorial-handler-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: factorial-handler
  template:
    metadata:
      labels:
        app: factorial-handler
    spec:
      containers:
      - name: factorial-handler
        image: hedimiladi/calculator-factorial-handler
        ports:
          - containerPort: 5000
        env:
          - name: REDIS_HOST
            value: redis-service
          - name: REDIS_PORT
            value: '6379'
          - name: PG_USER
            value: postgres
          - name: PG_HOST
            value: postgres-service
          - name: PG_PORT
            value: '5432'
          - name: PG_DATABASE
            value: postgres
          - name: PG_PASSWORD
            valueFrom:
              secretKeyRef:
                name: pgpassword
                key: PGPASSWORD
#################### power
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: power-handler-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: power-handler
  template:
    metadata:
      labels:
        app: power-handler
    spec:
      containers:
      - name: power-handler
        image: hedimiladi/calculator-power-handler
        ports:
          - containerPort: 5001
        env:
          - name: REDIS_HOST
            value: redis-service
          - name: REDIS_PORT
            value: '6379'
          - name: PG_USER
            value: postgres
          - name: PG_HOST
            value: postgres-service
          - name: PG_PORT
            value: '5432'
          - name: PG_DATABASE
            value: postgres
          - name: PG_PASSWORD
            valueFrom:
              secretKeyRef:
                name: pgpassword
                key: PGPASSWORD

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============


apiVersion: apps/v1
kind: Deployment
metadata:
  name: calculator-daemon-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: calculator-daemon
  template:
    metadata:
      labels:
        app: calculator-daemon
    spec:
      containers:
      - name: calculator-daemon
        image: hedimiladi/calculator-daemon
        ports:
          - containerPort: 6000
        env:
          - name: FACTORIAL_API_HOST
            value: factorial-api-service
          - name: FACTORIAL_API_PORT
            value: '5000'
          - name: POWER_API_HOST
            value: power-api-service
          - name: POWER_API_PORT
            value: '5001'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  type: ClusterIP
  ports:
    -  port: 6379
       targetPort: 6379
  selector:
    component: redis 

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      component: redis
  template:
    metadata:
      labels:
        component: redis
    spec:
      containers:
      - name: redis
        image: redis
        ports:
        - containerPort: 6379


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      component: postgres
  template:
    metadata:
      labels:
        component: postgres
    spec:
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pv-claim
      containers:
        - name: postgres
          image: hedimiladi/calculator-postgres
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
              subPath: postgres
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pgpassword
                  key: PGPASSWORD

---
kind: PersistentVolume
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: cloud-ssd
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp2

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: postgres-pv-claim
spec:
  storageClassName: cloud-ssd
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  type: ClusterIP
  ports:
    -  port: 5432
       targetPort: 5432
  selector:
    component: postgres 

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: web-service
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    app: web
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
      - name: web
        image: hedimiladi/calculator-web
        ports:
        - containerPort: 3000

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

######################## FACTORIAL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: factorial-api-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: factorial-api
  template:
    metadata:
      labels:
        app: factorial-api
    spec:
      containers:
        - name: factorial-api
          image: hedimiladi/calculator-factorial-api
          ports:
            - containerPort: 5000
          env:      
            - name: OWN_PORT
              value: '5000'
            - name: REDIS_HOST
              value: redis-service
            - name: REDIS_PORT
              value: '6379'
            - name: PG_USER
              value: postgres
            - name: PG_HOST
              value: postgres-service     
            - name: PG_PORT
              value: '5432'
            - name: PG_DATABASE
              value: postgres
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pgpassword
                  key: PGPASSWORD
---
apiVersion: v1
kind: Service
metadata:
  name: factorial-api-service
spec:
  type: ClusterIP
  ports:
    - port: 5000
      targetPort: 5000
  selector:
    app: factorial-api

  ######################## POWER
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: power-api-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: power-api
  template:
    metadata:
      labels:
        app: power-api
    spec:
      containers:
        - name: power-api
          image: hedimiladi/calculator-power-api
          ports:
            - containerPort: 5001
          env:      
            - name: OWN_PORT
              value: '5001'
            - name: REDIS_HOST
              value: redis-service
            - name: REDIS_PORT
              value: '6379'
            - name: PG_USER
              value: postgres
            - name: PG_HOST
              value: postgres-service
            - name: PG_PORT
              value: '5432'
            - name: PG_DATABASE
              value: postgres
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pgpassword
                  key: PGPASSWORD
---
apiVersion: v1
kind: Service
metadata:
  name: power-api-service
spec:
  type: ClusterIP
  ports:
    - port: 5001
      targetPort: 5001
  selector:
    app: power-api

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Ingress
metadata: 
  name: ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
    - http:
        paths:
          - path: /?(.*)
            backend:
              serviceName: web-service
              servicePort: 3000
          - path: /api/factorial/?(.*)
            backend:
              serviceName: factorial-api-service
              servicePort: 5000
          - path: /api/power/?(.*)
            backend:
              serviceName: power-api-service
              servicePort: 5001




========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---

kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
    verbs:
      - update

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: nginx-ingress-role
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: nginx-ingress-serviceaccount
      containers:
        - name: nginx-ingress-controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.24.1
          args:
            - /nginx-ingress-controller
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx
            - --annotations-prefix=nginx.ingress.kubernetes.io
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            # www-data -> 33
            runAsUser: 33
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: Service
apiVersion: v1
metadata:
  name: ingress-nginx
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  annotations:
    # Enable PROXY protocol
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
    # Ensure the ELB idle timeout is less than nginx keep-alive timeout. By default,
    # NGINX keep-alive is set to 75s. If using WebSockets, the value will need to be
    # increased to '3600' to avoid any potential issues.
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "60"
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: https
      port: 443
      targetPort: https

---



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
data:
  use-proxy-protocol: "true"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: ConfigMap
apiVersion: v1
metadata:
  name: fluentd-es-config-v0.1.4
  namespace: kube-system
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
data:
  system.conf: |-
    <system>
      root_dir /tmp/fluentd-buffers/
    </system>

  containers.input.conf: |-
    # This configuration file for Fluentd / td-agent is used
    # to watch changes to Docker log files. The kubelet creates symlinks that
    # capture the pod name, namespace, container name & Docker container ID
    # to the docker logs for pods in the /var/log/containers directory on the host.
    # If running this fluentd configuration in a Docker container, the /var/log
    # directory should be mounted in the container.
    #
    # These logs are then submitted to Elasticsearch which assumes the
    # installation of the fluent-plugin-elasticsearch & the
    # fluent-plugin-kubernetes_metadata_filter plugins.
    # See https://github.com/uken/fluent-plugin-elasticsearch &
    # https://github.com/fabric8io/fluent-plugin-kubernetes_metadata_filter for
    # more information about the plugins.
    #
    # Example
    # =======
    # A line in the Docker log file might look like this JSON:
    #
    # {"log":"2014/09/25 21:15:03 Got request with path wombat\n",
    #  "stream":"stderr",
    #   "time":"2014-09-25T21:15:03.499185026Z"}
    #
    # The time_format specification below makes sure we properly
    # parse the time format produced by Docker. This will be
    # submitted to Elasticsearch and should appear like:
    # $ curl 'http://elasticsearch-logging:9200/_search?pretty'
    # ...
    # {
    #      "_index" : "logstash-2014.09.25",
    #      "_type" : "fluentd",
    #      "_id" : "VBrbor2QTuGpsQyTCdfzqA",
    #      "_score" : 1.0,
    #      "_source":{"log":"2014/09/25 22:45:50 Got request with path wombat\n",
    #                 "stream":"stderr","tag":"docker.container.all",
    #                 "@timestamp":"2014-09-25T22:45:50+00:00"}
    #    },
    # ...
    #
    # The Kubernetes fluentd plugin is used to write the Kubernetes metadata to the log
    # record & add labels to the log record if properly configured. This enables users
    # to filter & search logs on any metadata.
    # For example a Docker container's logs might be in the directory:
    #
    #  /var/lib/docker/containers/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b
    #
    # and in the file:
    #
    #  997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b-json.log
    #
    # where 997599971ee6... is the Docker ID of the running container.
    # The Kubernetes kubelet makes a symbolic link to this file on the host machine
    # in the /var/log/containers directory which includes the pod name and the Kubernetes
    # container name:
    #
    #    synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log
    #    ->
    #    /var/lib/docker/containers/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b-json.log
    #
    # The /var/log directory on the host is mapped to the /var/log directory in the container
    # running this instance of Fluentd and we end up collecting the file:
    #
    #   /var/log/containers/synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log
    #
    # This results in the tag:
    #
    #  var.log.containers.synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log
    #
    # The Kubernetes fluentd plugin is used to extract the namespace, pod name & container name
    # which are added to the log message as a kubernetes field object & the Docker container ID
    # is also added under the docker field object.
    # The final tag is:
    #
    #   kubernetes.var.log.containers.synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log
    #
    # And the final log record look like:
    #
    # {
    #   "log":"2014/09/25 21:15:03 Got request with path wombat\n",
    #   "stream":"stderr",
    #   "time":"2014-09-25T21:15:03.499185026Z",
    #   "kubernetes": {
    #     "namespace": "default",
    #     "pod_name": "synthetic-logger-0.25lps-pod",
    #     "container_name": "synth-lgr"
    #   },
    #   "docker": {
    #     "container_id": "997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b"
    #   }
    # }
    #
    # This makes it easier for users to search for logs by pod name or by
    # the name of the Kubernetes container regardless of how many times the
    # Kubernetes pod has been restarted (resulting in a several Docker container IDs).

    # Json Log Example:
    # {"log":"[info:2016-02-16T16:04:05.930-08:00] Some log text here\n","stream":"stdout","time":"2016-02-17T00:04:05.931087621Z"}
    # CRI Log Example:
    # 2016-02-17T00:04:05.931087621Z stdout F [info:2016-02-16T16:04:05.930-08:00] Some log text here
    <source>
      @id fluentd-containers.log
      @type tail
      path /var/log/containers/*.log
      pos_file /var/log/es-containers.log.pos
      time_format %Y-%m-%dT%H:%M:%S.%NZ
      tag raw.kubernetes.*
      read_from_head true
      <parse>
        @type multi_format
        <pattern>
          format json
          time_key time
          time_format %Y-%m-%dT%H:%M:%S.%NZ
        </pattern>
        <pattern>
          format /^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$/
          time_format %Y-%m-%dT%H:%M:%S.%N%:z
        </pattern>
      </parse>
    </source>

    # Detect exceptions in the log output and forward them as one log entry.
    <match raw.kubernetes.**>
      @id raw.kubernetes
      @type detect_exceptions
      remove_tag_prefix raw
      message log
      stream stream
      multiline_flush_interval 5
      max_bytes 500000
      max_lines 1000
    </match>

  system.input.conf: |-
    # Example:
    # 2015-12-21 23:17:22,066 [salt.state       ][INFO    ] Completed state [net.ipv4.ip_forward] at time 23:17:22.066081
    <source>
      @id minion
      @type tail
      format /^(?<time>[^ ]* [^ ,]*)[^\[]*\[[^\]]*\]\[(?<severity>[^ \]]*) *\] (?<message>.*)$/
      time_format %Y-%m-%d %H:%M:%S
      path /var/log/salt/minion
      pos_file /var/log/salt.pos
      tag salt
    </source>

    # Example:
    # Dec 21 23:17:22 gke-foo-1-1-4b5cbd14-node-4eoj startupscript: Finished running startup script /var/run/google.startup.script
    <source>
      @id startupscript.log
      @type tail
      format syslog
      path /var/log/startupscript.log
      pos_file /var/log/es-startupscript.log.pos
      tag startupscript
    </source>

    # Examples:
    # time="2016-02-04T06:51:03.053580605Z" level=info msg="GET /containers/json"
    # time="2016-02-04T07:53:57.505612354Z" level=error msg="HTTP Error" err="No such image: -f" statusCode=404
    # TODO(random-liu): Remove this after cri container runtime rolls out.
    <source>
      @id docker.log
      @type tail
      format /^time="(?<time>[^)]*)" level=(?<severity>[^ ]*) msg="(?<message>[^"]*)"( err="(?<error>[^"]*)")?( statusCode=($<status_code>\d+))?/
      path /var/log/docker.log
      pos_file /var/log/es-docker.log.pos
      tag docker
    </source>

    # Example:
    # 2016/02/04 06:52:38 filePurge: successfully removed file /var/etcd/data/member/wal/00000000000006d0-00000000010a23d1.wal
    <source>
      @id etcd.log
      @type tail
      # Not parsing this, because it doesn't have anything particularly useful to
      # parse out of it (like severities).
      format none
      path /var/log/etcd.log
      pos_file /var/log/es-etcd.log.pos
      tag etcd
    </source>

    # Multi-line parsing is required for all the kube logs because very large log
    # statements, such as those that include entire object bodies, get split into
    # multiple lines by glog.

    # Example:
    # I0204 07:32:30.020537    3368 server.go:1048] POST /stats/container/: (13.972191ms) 200 [[Go-http-client/1.1] 10.244.1.3:40537]
    <source>
      @id kubelet.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/kubelet.log
      pos_file /var/log/es-kubelet.log.pos
      tag kubelet
    </source>

    # Example:
    # I1118 21:26:53.975789       6 proxier.go:1096] Port "nodePort for kube-system/default-http-backend:http" (:31429/tcp) was open before and is still needed
    <source>
      @id kube-proxy.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/kube-proxy.log
      pos_file /var/log/es-kube-proxy.log.pos
      tag kube-proxy
    </source>

    # Example:
    # I0204 07:00:19.604280       5 handlers.go:131] GET /api/v1/nodes: (1.624207ms) 200 [[kube-controller-manager/v1.1.3 (linux/amd64) kubernetes/6a81b50] 127.0.0.1:38266]
    <source>
      @id kube-apiserver.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/kube-apiserver.log
      pos_file /var/log/es-kube-apiserver.log.pos
      tag kube-apiserver
    </source>

    # Example:
    # I0204 06:55:31.872680       5 servicecontroller.go:277] LB already exists and doesn't need update for service kube-system/kube-ui
    <source>
      @id kube-controller-manager.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/kube-controller-manager.log
      pos_file /var/log/es-kube-controller-manager.log.pos
      tag kube-controller-manager
    </source>

    # Example:
    # W0204 06:49:18.239674       7 reflector.go:245] pkg/scheduler/factory/factory.go:193: watch of *api.Service ended with: 401: The event in requested index is outdated and cleared (the requested history has been cleared [2578313/2577886]) [2579312]
    <source>
      @id kube-scheduler.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/kube-scheduler.log
      pos_file /var/log/es-kube-scheduler.log.pos
      tag kube-scheduler
    </source>

    # Example:
    # I1104 10:36:20.242766       5 rescheduler.go:73] Running Rescheduler
    <source>
      @id rescheduler.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/rescheduler.log
      pos_file /var/log/es-rescheduler.log.pos
      tag rescheduler
    </source>

    # Example:
    # I0603 15:31:05.793605       6 cluster_manager.go:230] Reading config from path /etc/gce.conf
    <source>
      @id glbc.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/glbc.log
      pos_file /var/log/es-glbc.log.pos
      tag glbc
    </source>

    # Example:
    # I0603 15:31:05.793605       6 cluster_manager.go:230] Reading config from path /etc/gce.conf
    <source>
      @id cluster-autoscaler.log
      @type tail
      format multiline
      multiline_flush_interval 5s
      format_firstline /^\w\d{4}/
      format1 /^(?<severity>\w)(?<time>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<source>[^ \]]+)\] (?<message>.*)/
      time_format %m%d %H:%M:%S.%N
      path /var/log/cluster-autoscaler.log
      pos_file /var/log/es-cluster-autoscaler.log.pos
      tag cluster-autoscaler
    </source>

    # Logs from systemd-journal for interesting services.
    # TODO(random-liu): Remove this after cri container runtime rolls out.
    <source>
      @id journald-docker
      @type systemd
      filters [{ "_SYSTEMD_UNIT": "docker.service" }]
      <storage>
        @type local
        persistent true
      </storage>
      read_from_head true
      tag docker
    </source>

    <source>
      @id journald-container-runtime
      @type systemd
      filters [{ "_SYSTEMD_UNIT": "{{ container_runtime }}.service" }]
      <storage>
        @type local
        persistent true
      </storage>
      read_from_head true
      tag container-runtime
    </source>

    <source>
      @id journald-kubelet
      @type systemd
      filters [{ "_SYSTEMD_UNIT": "kubelet.service" }]
      <storage>
        @type local
        persistent true
      </storage>
      read_from_head true
      tag kubelet
    </source>

    <source>
      @id journald-node-problem-detector
      @type systemd
      filters [{ "_SYSTEMD_UNIT": "node-problem-detector.service" }]
      <storage>
        @type local
        persistent true
      </storage>
      read_from_head true
      tag node-problem-detector
    </source>

    <source>
      @id kernel
      @type systemd
      filters [{ "_TRANSPORT": "kernel" }]
      <storage>
        @type local
        persistent true
      </storage>
      <entry>
        fields_strip_underscores true
        fields_lowercase true
      </entry>
      read_from_head true
      tag kernel
    </source>

  forward.input.conf: |-
    # Takes the messages sent over TCP
    <source>
      @type forward
    </source>

  monitoring.conf: |-
    # Prometheus Exporter Plugin
    # input plugin that exports metrics
    <source>
      @type prometheus
    </source>

    <source>
      @type monitor_agent
    </source>

    # input plugin that collects metrics from MonitorAgent
    <source>
      @type prometheus_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>

    # input plugin that collects metrics for output plugin
    <source>
      @type prometheus_output_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>

    # input plugin that collects metrics for in_tail plugin
    <source>
      @type prometheus_tail_monitor
      <labels>
        host ${hostname}
      </labels>
    </source>

  output.conf: |-
    # Enriches records with Kubernetes metadata
    <filter kubernetes.**>
      @type kubernetes_metadata
    </filter>

    <match **>
      @id elasticsearch
      @type elasticsearch
      @log_level info
      include_tag_key true
      host elasticsearch-logging
      port 9200
      logstash_format true
      <buffer>
        @type file
        path /var/log/fluentd-buffers/kubernetes.system.buffer
        flush_mode interval
        retry_type exponential_backoff
        flush_thread_count 2
        flush_interval 5s
        retry_forever
        retry_max_interval 30
        chunk_limit_size 2M
        queue_limit_length 8
        overflow_action block
      </buffer>
    </match>


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

#
# Fluentd configuration - this installs onto all nodes and gathers all logs
# A separate yaml configures Fluentd
#
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluentd-es
  namespace: kube-system
  labels:
    k8s-app: fluentd-es
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: fluentd-es
  labels:
    k8s-app: fluentd-es
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
rules:
- apiGroups:
  - ""
  resources:
  - "namespaces"
  - "pods"
  verbs:
  - "get"
  - "watch"
  - "list"
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: fluentd-es
  labels:
    k8s-app: fluentd-es
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
subjects:
- kind: ServiceAccount
  name: fluentd-es
  namespace: kube-system
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: fluentd-es
  apiGroup: ""
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd-es-v2.2.0
  namespace: kube-system
  labels:
    k8s-app: fluentd-es
    version: v2.2.0
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  selector:
    matchLabels:
      k8s-app: fluentd-es
      version: v2.2.0
  template:
    metadata:
      labels:
        k8s-app: fluentd-es
        kubernetes.io/cluster-service: "true"
        version: v2.2.0
      # This annotation ensures that fluentd does not get evicted if the node
      # supports critical pod annotation based priority scheme.
      # Note that this does not guarantee admission on the nodes (#40573).
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
    spec:
      priorityClassName: system-node-critical
      serviceAccountName: fluentd-es
      containers:
      - name: fluentd-es
        image: k8s.gcr.io/fluentd-elasticsearch:v2.2.0
        env:
        - name: FLUENTD_ARGS
          value: --no-supervisor -q
        resources:
          limits:
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: config-volume
          mountPath: /etc/fluent/config.d
      # nodeSelector:
      #  beta.kubernetes.io/fluentd-ds-ready: "true"
      terminationGracePeriodSeconds: 30
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: config-volume
        configMap:
          name: fluentd-es-config-v0.1.4


---

#
# Elastic Search configuration
#
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-logging
  namespace: kube-system
  labels:
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "Elasticsearch"
spec:
  ports:
  - port: 9200
    protocol: TCP
    targetPort: db
  selector:
    k8s-app: elasticsearch-logging
---
# RBAC authn and authz
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elasticsearch-logging
  namespace: kube-system
  labels:
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: elasticsearch-logging
  labels:
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
rules:
- apiGroups:
  - ""
  resources:
  - "services"
  - "namespaces"
  - "endpoints"
  verbs:
  - "get"
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: kube-system
  name: elasticsearch-logging
  labels:
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
subjects:
- kind: ServiceAccount
  name: elasticsearch-logging
  namespace: kube-system
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: elasticsearch-logging
  apiGroup: ""
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-logging
  namespace: kube-system
  labels:
    k8s-app: elasticsearch-logging
    version: v6.2.5
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  serviceName: elasticsearch-logging
  replicas: 2
  selector:
    matchLabels:
      k8s-app: elasticsearch-logging
      version: v6.2.5
  template:
    metadata:
      labels:
        k8s-app: elasticsearch-logging
        version: v6.2.5
        kubernetes.io/cluster-service: "true"
    spec:
      serviceAccountName: elasticsearch-logging
      containers:
      - image: k8s.gcr.io/elasticsearch:v6.2.5
        name: elasticsearch-logging
        resources:
          # need more cpu upon initialization, therefore burstable class
          limits:
            cpu: 1000m
          requests:
            cpu: 100m
        ports:
        - containerPort: 9200
          name: db
          protocol: TCP
        - containerPort: 9300
          name: transport
          protocol: TCP
        volumeMounts:
        - name: elasticsearch-logging
          mountPath: /data
        env:
        - name: "NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      # Elasticsearch requires vm.max_map_count to be at least 262144.
      # If your OS already sets up this number to a higher value, feel free
      # to remove this init container.
      initContainers:
      - image: alpine:3.6
        command: ["/sbin/sysctl", "-w", "vm.max_map_count=262144"]
        name: elasticsearch-logging-init
        securityContext:
          privileged: true
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-logging
    spec:
      storageClassName: cloud-ssd
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 31Gi
---

#
# Finally, Kibana - for visualising the results
#

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana-logging
  namespace: kube-system
  labels:
    k8s-app: kibana-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: kibana-logging
  template:
    metadata:
      labels:
        k8s-app: kibana-logging
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
    spec:
      containers:
      - name: kibana-logging
        image: docker.elastic.co/kibana/kibana-oss:6.2.4
        resources:
          # need more cpu upon initialization, therefore burstable class
          limits:
            cpu: 1000m
          requests:
            cpu: 100m
        env:
          - name: ELASTICSEARCH_URL
            value: http://elasticsearch-logging:9200
        ports:
        - containerPort: 5601
          name: ui
          protocol: TCP

---
apiVersion: v1
kind: Service
metadata:
  name: kibana-logging
  namespace: kube-system
  labels:
    k8s-app: kibana-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "Kibana"
spec:
  ports:
  - port: 5601
    protocol: TCP
    targetPort: ui
  selector:
    k8s-app: kibana-logging
  type: LoadBalancer


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

before_script:
  - docker info
  - whoami

stages:
  - test
  - publish

job:test:
  tags:
    - build
  before_script:
    - docker run --name postgres-test -d -e "POSTGRES_PASSWORD=postgres" -p 5432:5432 postgres    
    - docker build -t $DOCKER_HUB_ID/fib-client -f ./client/DockerFile.dev
    - docker build -t $DOCKER_HUB_ID/fib-server -f ./server/DockerFile.dev
    - docker build -t $DOCKER_HUB_ID/fib-worker -f ./worker/DockerFile.dev
  script:

    - docker run $DOCKER_HUB_ID/fib-client npm test -- --coverage
    - docker run $DOCKER_HUB_ID/fib-server npm test -- --coverage
    - docker run $DOCKER_HUB_ID/fib-worker npm test -- --coverage
  after_script:
    - docker rm -f postgres-test

job:publish:
  tags:
    - build
  before_script:
    - docker login -u $DOCKER_HUB_ID  -p $DOCKER_HUB_PASS 
  script:
    - docker push $DOCKER_HUB_ID/fib-client:latest"
    - docker push $DOCKER_HUB_ID/fib-server:latest"
    - docker push $DOCKER_HUB_ID/fib-worker:latest"
  when: on_success
  only:
    - master



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

server:
  port: 9090
spring:
  application:
    name: car-loan-notification
  config:
    location: classpath:application.yml
  main:
    allow-bean-definition-overriding: true
  cloud:
    stream:
      bindings:
        input:
          destination: loan.proposal.saved
          group: proposal-saved-notification
          consumer:
            maxAttempts: 2
            concurrency: 3
      rabbit:
        default:
          consumer:
            bindQueue: false
            declareDlx: false
            declareExchange: false
            queueNameGroupOnly: true
            autoBindDlq: false
            republishToDlq: false
        binder:
          connection-name-prefix: notification
  rabbitmq:
    host: localdocker.com
    virtual-host: /
    cache:
      channel:
        size: 5
        checkout-timeout: 5s
    username: guest
    password: guest
  liquibase:
    enabled: false
  datasource:
    initialization-mode: EMBEDDED
    url: jdbc:h2:mem:db;INIT=CREATE SCHEMA IF NOT EXISTS notifications
    username: sa
    password: ""
    data: classpath:data-h2.sql
  h2:
    console:
      enabled: true
  jpa:
    show-sql: true
    open-in-view: false
  mail:
    host: smtp.localhost.com
    port: 333
    username: email@mail.com
    password: 1234
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
management:
  server:
    port: ${server.port}
  metrics:
    export:
      jmx:
        enabled: false
  endpoints:
    web:
      exposure:
        include: health, metrics, prometheus
  health:
    mail:
      enabled: false
---
spring:
  profiles: cloud
  main:
    lazy-initialization: true
  h2:
    console:
      enabled: false
  liquibase:
    enabled: true
  datasource:
    # Set env SPRING_DATASOURCE_PASSWORD, SPRING_DATASOURCE_USERNAME
    url: jdbc:postgresql://_db._tcp.car-loan-database/notifications
    initialization-mode: NEVER
  jpa:
    show-sql: false
    generate-ddl: false
    hibernate:
      ddl-auto: none
  rabbitmq:
    # Set env SPRING_RABBITMQ_HOST, SPRING_RABBITMQ_PASSWORD, SPRING_RABBITMQ_USERNAME
    virtual-host: /
    cache:
      channel:
        size: 10
        checkout-timeout: 2s
  mail:
    # Set env SPRING_MAIL_HOST, SPRING_MAIL_PORT, SPRING_MAIL_USERNAME, SPRING_MAIL_PASSWORD
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

server:
  port: 9090
spring:
  application:
    name: car-loan-consumers
  config:
    location: classpath:application.yml
  main:
    allow-bean-definition-overriding: true
  cloud:
    stream:
      bindings:
        input:
          destination: loan.proposal.saved
          group: proposal-saved-consumers
          consumer:
            maxAttempts: 2
            concurrency: 3
      rabbit:
        default:
          consumer:
            bindQueue: false
            declareDlx: false
            declareExchange: false
            queueNameGroupOnly: true
            autoBindDlq: false
            republishToDlq: false
        binder:
          connection-name-prefix: consumers
  rabbitmq:
    host: localdocker.com
    virtual-host: /
    cache:
      channel:
        size: 5
        checkout-timeout: 5s
    username: guest
    password: guest
  liquibase:
    enabled: false
  datasource:
    initialization-mode: EMBEDDED
    url: jdbc:h2:mem:db;INIT=CREATE SCHEMA IF NOT EXISTS consumers
    username: sa
    password: ""
  h2:
    console:
      enabled: true
  jpa:
    show-sql: true
    open-in-view: false
management:
  server:
    port: ${server.port}
  metrics:
    export:
      jmx:
        enabled: false
  endpoints:
    web:
      exposure:
        include: health, metrics, prometheus
---
spring:
  profiles: cloud
  main:
    lazy-initialization: true
  h2:
    console:
      enabled: false
  liquibase:
    enabled: true
  datasource:
    # Set env SPRING_DATASOURCE_PASSWORD, SPRING_DATASOURCE_USERNAME
    url: jdbc:postgresql://_db._tcp.car-loan-database/notifications
    initialization-mode: NEVER
  jpa:
    show-sql: false
    generate-ddl: false
    hibernate:
      ddl-auto: none
  rabbitmq:
    # Set env SPRING_RABBITMQ_HOST, SPRING_RABBITMQ_PASSWORD, SPRING_RABBITMQ_USERNAME
    virtual-host: /
    cache:
      channel:
        size: 10
        checkout-timeout: 2s

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============


spring:
  application:
    name: car-loan-locales
  config:
    location: classpath:application.yml
  cache:
    type: simple
  main:
    allow-bean-definition-overriding: true
management:
  server:
    port: 9090
  metrics:
    export:
      jmx:
        enabled: false
  endpoints:
    web:
      exposure:
        include: health, metrics, prometheus
  health:
    redis:
      enabled: false
---
spring:
  profiles: cloud
  main:
    lazy-initialization: true
  cache:
    type: redis
    redis:
      cache-null-values: false
      key-prefix: ${spring.application.name}
      time-to-live: 1d
  redis:
    timeout: 1s
    client-name: locales_${random.int}
    jedis:
      pool:
        max-wait: 1s
  data:
    redis:
      repositories:
        enabled: false


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  config:
    location: classpath:application.yml
  liquibase:
    enabled: false
  datasource:
    initialization-mode: EMBEDDED
    url: jdbc:h2:mem:db;INIT=CREATE SCHEMA IF NOT EXISTS vehicles
    username: sa
    password: ""
    data: classpath:data-h2.sql
  h2:
    console:
      enabled: true
  jpa:
    show-sql: true
management:
  server:
    port: 9090
  metrics:
    export:
      jmx:
        enabled: false
  endpoints:
    web:
      exposure:
        include: health, metrics, prometheus
---
spring:
  profiles: cloud
  liquibase:
    enabled: true
  datasource:
    initialization-mode: NEVER
  jpa:
    show-sql: false
    generate-ddl: false
    hibernate:
      ddl-auto: none
  h2:
    console:
      enabled: false
  main:
    lazy-initialization: true


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: room-reservation-service
  labels:
    app: room-reservation-service
    version: 0.0.1-SNAPSHOT
    group: ca.zhoozhoo.spring.cloud.kubernetes
spec:
  replicas: 1
  selector:
    matchLabels:
      app: room-reservation-service
      group: ca.zhoozhoo.spring.cloud.kubernetes
  template:
    metadata:
      labels:
        app: room-reservation-service
        version: 0.0.1-SNAPSHOT
        group: ca.zhoozhoo.spring.cloud.kubernetes
    spec:
      containers:
      - name: room-reservation-service
        image: zhoozhoo/spring-cloud-kubernetes-room-reservation-service:latest
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: "512Mi"
            cpu: "1000m"
        env:
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        startupProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 3
          timeoutSeconds: 1
          failureThreshold: 20
          successThreshold: 1
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port:  8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 15
          timeoutSeconds: 1
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        ports:
        - name: http
          containerPort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: room-reservation-service
  labels:
    app: room-reservation-service
    group: ca.zhoozhoo.spring.cloud.kubernetes
spec:
  ports:
  - name: http
    port: &target 8080
    protocol: TCP
    targetPort: *target
  selector:
    app: room-reservation-service
    group: ca.zhoozhoo.spring.cloud.kubernetes
  type: NodePort


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: ConfigMap
apiVersion: v1
metadata:
  name: room-reservation-service
data:
  application.yml: |-
    server:
      port: 8080
    spring:
      cloud:
        kubernetes:
          discovery:
            service-labels:
              group: ca.zhoozhoo.spring.cloud.kubernetes
      zipkin:
        baseUrl: http://host.docker.internal:9411
      security:
        oauth2:
          resourceserver:
            jwt:
              issuer-uri: http://host.docker.internal:8180/auth/realms/spring-cloud-gateway-realm
    management:
      endpoint:
        health:
          enabled: true
        info:
          enabled: true


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: room-reservation-service
  cloud:
    kubernetes:
      config:
        sources:
          - name: other
          - name: ${spring.application.name}
      reload:
        enabled: true
        strategy: refresh
        mode: polling
        period: 5000


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: ConfigMap
apiVersion: v1
metadata:
  name: guest-service
data:
  application.yml: |-
    server:
      port: 8080
    spring:
      cloud:
        kubernetes:
          discovery:
            service-labels:
              group: ca.zhoozhoo.spring.cloud.kubernetes
      zipkin:
        baseUrl: http://host.docker.internal:9411
      security:
        oauth2:
          resourceserver:
            jwt:
              issuer-uri: http://host.docker.internal:8180/auth/realms/spring-cloud-gateway-realm
    management:
      endpoint:
        health:
          enabled: true
          group:
        info:
          enabled: true


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: guest-service
  labels:
    app: guest-service
    version: 0.0.1-SNAPSHOT
    group: ca.zhoozhoo.spring.cloud.kubernetes
spec:
  replicas: 1
  selector:
    matchLabels:
      app: guest-service
      group: ca.zhoozhoo.spring.cloud.kubernetes
  template:
    metadata:
      labels:
        app: guest-service
        version: 0.0.1-SNAPSHOT
        group: ca.zhoozhoo.spring.cloud.kubernetes
    spec:
      containers:
      - name: guest-service
        image: zhoozhoo/spring-cloud-kubernetes-guest-service:latest
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: "512Mi"
            cpu: "1000m"
        env:
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        startupProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 3
          timeoutSeconds: 1
          failureThreshold: 20
          successThreshold: 1
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port:  8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 15
          timeoutSeconds: 1
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        ports:
        - name: http
          containerPort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: guest-service
  labels:
    app: guest-service
    group: ca.zhoozhoo.spring.cloud.kubernetes
spec:
  ports:
  - name: http
    port: &target 8080
    protocol: TCP
    targetPort: *target
  selector:
    app: guest-service
    group: ca.zhoozhoo.spring.cloud.kubernetes
  type: NodePort


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: guest-service
  cloud:
    kubernetes:
      config:
        sources:
          - name: other
          - name: ${spring.application.name}
      reload:
        enabled: true
        strategy: refresh
        mode: polling
        period: 5000


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: ConfigMap
apiVersion: v1
metadata:
  name: room-service
data:
  application.yml: |-
    server:
      port: 8080
    spring:
      cloud:
        kubernetes:
          discovery:
            service-labels:
              group: ca.zhoozhoo.spring.cloud.kubernetes
      zipkin:
        baseUrl: http://host.docker.internal:9411
      security:
        oauth2:
          resourceserver:
            jwt:
              issuer-uri: http://host.docker.internal:8180/auth/realms/spring-cloud-gateway-realm
    management:
      endpoint:
        health:
          enabled: true
        info:
          enabled: true


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: room-service
  labels:
    app: room-service
    version: 0.0.1-SNAPSHOT
    group: ca.zhoozhoo.spring.cloud.kubernetes
spec:
  replicas: 1
  selector:
    matchLabels:
      app: room-service
      group: ca.zhoozhoo.spring.cloud.kubernetes
  template:
    metadata:
      labels:
        app: room-service
        version: 0.0.1-SNAPSHOT
        group: ca.zhoozhoo.spring.cloud.kubernetes
    spec:
      containers:
      - name: room-service
        image: zhoozhoo/spring-cloud-kubernetes-room-service:latest
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: "512Mi"
            cpu: "1000m"
        env:
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        startupProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 3
          timeoutSeconds: 1
          failureThreshold: 20
          successThreshold: 1
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port:  8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 15
          timeoutSeconds: 1
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        ports:
        - name: http
          containerPort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: room-service
  labels:
    app: room-service
    group: ca.zhoozhoo.spring.cloud.kubernetes
spec:
  ports:
  - name: http
    port: &target 8080
    protocol: TCP
    targetPort: *target
  selector:
    app: room-service
    group: ca.zhoozhoo.spring.cloud.kubernetes
  type: NodePort


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: room-service
  cloud:
    kubernetes:
      config:
        sources:
          - name: other
          - name: ${spring.application.name}
      reload:
        enabled: true
        strategy: refresh
        mode: polling
        period: 5000


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-server
  labels:
    app: admin-server
    version: 0.0.1-SNAPSHOT
    group: ca.zhoozhoo.spring.cloud.kubernetes
spec:
  replicas: 1
  selector:
    matchLabels:
      app: admin-server
      group: ca.zhoozhoo.spring.cloud.kubernetes
  template:
    metadata:
      labels:
        app: admin-server
        version: 0.0.1-SNAPSHOT
        group: ca.zhoozhoo.spring.cloud.kubernetes
    spec:
      containers:
      - name: admin-server
        image: zhoozhoo/spring-cloud-kubernetes-admin-server:latest
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: "512Mi"
            cpu: "1000m"
        env:
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        startupProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 3
          timeoutSeconds: 1
          failureThreshold: 20
          successThreshold: 1
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port:  8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 15
          timeoutSeconds: 1
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        ports:
        - name: http
          containerPort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: ConfigMap
apiVersion: v1
metadata:
  name: admin-server
data:
  application.yml: |-
    server:
      port: 8080
    spring:
      cloud:
        kubernetes:
          discovery:
            service-labels:
              group: ca.zhoozhoo.spring.cloud.kubernetes
    management:
      endpoint:
        health:
          enabled: true
        info:
          enabled: true


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  labels:
    app: admin-server
    group: ca.zhoozhoo.spring.cloud.kubernetes
  name: admin-server
spec:
  ports:
  - name: http
    port: 9090
    protocol: TCP
    targetPort: 8080
  selector:
    app: admin-server
    group: ca.zhoozhoo.spring.cloud.kubernetes
  type: LoadBalancer


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: admin-server
  cloud:
    kubernetes:
      config:
        sources:
          - name: other
          - name: ${spring.application.name}
      reload:
        enabled: true
        strategy: refresh
        mode: polling
        period: 5000


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: ConfigMap
apiVersion: v1
metadata:
  name: api-gateway
data:
  application.yaml: |-
    server:
      port: 8080
    spring:
      cloud:
        gateway:
          discovery:
            locator:
              enabled: true
          default-filters:
          - TokenRelay
          routes:
            - id: guest-service
              uri: lb://guest-service
              predicates:
                - Path=/guests/**
            - id: reservation-service
              uri: lb://reservation-service
              predicates:
                - Path=/reservations/**
            - id: room-service
              uri: lb://room-service
              predicates:
                - Path=/rooms/**
            - id: room-reservation-service
              uri: lb://room-reservation-service
              predicates:
                - Path=/room-reservations/**
        kubernetes:
          discovery:
            service-labels:
              group: ca.zhoozhoo.spring.cloud.kubernetes
      sleuth:
        sampler:
          percentage: 1.0
      zipkin:
        baseUrl: http://host.docker.internal:9411
      security:
        oauth2:
          client:
            provider:
              keycloack:
                issuer-uri: http://host.docker.internal:8180/auth/realms/spring-cloud-gateway-realm
                user-name-attribute: preferred_username
            registration:
              keycloack:
                provider: keycloack
                client-id: ${OAUTH2_CLIENT_ID}
                client-secret: ${OAUTH2_CLIENT_SECRET}
    management:
      endpoint:
        health:
          enabled: true
        info:
          enabled: true


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  labels:
    app: api-gateway
    group: ca.zhoozhoo.spring.cloud.kubernetes
  name: api-gateway
spec:
  ports:
    - name: http
      port: &target 8080
      protocol: TCP
      targetPort: *target
  selector:
    app: api-gateway
    group: ca.zhoozhoo.spring.cloud.kubernetes
  type: LoadBalancer


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  labels:
    app: api-gateway
    version: 0.0.1-SNAPSHOT
    group: ca.zhoozhoo.spring.cloud.kubernetes
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
      version: 0.0.1-SNAPSHOT
      group: ca.zhoozhoo.spring.cloud.kubernetes
  template:
    metadata:
      labels:
        app: api-gateway
        group: ca.zhoozhoo.spring.cloud.kubernetes
    spec:
      containers:
      - name: api-gateway
        image: zhoozhoo/spring-cloud-kubernetes-api-gateway:latest
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: "512Mi"
            cpu: "1000m"
        env:
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: OAUTH2_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: api-gateway
              key: client-id
        - name: OAUTH2_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: api-gateway
              key: client-secret
        startupProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 3
          timeoutSeconds: 1
          failureThreshold: 20
          successThreshold: 1
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port:  8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 15
          timeoutSeconds: 1
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        ports:
        - name: http
          containerPort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: Secret
apiVersion: v1
metadata:
  name: api-gateway
data:
  client-id: c3ByaW5nLWNsb3VkLWdhdGV3YXktY2xpZW50
  client-secret: NGFjOWZiNzMtNGNkYy00YzNkLWIzNWEtZmFhZGJmZGMwN2Ri


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: api-gateway
  cloud:
    kubernetes:
      config:
        sources:
          - name: other
          - name: ${spring.application.name}
      reload:
        enabled: true
        strategy: refresh
        mode: polling
        period: 5000


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: ConfigMap
apiVersion: v1
metadata:
  name: reservation-service
data:
  application.yml: |-
    server:
      port: 8080
    spring:
      cloud:
        kubernetes:
          discovery:
            service-labels:
              group: ca.zhoozhoo.spring.cloud.kubernetes
      zipkin:
        baseUrl: http://host.docker.internal:9411
      security:
        oauth2:
          resourceserver:
            jwt:
              issuer-uri: http://host.docker.internal:8180/auth/realms/spring-cloud-gateway-realm
    management:
      endpoint:
        health:
          enabled: true
        info:
          enabled: true


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: reservation-service
  labels:
    app: reservation-service
    group: ca.zhoozhoo.spring.cloud.kubernetes
spec:
  ports:
  - name: http
    port: &target 8080
    protocol: TCP
    targetPort: *target
  selector:
    app: reservation-service
    group: ca.zhoozhoo.spring.cloud.kubernetes
  type: NodePort


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: reservation-service
  labels:
    app: reservation-service
    version: 0.0.1-SNAPSHOT
    group: ca.zhoozhoo.spring.cloud.kubernetes
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reservation-service
      group: ca.zhoozhoo.spring.cloud.kubernetes
  template:
    metadata:
      labels:
        app: reservation-service
        version: 0.0.1-SNAPSHOT
        group: ca.zhoozhoo.spring.cloud.kubernetes
    spec:
      containers:
      - name: reservation-service
        image: zhoozhoo/spring-cloud-kubernetes-reservation-service:latest
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: "512Mi"
            cpu: "1000m"
        env:
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        startupProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 3
          timeoutSeconds: 1
          failureThreshold: 20
          successThreshold: 1
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port:  8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 15
          timeoutSeconds: 1
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        ports:
        - name: http
          containerPort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: reservation-service
  cloud:
    kubernetes:
      config:
        sources:
          - name: other
          - name: ${spring.application.name}
      reload:
        enabled: true
        strategy: refresh
        mode: polling
        period: 5000


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: auth-server
  labels:
    app: auth-server
spec:
  ports:
  - name: http
    port: 8180
    protocol: TCP
    targetPort: 8080
  selector:
    app: auth-server
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-server
  labels:
    app: auth-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-server
  template:
    metadata:
      labels:
        app: auth-server
    spec:
      containers:
      - name: auth-server
        imagePullPolicy: IfNotPresent
        image: zhoozhoo/spring-cloud-auth-server
        ports:
        - name: http
          containerPort: &target 8080
        readinessProbe:
          httpGet:
            path: /auth/realms/master
            port: *target
        


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: tracing-server
  labels:
    app: tracing-server
spec:
  ports:
  - name: http
    port: &target 9411
    protocol: TCP
    targetPort: *target
  selector:
    app: tracing-server
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tracing-server
  labels:
    app: tracing-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tracing-server
  template:
    metadata:
      labels:
        app: tracing-server
    spec:
      containers:
      - name: tracing-server
        imagePullPolicy: IfNotPresent
        image: openzipkin/zipkin
        ports:
        - name: http
          containerPort: 9411


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
 name: kubedns-config
 namespace: default
data:
 staff.dns: demo-k8s-staff 


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: ConfigMap
apiVersion: v1
metadata:
 name: kubedns-config
 namespace: default
data:
 staff.dns: demo-k8s-staff 
 staff.port: "8080"
 frontend.port: "8081"
---
kind: Service
apiVersion: v1
metadata:
  name: demo-k8s-frontend
spec:
  selector:
    app: demo-k8s-frontend
  ports:
  - protocol: TCP
    port: 8081
    name: theport
  type: LoadBalancer 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-k8s-frontend
spec:
  selector:
      matchLabels:
        app: demo-k8s-frontend
  replicas: 1 
  template:
    metadata:
      labels:
        app: demo-k8s-frontend
    spec:
      containers:
        - name: demo-k8s-frontend
          image: registry.gitlab.com/nlonginow/demo-k8s-frontend
          ports:
            - containerPort: 8081
          env:
          - name: STAFF_DNS 
            valueFrom:
              configMapKeyRef:
                name: kubedns-config
                key: staff.dns
          - name: STAFF_PORT
            valueFrom:
              configMapKeyRef:
                name: kubedns-config
                key: staff.port



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

image: docker:latest
services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay
  SPRING_PROFILES_ACTIVE: gitlab-ci

stages:
  - build
  - package
  - warmup
  - deploy
  - test
  - teardown

warmup:
  image: google/cloud-sdk
  stage: warmup 
  script:
  - echo "$GOOGLE_KEY" > key.json
  - gcloud auth activate-service-account --key-file key.json
  - gcloud config set compute/zone us-central1-a
  - gcloud config set project micro-228014
  - gcloud config set container/use_client_certificate True
  - gcloud config unset container/use_client_certificate  # test line
  - gcloud container clusters get-credentials mycluster
  - gcloud container clusters resize mycluster --size 3 --quiet --zone us-central1-a 

maven-build:
  image: maven:3-jdk-8
  stage: build
  script: "mvn package -B -DskipTests spring-boot:repackage"
  artifacts:
    paths:
      - target/*.jar

docker-build:
  stage: package
  script:
  - docker build -t registry.gitlab.com/nlonginow/demo-k8s-frontend .
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
  - docker push registry.gitlab.com/nlonginow/demo-k8s-frontend

k8s-deploy:
  image: google/cloud-sdk
  stage: deploy
  script:
  - echo "$GOOGLE_KEY" > key.json
  - gcloud auth activate-service-account --key-file key.json
  - gcloud config set compute/zone us-central1-a
  - gcloud config set project micro-228014 
  - gcloud config set container/use_client_certificate True
  - gcloud config unset container/use_client_certificate  # test line
  - gcloud container clusters get-credentials mycluster 
  - if kubectl get secrets | grep registry.gitlab.com; then kubectl delete secret registry.gitlab.com; fi 
  - kubectl create secret docker-registry registry.gitlab.com --docker-server=https://registry.gitlab.com --docker-username=nlonginow --docker-password=$REGISTRY_PASSWD --docker-email=nick.longinow@teradata.com
  - kubectl apply -f frontend-deployment.yaml
  - kubectl delete pods -l app=demo-k8s-frontend

k8s-test:
  image: google/cloud-sdk
  stage: test
  script:
  - echo 'Gathering details for the smoke test...'
  - echo "$GOOGLE_KEY" > key.json
  - gcloud auth activate-service-account --key-file key.json
  - gcloud config set compute/zone us-central1-a
  - gcloud config set project micro-228014
  - gcloud config set container/use_client_certificate True
  - gcloud config unset container/use_client_certificate  # test line
  - gcloud container clusters get-credentials mycluster
  - webserv=`kubectl describe service demo-k8s-frontend | grep Ingress | cut -c26-40`
  - echo $webserv
  - port=`kubectl describe configmap kubedns-config | grep -A2 'frontend.port' | tail -n 1`
  - echo $port
  - full=$webserv":"$port
  - echo $full
  - echo 'Ready.  Starting smoke test...'
  - ./smokeTest.sh  $full "$TEST_ONE_KEYWORD"

teardown:
  image: google/cloud-sdk
  stage: teardown 
  script:
  - echo "$GOOGLE_KEY" > key.json
  - gcloud auth activate-service-account --key-file key.json
  - gcloud config set compute/zone us-central1-a
  - gcloud config set project micro-228014
  - gcloud config set container/use_client_certificate True
  - gcloud config unset container/use_client_certificate  # test line
  - gcloud container clusters get-credentials mycluster
  - gcloud container clusters resize mycluster --size 0 --quiet --zone us-central1-a




========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
    build:
        docker:
            # Use the same Docker base as the project
            - image: python:3.7.3-stretch

        working_directory: ~/repo

        steps:
            - checkout

            # Download and cache dependencies
            - restore_cache:
                keys:
                - v1-dependencies-{{ checksum "requirements.txt" }}
                # fallback to using the latest cache if no exact match is found
                - v1-dependencies-

            - run:
                name: install dependencies
                command: |
                    python3 -m venv venv
                    . venv/bin/activate
                    make install
                    # Install hadolint
                    wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                    chmod +x /bin/hadolint

            - save_cache:
                paths:
                - ./venv
                key: v1-dependencies-{{ checksum "requirements.txt" }}

            # run lint!
            - run:
                name: run lint
                command: |
                    . venv/bin/activate
                    make lint


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: skaffold/v2alpha3
kind: Config
deploy:
    kubectl:
        manifests:
            - ./infra/k8s/*
build:
    local:
        push: false
    artifacts:
        - image: michgboxy/client
          context: client
          docker:
            dockerfile: Dockerfile
          sync:
            manual:
                - src: 'src/**/*.js'
                  dest: .

        - image: michgboxy/comments
          context: comments
          docker:
            dockerfile: Dockerfile
          sync:
            manual:
                - src: '*.js'
                  dest: .

        - image: michgboxy/event-bus
          context: event-bus
          docker:
            dockerfile: Dockerfile
          sync:
            manual:
                - src: '*.js'
                  dest: .

        - image: michgboxy/moderation
          context: moderation
          docker:
            dockerfile: Dockerfile
          sync:
            manual:
                - src: '*.js'
                  dest: .

        - image: michgboxy/posts
          context: posts
          docker:
            dockerfile: Dockerfile
          sync:
            manual:
                - src: '*.js'
                  dest: .

        - image: michgboxy/query
          context: query
          docker:
            dockerfile: Dockerfile
          sync:
            manual:
                - src: '*.js'
                  dest: .

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
    name: client-depl
spec:
    replicas: 1
    selector:
        matchLabels:
            app: client
    template:
        metadata:
            labels:
                app: client
        spec:
            containers:
                - name: client
                  image: michgboxy/client

---
apiVersion: v1
kind: Service
metadata:
    name: client-srv
spec:
    selector:
        app: client
    ports:
        - name: client
          protocol: TCP
          port: 3000
          targetPort: 3000
                

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
    name: ingress-srv
    annotations:
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/use-regex: 'true'
spec:
    rules:
        - host: posts.com
          http:
            paths:
                - path: /posts/create
                  backend:
                    serviceName: post-clusterip-srv
                    servicePort: 4000
                - path: /posts
                  backend:
                    serviceName: query-srv
                    servicePort: 4002
                - path: /posts/?(.*)/comments
                  backend:
                    serviceName: comments-srv
                    servicePort: 4001
                - path: /?(.*)
                  backend:
                    serviceName: client-srv
                    servicePort: 3000

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
    name: query-depl
spec:
    replicas: 1
    selector:
        matchLabels:
            app: query
    template:
        metadata:
            labels:
                app: query
        spec:
            containers:
                - name: query
                  image: michgboxy/query

---
apiVersion: v1
kind: Service
metadata:
    name: query-srv
spec:
    selector:
        app: query
    ports:
        - name: query
          protocol: TCP
          port: 4002
          targetPort: 4002
                

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Pod
metadata:
    name: posts
spec:
    containers:
        - name: posts
          image: michgboxy/posts:0.0.1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
    name: comments-depl
spec:
    replicas: 1
    selector:
        matchLabels:
            app: comments
    template:
        metadata:
            labels:
                app: comments
        spec:
            containers:
                - name: comments
                  image: michgboxy/comments

---
apiVersion: v1
kind: Service
metadata:
    name: comments-srv
spec:
    selector:
        app: comments
    ports:
        - name: comments
          protocol: TCP
          port: 4001
          targetPort: 4001
                

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
    name: event-bus-depl
spec:
    replicas: 1
    selector:
        matchLabels:
            app: event-bus
    template:
        metadata:
            labels:
                app: event-bus
        spec:
            containers:
                - name: event-bus
                  image: michgboxy/event-bus

---
apiVersion: v1
kind: Service
metadata:
    name: event-bus-srv
spec:
    selector:
        app: event-bus
    ports:
        - name: event-bus
          protocol: TCP
          port: 4005
          targetPort: 4005
                

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
    name: posts-depl
spec:
    replicas: 1
    selector:
        matchLabels:
            app: posts
    template:
        metadata:
            labels:
                app: posts 
        spec:
            containers:
                - name: posts
                  image: michgboxy/posts
---
apiVersion: v1
kind: Service
metadata:
    name: post-clusterip-srv
spec:
    selector:
        app: posts
    ports:
        - name: posts
          protocol: TCP
          port: 4000
          targetPort: 4000

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
    name: posts-srv
spec:
    type: NodePort
    selector:
        app: posts
    ports:
        - name: posts
          protocol: TCP
          port: 4000
          targetPort: 4000

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
    name: moderation-depl
spec:
    replicas: 1
    selector:
        matchLabels:
            app: moderation
    template:
        metadata:
            labels:
                app: moderation
        spec:
            containers:
                - name: moderation
                  image: michgboxy/moderation

---
apiVersion: v1
kind: Service
metadata:
    name: moderation-srv
spec:
    selector:
        app: moderation
    ports:
        - name: moderation
          protocol: TCP
          port: 4003
          targetPort: 4003
                

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
 name: user-balance
 labels:
  app: user-balance-key
spec:
 type: ClusterIP
 ports:
  - targetPort: 8010
    port: 8010
 selector:
  app: balance-app-key
  

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
 name: details-dp
 labels:
  app: details-dp-key
spec:
 template:
  metadata:
   name: details-app
   labels:
    app: details-app-key
  spec:
   containers:
    - name: details
      image: ksaminat/details:1.10
 replicas: 1
 selector:
  matchLabels:
   app: details-app-key


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
 name: user-account
 labels:
  app: user-account-key
spec:
 type: NodePort
 ports:
  - targetPort: 8081
    port: 8081
    protocol: TCP
    name: http
 selector:
  app: details-app-key

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
 name: user-balance-node
 labels:
  app: user-balance-key-node
spec:
 type: NodePort
 ports:
  - targetPort: 8010
    port: 8010
 selector:
  app: balance-app-key
  

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
 name: balance-dp
 labels:
  app: balance-dp-key
spec:
 template:
  metadata:
   name: balance-app
   labels:
    app: balance-app-key
  spec:
   containers:
    - name: balance
      image: ksaminat/balance:1.0
 replicas: 3
 selector:
  matchLabels:
   app: balance-app-key
   

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Pod
metadata:
  name: banking-app
  labels:
    app: banking-app
spec:
  containers:
    - name: banking
      image: ksaminat/services:latest

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Pod
metadata:
  name: my-pod
  labels:
    app: nginx-app
spec:
  containers:
    - name: nginx-container
      image: nginx

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
 name: nginx-service
 labels:
  app: nginx-service-key
spec:
 type: NodePort
 ports:
  - targetPort: 80
    port: 8080
 selector:
  app: nginx-app
  


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
 name: nginx-dp
 labels:
  app: nginx-app
spec:
 template:
  metadata:
   name: nginx
   labels:
    app: nginx-app
  spec:
   containers:
    - name: nginx
      image: nginx
 replicas: 1
 selector:
  matchLabels:
   app: nginx-app

    

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: db
  labels:
    name: db-service
    app: demo-voting-app
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    name: postgres-pod
    app: demo-voting-app

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    name: redis-service
    app: demo-voting-app
spec:
  ports:
    - port: 6379
      targetPort: 6379
  selector:
      name: redis-pod
      app: demo-voting-app
    


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker-app-deployment
  labels:
    app: demo-voting-app
spec:
  replicas: 1
  selector:
    matchLabels:
      name: worker-app-pod
      app: demo-voting-app
  template:
    metadata:
      name: worker-app-pod
      labels: 
        name: worker-app-pod
        app: demo-voting-app
    spec:
      containers:
        - name: worker-app
          image: dockersamples/examplevotingapp_worker

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: result-app-deployment
  labels:
    app: demo-voting-app
spec:
  replicas: 1
  selector:
    matchLabels:
      name: redis-pod
      app: demo-voting-app
  template:
    metadata:
      name: redis-pod
      labels: 
        name: redis-pod
        app: demo-voting-app
    spec:
      containers:
        - name: redis
          image: redis
          ports:
            - containerPort: 6379  

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  labels:
    app: demo-voting-app
spec:
  replicas: 1
  selector:
    matchLabels:
      name: postgres-pod
      app: demo-voting-app
  template:
    metadata:
      name: postgres-pod
      labels: 
        name: postgres-pod
        app: demo-voting-app
    spec:
      containers:
        - name: postgres
          image: postgres:9.4
          ports:
            - containerPort: 5432  
  

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: result-service
  labels:
    name: result-service
    app: demo-voting-app
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 80
  selector:
    name: result-app-pod
    app: demo-voting-app

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: voting-service
  labels:
    name: voting-service
    app: demo-voting-app
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 80
  selector:
    name: voting-app-pod
    app: demo-voting-app

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: voting-app-deployment
  labels:
    app: demo-voting-app
spec:
  replicas: 1
  selector:
    matchLabels:
      name: voting-app-pod
      app: demo-voting-app
  template:
    metadata:
      name: voting-app-pod
      labels: 
        name: voting-app-pod
        app: demo-voting-app
    spec:
      containers:
        - name: voting-app
          image: dockersamples/examplevotingapp_vote
          ports:
            - containerPort: 80

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  labels:
    app: demo-voting-app
spec:
  replicas: 1
  selector:
    matchLabels:
      name: redis-pod
      app: demo-voting-app
  template:
    metadata:
      name: redis-pod
      labels: 
        name: redis-pod
        app: demo-voting-app
    spec:
      containers:
        - name: redis
          image: redis
          ports:
            - containerPort: 6379


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for deployment of the Authorization Microservice written for Auth0.
name: auth-microservice-auth0
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# Default values for auth-microservice-auth0.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: registry.freebytech.com/k8s-tests/auth-microservice-auth0
  tag: "latest"
  pullPolicy: Always
  imagePullSecrets: "freebytech-regcred"
env:
  - name: SANDBOXAPP__ENVIRONMENTNAME
    valueFrom:
      secretKeyRef:
        name: standard-env-secrets
        key: ENVIRONMENT_NAME
  - name: SANDBOXAPP__EXTERNALDNSNAME
    valueFrom:
      secretKeyRef:
        name: sandboxapps-env-secrets
        key: SANDBOXAPPS_DNS_NAME
  - name: AUTH0__DOMAIN
    valueFrom:
      secretKeyRef:
        name: sts-env-secrets
        key: AUTH0_DOMAIN
  - name: AUTH0__CLIENTID
    valueFrom:
      secretKeyRef:
        name: sts-env-secrets
        key: AUTH0_CLIENTID
  - name: AUTH0__CLIENTSECRET
    valueFrom:
      secretKeyRef:
        name: sts-env-secrets
        key: AUTH0_CLIENTSECRET
  - name: ASPNETCORE_ENVIRONMENT
    value: "Development"
nameOverride: ""
fullnameOverride: ""

service:
  type: ClusterIP
  port: 3000
  internalPort: 80

ingress:
  enabled: false
  annotations: 
    kubernetes.io/ingress.class: "nginx"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    certmanager.k8s.io/cluster-issuer: letsencrypt-production-issuer
    kubernetes.io/tls-acme: "true"
  paths: 
    - /auth
  hosts:
    - dev-apps.devsandbox.co
  tls:
    - secretName: apps-devsandbox-tls
      hosts:
        - dev-apps.devsandbox.co

virtualService:
  enabled: true
  gateways: 
    - istio-system/apps-devsandbox-gateway
  hosts: 
    - dev-apps.devsandbox.co
    - apps.devsandbox.co
  uriPrefixes:
    - /home
    - /Home
    - /callback
    - /Account
    - /account
    - /js
    - /lib
    - /css
    - /img
  uriExactMatches:
    - /

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "auth-microservice-auth0.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "auth-microservice-auth0.name" . }}
    helm.sh/chart: {{ include "auth-microservice-auth0.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app: {{ include "auth-microservice-auth0.name" . }}
    version: {{ .Values.image.tag }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "auth-microservice-auth0.name" . }}
      version: {{ .Values.image.tag }}
  template:
    metadata:
      labels:
        app: {{ include "auth-microservice-auth0.name" . }}
        version: {{ .Values.image.tag }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.image.imagePullSecrets }}      
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.env }}
          env:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.internalPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /Home/
              port: http
          readinessProbe:
            httpGet:
              path: /Home/
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $fullName := include "auth-microservice-auth0.fullname" . -}}
{{- $ingressPaths := .Values.ingress.paths -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ $fullName }}
  labels:
    app.kubernetes.io/name: {{ include "auth-microservice-auth0.name" . }}
    helm.sh/chart: {{ include "auth-microservice-auth0.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  {{- with .Values.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . | quote }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
    - host: {{ . | quote }}
      http:
        paths:
	{{- range $ingressPaths }}
          - path: {{ . }}
            backend:
              serviceName: {{ $fullName }}
              servicePort: http
	{{- end }}
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.virtualService.enabled -}}
{{- $fullName := include "auth-microservice-auth0.fullname" . -}}
{{- $port := .Values.service.port -}}
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ $fullName }}
  labels:
    app.kubernetes.io/name: {{ include "auth-microservice-auth0.name" . }}
    helm.sh/chart: {{ include "auth-microservice-auth0.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
{{- if .Values.virtualService.hosts }}
  hosts:
  {{- range .Values.virtualService.hosts }}
    - {{ . }}
  {{- end }}
{{- end }}
{{- if .Values.virtualService.gateways }}
  gateways:
  {{- range .Values.virtualService.gateways }}
    - {{ . }}
  {{- end }}
{{- end }}
  http:
  {{- range .Values.virtualService.uriPrefixes }}
  - match:
    - uri:
        prefix: {{ . | quote }}
    route:
    - destination:
        host: {{ $fullName }}
        port:
          number: {{ $port }}
    {{- end }}{{- range .Values.virtualService.uriExactMatches }}
  - match:
    - uri:
        exact: {{ . | quote }}
    route:
    - destination:
        host: {{ $fullName }}
        port:
          number: {{ $port }}
  {{- end }}

{{- end }}

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ include "auth-microservice-auth0.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "auth-microservice-auth0.name" . }}
    helm.sh/chart: {{ include "auth-microservice-auth0.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    appNamespace: {{ .Release.Namespace }}
    app: {{ include "auth-microservice-auth0.name" . }}
    version: {{ .Values.image.tag }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ include "auth-microservice-auth0.name" . }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "auth-microservice-auth0.fullname" . }}-test-connection"
  labels:
    app.kubernetes.io/name: {{ include "auth-microservice-auth0.name" . }}
    helm.sh/chart: {{ include "auth-microservice-auth0.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['{{ include "auth-microservice-auth0.fullname" . }}:{{ .Values.service.port }}']
  restartPolicy: Never


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.10


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
  - "0.12"
  - iojs
install: (cd nodejs && npm install)
script: 
  - (cd nodejs && npm test)
notifications:
  email:
    on_success: change
    on_failure: change


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

instrumentation:
  root: ..


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.11"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.8
  - 0.10


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
before_install: npm install npm -g
node_js:
  - "iojs"
  - "0.12"
  - "0.11"
  - "0.10"
  - "0.8"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

repo_token: SIAeZjKYlHK74rbcFvNHMUzjRiMpflxve


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false

language: node_js

node_js:
  - "4"
  - "6"
  - "8"

install:
  - make install

script:
  - make lint
  - make test

matrix:
  include:
  - node_js: '8'
    env: BROWSER=1


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"
  - "0.11"
  - "0.12"
  - "1.7.1"
  - 1
  - 2
  - 3
  - 4
  - 5


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.8.28
  - 0.10.36
  - 0.12.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.8
  - 0.9


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false

language: node_js

node_js:
  - 9
  - 8
  - 7
  - 6
  - 5
  - 4


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
  - "0.12"
  - "iojs"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
os:
 - linux
node_js:
  - "7.9"
  - "6.10"
  - "5.12"
  - "4.8"
  - "iojs-v3.3"
  - "iojs-v2.5"
  - "iojs-v1.8"
  - "0.12"
  - "0.10"
  - "0.8"
before_install:
  - 'if [ "${TRAVIS_NODE_VERSION}" = "0.6" ]; then npm install -g npm@1.3 ; elif [ "${TRAVIS_NODE_VERSION}" != "0.9" ]; then case "$(npm --version)" in 1.*) npm install -g npm@1.4.28 ;; 2.*) npm install -g npm@2 ;; esac ; fi'
  - 'if [ "${TRAVIS_NODE_VERSION}" != "0.6" ] && [ "${TRAVIS_NODE_VERSION}" != "0.9" ]; then npm install -g npm; fi'
install:
  - 'if [ "${TRAVIS_NODE_VERSION}" = "0.6" ]; then nvm install 0.8 && npm install -g npm@1.3 && npm install -g npm@1.4.28 && npm install -g npm@2 && npm install && nvm use "${TRAVIS_NODE_VERSION}"; else npm install; fi;'
script:
  - 'if [ -n "${PRETEST-}" ]; then npm run pretest ; fi'
  - 'if [ -n "${POSTTEST-}" ]; then npm run posttest ; fi'
  - 'if [ -n "${COVERAGE-}" ]; then npm run coverage ; fi'
  - 'if [ -n "${TEST-}" ]; then npm run tests-only ; fi'
sudo: false
env:
  - TEST=true
matrix:
  fast_finish: true
  include:
    - node_js: "node"
      env: PRETEST=true
    - node_js: "node"
      env: COVERAGE=true
    - node_js: "7.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.11"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.10"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.11"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.4"
      env: TEST=true ALLOW_FAILURE=true
    ##- node_js: "7"
      #env: TEST=true
      #os: osx
    #- node_js: "6"
      #env: TEST=true
      #os: osx
    #- node_js: "5"
      #env: TEST=true
      #os: osx
    #- node_js: "4"
      #env: TEST=true
      #os: osx
    #- node_js: "iojs"
      #env: TEST=true
      #os: osx
    #- node_js: "0.12"
      #env: TEST=true
      #os: osx
    #- node_js: "0.10"
      #env: TEST=true
      #os: osx
    #- node_js: "0.8"
      #env: TEST=true
      #os: osx
  allow_failures:
    - os: osx
    - env: TEST=true ALLOW_FAILURE=true


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.6
  - 0.8


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false # http://docs.travis-ci.com/user/workers/container-based-infrastructure/
language: node_js
node_js:
  - 0.12
  - v4
  - v5
  - v6

notifications:
  email:
    - medikoo+es6-symbol@medikoo.com


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

rules:
  no-console: 0
  no-empty: [2, allowEmptyCatch: true]


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# Test against this version of Node.js
environment:
  matrix:
    # node.js
    - nodejs_version: "0.10"
    - nodejs_version: "0.12"
    - nodejs_version: "4"
    - nodejs_version: "5"
    - nodejs_version: "6"

# Install scripts. (runs after repo cloning)
install:
  # Get the latest stable version of Node.js or io.js
  - ps: Install-Product node $env:nodejs_version
  # install modules
  - npm config set loglevel warn
  - npm install --silent

# Post-install test scripts.
test_script:
  # Output useful info for debugging.
  - node --version
  - npm --version
  # run tests
  - npm test

# Don't actually build.
build: off


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.11"
  - "0.10"
  - "0.8"
  - "0.6"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "4"
  - "6"
  - "8"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.6


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
os:
  - linux
node_js:
  - "0.10"
  - "0.12"
  - "4.1"
  - "node"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false

language: node_js

node_js:
  - "4"
  - "6"
  - "stable"

script:
  - npm test


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.11"
  - "0.10"
  - "0.12"
  - "iojs"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
before_install:
  - "npm install npm -g"
node_js:
  - "0.10"
  - "0.12"
  - "4"
  - "5"
  - "6" 
env:
  - TEST_SUITE=standard
  - TEST_SUITE=unit
script: "npm run-script $TEST_SUITE"



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.8
  - 0.10
  - 0.11


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.6


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - '6'
  - '5'
  - '4'
  - '0.12'
  - '0.10'


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.10


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
os:
 - linux
node_js:
  - "8"
  - "7"
  - "6"
  - "5"
  - "4"
  - "iojs-v3"
  - "iojs-v2"
  - "iojs-v1"
  - "0.12"
before_install:
  - 'nvm install-latest-npm'
install:
  - 'if [ "${TRAVIS_NODE_VERSION}" = "0.6" ] || [ "${TRAVIS_NODE_VERSION}" = "0.9" ]; then nvm install --latest-npm 0.8 && npm install && nvm use "${TRAVIS_NODE_VERSION}"; else npm install; fi;'
script:
  - 'if [ -n "${PRETEST-}" ]; then npm run pretest ; fi'
  - 'if [ -n "${POSTTEST-}" ]; then npm run posttest ; fi'
  - 'if [ -n "${COVERAGE-}" ]; then npm run coverage ; fi'
  - 'if [ -n "${TEST-}" ]; then npm run tests-only ; fi'
sudo: false
env:
  - TEST=true
matrix:
  fast_finish: true
  include:
    - node_js: "node"
      env: PRETEST=true
  allow_failures:
    - node_js: "7"
    - node_js: "5"
    - node_js: "iojs-v3"
    - node_js: "iojs-v2"
    - node_js: "iojs-v1"
    - node_js: "0.12"
    - env: TEST=true ALLOW_FAILURE=true
    - env: COVERAGE=true


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.10

sudo: false

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "node"




========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
  - "0.12"
  - "node"
env:
  - FORMDATA_VERSION=1.0.0
  - FORMDATA_VERSION=2.1.0
before_script:
  - 'if [ "$FORMDATA_VERSION" ]; then npm install form-data@^$FORMDATA_VERSION; fi'
before_install: if [[ `npm -v` < 3 ]]; then npm install -g npm@1.4.28; fi
script: npm run coverage

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
  - "0.12"
  - "iojs"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

extends: eslint:recommended
env:
  node: true
  browser: true
rules:
  block-scoped-var: 2
  callback-return: 2
  dot-notation: 2
  indent: 2
  linebreak-style: [2, unix]
  new-cap: 2
  no-console: [2, allow: [warn, error]]
  no-else-return: 2
  no-eq-null: 2
  no-fallthrough: 2
  no-invalid-this: 2
  no-return-assign: 2
  no-shadow: 1
  no-trailing-spaces: 2
  no-use-before-define: [2, nofunc]
  quotes: [2, single, avoid-escape]
  semi: [2, always]
  strict: [2, global]
  valid-jsdoc: [2, requireReturn: false]
  no-control-regex: 0
  no-useless-escape: 2


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "4"
  - "6"
  - "7"
  - "8"
after_script:
  - coveralls < coverage/lcov.info


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false # use faster docker infrastructure
language: node_js
node_js:
  - 0.12
  - 4
  - 6
  - 7

notifications:
  email:
    - medikoo+es6-weak-map@medikoo.com

script: "npm test && npm run lint"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
before_install:
  - "npm install npm -g"
node_js:
  - "0.12"
env:
  - TEST_SUITE=standard
  - TEST_SUITE=unit
script: "npm run-script $TEST_SUITE"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.8
  - "0.10"
branches:
  only:
    - master
notifications:
  email:
    - rod@vagg.org

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

version: 1.0.{build}
skip_branch_with_pr: true
build: off

environment:
  matrix:
    - nodejs_version: "7"
    - nodejs_version: "6"
    - nodejs_version: "5"
    - nodejs_version: "4"
    - nodejs_version: "3"
    - nodejs_version: "2"
    - nodejs_version: "1"
    - nodejs_version: "0.12"
    - nodejs_version: "0.10"
    - nodejs_version: "0.8"
    - nodejs_version: "0.6"
matrix:
  # fast_finish: true
  allow_failures:
    - nodejs_version: "0.6"

platform:
  - x86
  - x64

# Install scripts. (runs after repo cloning)
install:
 # Get the latest stable version of Node.js or io.js
 - ps: Install-Product node $env:nodejs_version $env:platform
 - IF %nodejs_version% EQU 0.6 npm -g install npm@1.3
 - IF %nodejs_version% EQU 0.8 npm -g install npm@2
 - set PATH=%APPDATA%\npm;%PATH%
 #- IF %nodejs_version% NEQ 0.6 AND %nodejs_version% NEQ 0.8 npm -g install npm
 # install modules
 - npm install

# Post-install test scripts.
test_script:
 # Output useful info for debugging.
 - node --version
 - npm --version
 # run tests
 - npm run tests-only


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
os:
 - linux
node_js:
  - "8.8"
  - "7.10"
  - "6.11"
  - "5.12"
  - "4.8"
  - "iojs-v3.3"
  - "iojs-v2.5"
  - "iojs-v1.8"
  - "0.12"
  - "0.10"
  - "0.8"
before_install:
  - 'nvm install-latest-npm'
install:
  - 'if [ "${TRAVIS_NODE_VERSION}" = "0.6" ] || [ "${TRAVIS_NODE_VERSION}" = "0.9" ]; then nvm install --latest-npm 0.8 && npm install && nvm use "${TRAVIS_NODE_VERSION}"; else npm install; fi;'
script:
  - 'if [ -n "${PRETEST-}" ]; then npm run pretest ; fi'
  - 'if [ -n "${POSTTEST-}" ]; then npm run posttest ; fi'
  - 'if [ -n "${COVERAGE-}" ]; then npm run coverage ; fi'
  - 'if [ -n "${TEST-}" ]; then npm run tests-only ; fi'
sudo: false
env:
  - TEST=true
matrix:
  fast_finish: true
  include:
    - node_js: "node"
      env: PRETEST=true
    - node_js: "8.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "8.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "8.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "8.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "8.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "8.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "8.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "8.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.10"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.11"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.10"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.11"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.4"
      env: TEST=true ALLOW_FAILURE=true
  allow_failures:
    - os: osx
    - env: TEST=true ALLOW_FAILURE=true


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
- '0.8'
- '0.10'
env:
  global:
  - secure: AdUubswCR68/eGD+WWjwTHgFbelwQGnNo81j1IOaUxKw+zgFPzSnFEEtDw7z98pWgg7p9DpCnyzzSnSllP40wq6AG19OwyUJjSLoZK57fp+r8zwTQwWiSqUgMu2YSMmKJPIO/aoSGpRQXT+L1nRrHoUJXgFodyIZgz40qzJeZjc=
  - secure: heQuxPVsQ7jBbssoVKimXDpqGjQFiucm6W5spoujmspjDG7oEcHD9ANo9++LoRPrsAmNx56SpMK5fNfVmYediw6SvhXm4Mxt56/fYCrLDBtgGG+1neCeffAi8z1rO8x48m77hcQ6YhbUL5R9uBimUjMX92fZcygAt8Rg804zjFo=


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ui: mocha-qunit
browsers:
  - name: chrome
    version: 27..latest
  - name: firefox
    version: latest
  - name: safari
    version: latest
  - name: ie
    version: 9..latest


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - '0.8'
  - '0.10'
  - '0.12'
  - 'iojs'
before_install:
  - npm install -g npm@latest


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
  - "0.12"
  - "4"
  - "6"
  - "8"
sudo: false
# use g++-4.8 for karma
cache:
  - apt
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.8
      - libstdc++-4.8-dev
  firefox: "39.0"
before_install:
  - export CXX="g++-4.8" CC="gcc-4.8"
  - export "PATH=./node_modules/.bin:$PATH"
install: npm install
# start X server for firefox
before_script:
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"
  - sleep 3 # give xvfb some time to start
script:
  - gulp lint
  - gulp dist
  - gulp test karma
after_success:
  - gulp coveralls



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.6
  - 0.8


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
  - "0.12"
  - "4.2"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
node_js:
  - "4"
  - "iojs"
  - "0.12"
  - "0.10"
script:
  - "npm run test-travis"
after_script:
  - "npm install coveralls@2 && cat coverage/lcov.info | coveralls"
matrix:
  fast_finish: true
notifications:
  irc:
    channels:
      - "irc.freenode.org#unshift"
    on_success: change
    on_failure: change


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
matrix:
  fast_finish: true
  include:
    - node_js: "0.10"
      env: TASK=test-node
    - node_js: "0.12"
      env: TASK=test-node
    - node_js: "iojs"
      env: TASK=test-node
    - node_js: "4"
      env: TASK=test-node
    - node_js: "4"
      env: TASK=test-browser
env:
  global:
    - secure: edovUXd/s/VAVXTor0CT1XcGqAtBwGgLYN1zYq0JcNiJUgWFiZ5VGKYbKVpb6nKlwm0Fdi1xmByguSa6xLZllcXjtDgfXrkI1cQYmoVncJ63JpXNG+UKyy43BwnF2OqgUrAAOt/ic1YJr9kBe+IaRwDUsMxxIkuJ6Z8c4diX0HE=
    - secure: IF01oyIKSs0C5dARdYRTilKnU1TG4zenjjEPClkQxAWIpUOxl9xcNJWDVEOPxJ/4pVt+pozyT80Rp7efh6ZiREJIQI1tUboBKSqZzSbnD5uViQNSbQ90PaDP0FIUc0IQ5o07W36rijBB0DTmtU1VofzN9PKkJO7XiSSXevI8RcM=
script:
  - "npm run ${TASK}"
after_script:
  - 'if [ "${TASK}" == "test-node" ]; then npm i coveralls@2 && cat coverage/lcov.info | coveralls; fi'
notifications:
  irc:
    channels:
      - "irc.freenode.org#unshift"
    on_success: change
    on_failure: change


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ui: mocha-bdd
browsers:
  - name: android
    version: [oldest, latest]
  - name: chrome
    version: [oldest, latest]
  - name: firefox
    version: [oldest, latest]
  - name: ie
    version: oldest..latest
  - name: iphone
    version: [oldest, latest]
  - name: opera
    version: oldest..latest
  - name: safari
    version: oldest..latest
  - name: microsoftedge
    version: oldest..latest
capabilities:
  record-screenshots: false
  record-video: false


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# Test against the latest version of this Node.js version
environment:
  matrix:
    # node.js
    - nodejs_version: "0.12"
    - nodejs_version: "4"
    - nodejs_version: "6"
    - nodejs_version: "8"

# Install scripts. (runs after repo cloning)
install:
  # Get the latest stable version of Node.js or io.js
  - ps: Install-Product node $env:nodejs_version
  # install modules
  - npm install

# Post-install test scripts.
test_script:
  # Output useful info for debugging.
  - node --version
  - npm --version
  # run tests
  - npm test

# Don't actually build.
build: off


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - '8'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

environment:
  matrix:
    - nodejs_version: '4'
    - nodejs_version: '6'
    - nodejs_version: '7'

install:
  - ps: Install-Product node $env:nodejs_version
  - npm i npminstall && node_modules\.bin\npminstall

test_script:
  - node --version
  - npm --version
  - npm run ci

build: off


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.8
  - 0.6
  - 0.10
  - 0.12
  - 4
  - 6


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
node_js:
  - "0.10"
  - "0.12"
  - "iojs"
script: npm run travis

before_install:
  - '[ "${TRAVIS_NODE_VERSION}" != "0.10" ] || npm install -g npm'

after_success: cat ./coverage/lcov.info | node_modules/.bin/coveralls --verbose && rm -rf ./coverage


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
node_js:
  - 6
  - 8

before_install:
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"

addons:
  firefox: "latest"

script:
  - npm run lint
  - npm test


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
    - 0.6
    - 0.8

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
  - "0.12"
  - 4
  - 6


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - stable
  - "0.12"
  - "0.11"
  - "0.10"
  - "0.9"
  - "0.8"
  - iojs
  - iojs-v1.0.4
install:
  - npm install


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 'node'
  - '5'
  - '4'
  - '0.12'
  - '0.10'


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 4
  - 5
  - 6
cache:
  yarn: true
  directories:
    - node_modules
after_success:
  - npm run coveralls


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.11"
  - "0.10"
  - "0.9"
  - "0.8"
  - "0.6"
  - "0.4"
before_install:
  - '[ "${TRAVIS_NODE_VERSION}" == "0.6" ] || npm install -g npm@1.4.6'
matrix:
  fast_finish: true
  allow_failures:
    - node_js: "0.11"
    - node_js: "0.9"
    - node_js: "0.6"
    - node_js: "0.4"



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
os:
 - linux
node_js:
  - "8.4"
  - "7.10"
  - "6.11"
  - "5.12"
  - "4.8"
  - "iojs-v3.3"
  - "iojs-v2.5"
  - "iojs-v1.8"
  - "0.12"
  - "0.10"
  - "0.8"
before_install:
  - 'if [ "${TRAVIS_NODE_VERSION}" = "0.6" ]; then npm install -g npm@1.3 ; elif [ "${TRAVIS_NODE_VERSION}" != "0.9" ]; then case "$(npm --version)" in 1.*) npm install -g npm@1.4.28 ;; 2.*) npm install -g npm@2 ;; esac ; fi'
  - 'if [ "${TRAVIS_NODE_VERSION}" != "0.6" ] && [ "${TRAVIS_NODE_VERSION}" != "0.9" ]; then if [ "${TRAVIS_NODE_VERSION%${TRAVIS_NODE_VERSION#[0-9]}}" = "0" ] || [ "${TRAVIS_NODE_VERSION:0:4}" = "iojs" ]; then npm install -g npm@4.5 ; else npm install -g npm; fi; fi'
install:
  - 'if [ "${TRAVIS_NODE_VERSION}" = "0.6" ]; then nvm install 0.8 && npm install -g npm@1.3 && npm install -g npm@1.4.28 && npm install -g npm@2 && npm install && nvm use "${TRAVIS_NODE_VERSION}"; else npm install; fi;'
script:
  - 'if [ -n "${PRETEST-}" ]; then npm run pretest ; fi'
  - 'if [ -n "${POSTTEST-}" ]; then npm run posttest ; fi'
  - 'if [ -n "${COVERAGE-}" ]; then npm run coverage ; fi'
  - 'if [ -n "${TEST-}" ]; then npm run tests-only ; fi'
sudo: false
env:
  - TEST=true
matrix:
  fast_finish: true
  include:
    - node_js: "node"
      env: PRETEST=true
    - node_js: "4"
      env: COVERAGE=true
    - node_js: "8.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "8.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "8.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "8.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.10"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.11"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.10"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.11"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.4"
      env: TEST=true ALLOW_FAILURE=true
  allow_failures:
    - os: osx
    - env: TEST=true ALLOW_FAILURE=true


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "6.4"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ui: tape
browsers:
  - name: chrome
    version: 39..latest
  - name: firefox
    version: 34..latest
  - name: safari
    version: 5..latest
  - name: microsoftedge
    version: 13..latest
  - name: ie
    version: 9..latest
  - name: opera
    version: 11..latest
  - name: iphone
    version: '8.1..latest'
  - name: android
    version: '4.4..latest'
server: ./test/server/index.js
scripts:
  - "/ie8-polyfill.js"
  - "/test-polyfill.js"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "5.10"
  - "4.4"
  - "4.1"
  - "0.12"
  - "0.10"
before_install:
  - "make check"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
node_js:
  - "8"
  - "6"
  - "4"
before_install: if [[ `npm --version` != 3* ]]; then npm install -g npm; fi;


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "4.1"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ui: tape
browsers:
  - name: chrome
    version: 39..latest
  - name: firefox
    version: 34..latest
  - name: safari
    version: 5..latest
  - name: ie
    version: 10..latest
  - name: opera
    version: 11..latest
  - name: iphone
    version: 5.1..latest
  - name: android
    version: 4.0..latest

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
- '6'
- '5'
- '4'
- '0.12'
- '0.10'


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "4.1"
  - "4.0"
  - "iojs-v3.3"
  - "iojs-v3.2"
  - "iojs-v3.1"
  - "iojs-v3.0"
  - "iojs-v2.5"
  - "iojs-v2.4"
  - "iojs-v2.3"
  - "iojs-v2.2"
  - "iojs-v2.1"
  - "iojs-v2.0"
  - "iojs-v1.8"
  - "iojs-v1.7"
  - "iojs-v1.6"
  - "iojs-v1.5"
  - "iojs-v1.4"
  - "iojs-v1.3"
  - "iojs-v1.2"
  - "iojs-v1.1"
  - "iojs-v1.0"
  - "0.12"
  - "0.11"
  - "0.10"
  - "0.9"
  - "0.8"
  - "0.6"
  - "0.4"
before_install:
  - '[ "${TRAVIS_NODE_VERSION}" = "0.6" ] || npm install -g npm@1.4.28 && npm install -g npm'
sudo: false
matrix:
  fast_finish: true
  allow_failures:
    - node_js: "4.0"
    - node_js: "iojs-v3.2"
    - node_js: "iojs-v3.1"
    - node_js: "iojs-v3.0"
    - node_js: "iojs-v2.4"
    - node_js: "iojs-v2.3"
    - node_js: "iojs-v2.2"
    - node_js: "iojs-v2.1"
    - node_js: "iojs-v2.0"
    - node_js: "iojs-v1.7"
    - node_js: "iojs-v1.6"
    - node_js: "iojs-v1.5"
    - node_js: "iojs-v1.4"
    - node_js: "iojs-v1.3"
    - node_js: "iojs-v1.2"
    - node_js: "iojs-v1.1"
    - node_js: "iojs-v1.0"
    - node_js: "0.11"
    - node_js: "0.9"
    - node_js: "0.8"
    - node_js: "0.6"
    - node_js: "0.4"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
os:
 - linux
node_js:
  - "7.9"
  - "6.10"
  - "5.12"
  - "4.8"
  - "iojs-v3.3"
  - "iojs-v2.5"
  - "iojs-v1.8"
  - "0.12"
  - "0.10"
  - "0.8"
before_install:
  - 'if [ "${TRAVIS_NODE_VERSION}" = "0.6" ]; then npm install -g npm@1.3 ; elif [ "${TRAVIS_NODE_VERSION}" != "0.9" ]; then case "$(npm --version)" in 1.*) npm install -g npm@1.4.28 ;; 2.*) npm install -g npm@2 ;; esac ; fi'
  - 'if [ "${TRAVIS_NODE_VERSION}" != "0.6" ] && [ "${TRAVIS_NODE_VERSION}" != "0.9" ]; then npm install -g npm; fi'
install:
  - 'if [ "${TRAVIS_NODE_VERSION}" = "0.6" ]; then nvm install 0.8 && npm install -g npm@1.3 && npm install -g npm@1.4.28 && npm install -g npm@2 && npm install && nvm use "${TRAVIS_NODE_VERSION}"; else npm install; fi;'
script:
  - 'if [ -n "${PRETEST-}" ]; then npm run pretest ; fi'
  - 'if [ -n "${POSTTEST-}" ]; then npm run posttest ; fi'
  - 'if [ -n "${COVERAGE-}" ]; then npm run coverage ; fi'
  - 'if [ -n "${TEST-}" ]; then npm run tests-only ; fi'
sudo: false
env:
  - TEST=true
matrix:
  fast_finish: true
  include:
    - node_js: "node"
      env: PRETEST=true
    - node_js: "node"
      env: POSTTEST=true
    - node_js: "4"
      env: COVERAGE=true
    - node_js: "7.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.11"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.10"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.11"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.4"
      env: TEST=true ALLOW_FAILURE=true
    ##- node_js: "7"
      #env: TEST=true
      #os: osx
    #- node_js: "6"
      #env: TEST=true
      #os: osx
    #- node_js: "5"
      #env: TEST=true
      #os: osx
    #- node_js: "4"
      #env: TEST=true
      #os: osx
    #- node_js: "iojs"
      #env: TEST=true
      #os: osx
    #- node_js: "0.12"
      #env: TEST=true
      #os: osx
    #- node_js: "0.10"
      #env: TEST=true
      #os: osx
    #- node_js: "0.8"
      #env: TEST=true
      #os: osx
  allow_failures:
    - os: osx
    - env: TEST=true ALLOW_FAILURE=true
    - env: COVERAGE=true


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

 sudo: false
 language: node_js
 node_js:
   - "0.10"
   - "0.11"
   - "0.12"
   - "iojs"
   - "4"
   - "6"
   - "8"
   - "node"


 env:
   - CXX=g++-4.8
 addons:
   apt:
     sources:
       - ubuntu-toolchain-r-test
     packages:
       - gcc-4.8
       - g++-4.8



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
  - "0.11"
  - "0.12"
  - iojs

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
  - '0.12'
  - 'iojs'


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: objective-c

env:
  global:
    - secure: "gve1nkeKkwFEG1VAT3i+JwYyAdF0gKXwKx0uxbkBTsmm2M+0MDusohQdFLoEIkSIFktXBIDefoa7iGpLKRfG2VsZLpwJgnvnD0HqbnuR+k+W+bu7BHt4CAaR6GTllsDCjyq9zNyhUThzSnf2WNIpOEF5kHspZlbGfawURuUJH/U="
    - secure: "jqVpmWxxBVXu2X8+XJMpKH0cooc2EKz9xKL2znBfYdNafJORSXcFAVbjCX5mZmVDcgIMwDtm2+gIG4P73hzJ2e3S+y2Z9ROJGyXHa3AxUTvXHQsxqzH8coHHqB8vTvfr0t2O5aKfpvpICpSea39r0hzNoMv6Ie5SwBdqj1YY9K0="
  matrix:
    - NODE_VERSION="v9"
    - NODE_VERSION="v8"
    - NODE_VERSION="v7"
    - NODE_VERSION="v6"
    - NODE_VERSION="v5"
    - NODE_VERSION="v4"
    - NODE_VERSION="v0.12"
    - NODE_VERSION="v0.10"

before_install:

  - echo $TRAVIS_OS_NAME

  # commit
  # ------------------------
  # The commit message is used to determine the whether to manually
  # invoke a binary publish

  - COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')

  # node
  # ------------------------

  - export PATH=./node_modules/.bin/:$PATH
  - rm -rf ~/.nvm && git clone --depth 1 https://github.com/creationix/nvm.git ~/.nvm
  - source ~/.nvm/nvm.sh
  - nvm install $NODE_VERSION
  - nvm use $NODE_VERSION
  - npm install -g npm@3
  - node --version
  - npm --version
  - nvm --version

  # publish dependencies
  # ------------------------

  - npm install node-gyp -g
  - npm install aws-sdk

install:

  # in the first instance we build from source to create the initial binary
  # which can then be used to create a package

  - npm install --build-from-source
  - npm test

before_script:

  # Detemine if a publish is required.
  #
  # a) we are building a tag
  # b) we put [publish binary] in the commit message

  - PUBLISH_BINARY=false

  - if [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` ]]; then PUBLISH_BINARY=true; fi;       # a
  - if test "${COMMIT_MESSAGE#*'[publish binary]'}" != "$COMMIT_MESSAGE"; then PUBLISH_BINARY=true; fi; # b

  # package & publish
  # ------------------------

  - if [[ $PUBLISH_BINARY == true ]]; then npm run node-pre-gyp package publish; fi;

  # clean-up
  # ------------------------

  - npm run node-pre-gyp clean
  - node-gyp clean

script:

  # validate
  # ------------------------
  # Post publishing a release verify that installing will pull down latest
  # binary from remote host

  - INSTALL_RESULT=0
  - if [[ $PUBLISH_BINARY == true ]]; then INSTALL_RESULT=$(npm install --fallback-to-build=false > /dev/null)$? || true; fi;

  - npm run node-pre-gyp clean

  # failure?
  # ------------------------
  # if install returned non zero (errored) then we first unpublish and then
  # call false so travis will bail at this line.

  - if [[ $INSTALL_RESULT != 0 ]]; then npm run node-pre-gyp unpublish; fi;
  - if [[ $INSTALL_RESULT != 0 ]]; then echo "returned $INSTALL_RESULT";false; fi;

after_success:

  # display all published binaries

 - npm run node-pre-gyp info


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.8
  - 0.10


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"
  - "0.11"
  - "0.12"
  - "1.7.1"
  - 1
  - 2
  - 3
  - 4
  - 5


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
os:
 - linux
node_js:
  - "7.9"
  - "6.10"
  - "5.12"
  - "4.8"
  - "iojs-v3.3"
  - "iojs-v2.5"
  - "iojs-v1.8"
  - "0.12"
  - "0.10"
  - "0.8"
before_install:
  - 'if [ "${TRAVIS_NODE_VERSION}" = "0.6" ]; then npm install -g npm@1.3 ; elif [ "${TRAVIS_NODE_VERSION}" != "0.9" ]; then case "$(npm --version)" in 1.*) npm install -g npm@1.4.28 ;; 2.*) npm install -g npm@2 ;; esac ; fi'
  - 'if [ "${TRAVIS_NODE_VERSION}" != "0.6" ] && [ "${TRAVIS_NODE_VERSION}" != "0.9" ]; then npm install -g npm; fi'
install:
  - 'if [ "${TRAVIS_NODE_VERSION}" = "0.6" ]; then nvm install 0.8 && npm install -g npm@1.3 && npm install -g npm@1.4.28 && npm install -g npm@2 && npm install && nvm use "${TRAVIS_NODE_VERSION}"; else npm install; fi;'
script:
  - 'if [ -n "${PRETEST-}" ]; then npm run pretest ; fi'
  - 'if [ -n "${POSTTEST-}" ]; then npm run posttest ; fi'
  - 'if [ -n "${COVERAGE-}" ]; then npm run coverage ; fi'
  - 'if [ -n "${TEST-}" ]; then npm run tests-only ; fi'
sudo: false
env:
  - TEST=true
matrix:
  fast_finish: true
  include:
    - node_js: "node"
      env: PRETEST=true
    - node_js: "node"
      env: COVERAGE=true
    - node_js: "7.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.11"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.10"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.11"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.4"
      env: TEST=true ALLOW_FAILURE=true
    ##- node_js: "7"
      #env: TEST=true
      #os: osx
    #- node_js: "6"
      #env: TEST=true
      #os: osx
    #- node_js: "5"
      #env: TEST=true
      #os: osx
    #- node_js: "4"
      #env: TEST=true
      #os: osx
    #- node_js: "iojs"
      #env: TEST=true
      #os: osx
    #- node_js: "0.12"
      #env: TEST=true
      #os: osx
    #- node_js: "0.10"
      #env: TEST=true
      #os: osx
    #- node_js: "0.8"
      #env: TEST=true
      #os: osx
  allow_failures:
    - os: osx
    - env: TEST=true ALLOW_FAILURE=true


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
  - "0.12"
  - "4.2"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 'node'
  - '5'
  - '4'
  - '0.12'
  - '0.10'


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "5.10"
  - "4.4"
  - "4.1"
  - "0.12"
  - "0.10"
before_install:
  - "make check"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
node_js:
  - stable
  - "0.10"
  - "0.8"
before_install: if [[ `npm --version` != 3* ]]; then npm install -g npm; fi;


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
language: node_js
node_js:
  - '0.8'
  - '0.10'
  - '0.12'
  - 'iojs'
before_install:
  - npm install -g npm@latest


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.4
  - 0.6


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.10
  - 4.0

sudo: false



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "6"
  - "4"
  - "0.10"
  - "0.12"
before_install:
  - "npm config set spin false"
  - "npm install -g npm/npm"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.4
  - 0.6


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.10
  - 4.0

sudo: false



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "5.10"
  - "4.4"
  - "4.1"
  - "0.12"
  - "0.10"
before_install:
  - "make check"
after_success:
  - '[ "${TRAVIS_NODE_VERSION}" = "4.4" ] && make codecovio'


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.10



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"
  - "0.11"
branches:
  only:
    - master
notifications:
  email:
    - rod@vagg.org
script: npm test


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
    - "0.12"
    - "4"
    - "6"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"
  - "0.12"
  - "iojs"
before_install:
  - npm install -g npm@~1.4.6


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.10
  - 0.11


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.10
  - 4.0

sudo: false


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

rules:
  no-console: 0
  no-empty: [2, allowEmptyCatch: true]


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.10



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
before_install:
  - npm install -g npm@2
  - npm install -g npm
notifications:
  email: false
matrix:
  fast_finish: true
  include:
  - node_js: '0.8'
    env: TASK=test
  - node_js: '0.10'
    env: TASK=test
  - node_js: '0.11'
    env: TASK=test
  - node_js: '0.12'
    env: TASK=test
  - node_js: 1
    env: TASK=test
  - node_js: 2
    env: TASK=test
  - node_js: 3
    env: TASK=test
  - node_js: 4
    env: TASK=test
  - node_js: 5
    env: TASK=test
  - node_js: 6
    env: TASK=test
  - node_js: 7
    env: TASK=test
  - node_js: 5
    env: TASK=browser BROWSER_NAME=ie BROWSER_VERSION="9..latest"
  - node_js: 5
    env: TASK=browser BROWSER_NAME=opera BROWSER_VERSION="11..latest"
  - node_js: 5
    env: TASK=browser BROWSER_NAME=chrome BROWSER_VERSION="-3..latest"
  - node_js: 5
    env: TASK=browser BROWSER_NAME=firefox BROWSER_VERSION="-3..latest"
  - node_js: 5
    env: TASK=browser BROWSER_NAME=safari BROWSER_VERSION="5..latest"
  - node_js: 5
    env: TASK=browser BROWSER_NAME=microsoftedge BROWSER_VERSION=latest
script: "npm run $TASK"
env:
  global:
  - secure: rE2Vvo7vnjabYNULNyLFxOyt98BoJexDqsiOnfiD6kLYYsiQGfr/sbZkPMOFm9qfQG7pjqx+zZWZjGSswhTt+626C0t/njXqug7Yps4c3dFblzGfreQHp7wNX5TFsvrxd6dAowVasMp61sJcRnB2w8cUzoe3RAYUDHyiHktwqMc=
  - secure: g9YINaKAdMatsJ28G9jCGbSaguXCyxSTy+pBO6Ch0Cf57ZLOTka3HqDj8p3nV28LUIHZ3ut5WO43CeYKwt4AUtLpBS3a0dndHdY6D83uY6b2qh5hXlrcbeQTq2cvw2y95F7hm4D1kwrgZ7ViqaKggRcEupAL69YbJnxeUDKWEdI=


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"
  - "0.12"
  - "iojs"
before_install:
  - npm install -g npm@~1.4.6


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

os: Visual Studio 2015

environment:
  matrix:
    - nodejs_version: 0.10
    - nodejs_version: 4
    - nodejs_version: 6
    - nodejs_version: 8
    - nodejs_version: 9

platform:
  - x64
  - x86

shallow_clone: true

install:
  - ps: Install-Product node $env:nodejs_version $env:Platform
  - ps: Set-ExecutionPolicy Unrestricted -Scope CurrentUser -Force
  - npm config get
  # upgrade node-gyp to dodge 2013 compile issue present in the node gyp bundled with node v0.10
  # https://github.com/nodejs/node-gyp/issues/972#issuecomment-231055109
  # but we upgrade using my fork since 3.x upstream will now break node v0.10.x support
  - IF "%nodejs_version:~0,1%"=="0" npm install https://github.com/springmeyer/node-gyp/tarball/v3.x
  # upgrade node-gyp to dodge https://github.com/mapbox/node-pre-gyp/issues/209#issuecomment-307641388
  # and allow make node 4.x x86 builds work
  # https://github.com/mapbox/node-pre-gyp/issues/209#issuecomment-217690537
  - IF "%nodejs_version:~0,1%"=="4" npm install node-gyp@3.x
  # downgrade npm to avoid multiple npm bugs:
  # for node v6 this dodges npm 3.10.10 bug whereby --nodedir/--dist-url is not passed to node-gyp (https://github.com/mapbox/node-pre-gyp/issues/300)
  # for all node x86 versions this dodges a mysterious ELIFECYCLE error: https://ci.appveyor.com/project/Mapbox/node-pre-gyp/build/1.0.582/job/b8q2nud6vkj0s6qo#L233
  # for node v8 this dodges https://github.com/mapbox/node-pre-gyp/issues/302
  - npm install npm@2.x -g
  - node --version
  - npm --version
  - node -e "console.log(process.arch);"
  - IF /I "%PLATFORM%" == "x64" set PATH=C:\Python27-x64;%PATH%
  - IF /I "%PLATFORM%" == "x86" SET PATH=C:\python27;%PATH%
  - IF /I "%PLATFORM%" == "x64" CALL "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" amd64
  - IF /I "%PLATFORM%" == "x86" CALL "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86
  - npm install
  - npm test

build: off
test: off
deploy: off


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
  - "0.8"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - '0.12'
  - '4'
  - '6'
  - '7'
before_install:
  - npm install -g npm@latest


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
  - "0.11"
branches:
  only:
    - master


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

repo_token: SIAeZjKYlHK74rbcFvNHMUzjRiMpflxve


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============


language: node_js
node_js:
  - "6"
  - "5"
  - "4"

install:
  - make node_modules

script:
  - make lint
  - make test
  - make coveralls


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.11"
  - "0.10"
  - "0.12"
  - "1"
  - "2"
  - "3"
  - "4"
sudo: false


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
node_js:
  - "4"
  - "iojs"
  - "0.12"
  - "0.10"
script:
  - "npm run test-travis"
after_script:
  - "npm install coveralls@2 && cat coverage/lcov.info | coveralls"
matrix:
  fast_finish: true
notifications:
  irc:
    channels:
      - "irc.freenode.org#unshift"
    on_success: change
    on_failure: change


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "node"
  - "6"
  - "5"
  - "4"
  - "4.4"
  - "4.3"
  - "4.2"
  - "4.1"
  - "4.0"
  - "iojs"
  - "0.12"
  - "0.11"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
language: node_js
node_js:
  - '0.8'
  - '0.10'
  - '0.12'
  - 'iojs'
before_install:
  - npm install -g npm@latest


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "5.3"
  - "5.2"
  - "5.1"
  - "5.0"
  - "4.2"
  - "4.1"
  - "4.0"
  - "iojs-v3.3"
  - "iojs-v3.2"
  - "iojs-v3.1"
  - "iojs-v3.0"
  - "iojs-v2.5"
  - "iojs-v2.4"
  - "iojs-v2.3"
  - "iojs-v2.2"
  - "iojs-v2.1"
  - "iojs-v2.0"
  - "iojs-v1.8"
  - "iojs-v1.7"
  - "iojs-v1.6"
  - "iojs-v1.5"
  - "iojs-v1.4"
  - "iojs-v1.3"
  - "iojs-v1.2"
  - "iojs-v1.1"
  - "iojs-v1.0"
  - "0.12"
  - "0.11"
  - "0.10"
  - "0.9"
  - "0.8"
  - "0.6"
  - "0.4"
before_install:
  - 'if [ "${TRAVIS_NODE_VERSION}" != "0.9" ]; then case "$(npm --version)" in 1.*) npm install -g npm@1.4.28 ;; 2.*) npm install -g npm@2 ;; esac ; fi'
  - 'if [ "${TRAVIS_NODE_VERSION}" != "0.6" ] && [ "${TRAVIS_NODE_VERSION}" != "0.9" ]; then npm install -g npm; fi'
script:
  - 'if [ "${TRAVIS_NODE_VERSION}" != "4.2" ]; then npm run tests-only ; else npm test ; fi'
sudo: false
matrix:
  fast_finish: true
  allow_failures:
    - node_js: "5.2"
    - node_js: "5.1"
    - node_js: "5.0"
    - node_js: "4.1"
    - node_js: "4.0"
    - node_js: "iojs-v3.2"
    - node_js: "iojs-v3.1"
    - node_js: "iojs-v3.0"
    - node_js: "iojs-v2.4"
    - node_js: "iojs-v2.3"
    - node_js: "iojs-v2.2"
    - node_js: "iojs-v2.1"
    - node_js: "iojs-v2.0"
    - node_js: "iojs-v1.7"
    - node_js: "iojs-v1.6"
    - node_js: "iojs-v1.5"
    - node_js: "iojs-v1.4"
    - node_js: "iojs-v1.3"
    - node_js: "iojs-v1.2"
    - node_js: "iojs-v1.1"
    - node_js: "iojs-v1.0"
    - node_js: "0.11"
    - node_js: "0.9"
    - node_js: "0.8"
    - node_js: "0.6"
    - node_js: "0.4"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
os:
 - linux
node_js:
  - "9.2"
  - "8.9"
  - "7.10"
  - "6.12"
  - "5.12"
  - "4.8"
  - "iojs-v3.3"
  - "iojs-v2.5"
  - "iojs-v1.8"
  - "0.12"
  - "0.10"
  - "0.8"
  - "0.6"
before_install:
  - 'nvm install-latest-npm'
install:
  - 'if [ "${TRAVIS_NODE_VERSION}" = "0.6" ] || [ "${TRAVIS_NODE_VERSION}" = "0.9" ]; then nvm install --latest-npm 0.8 && npm install && nvm use "${TRAVIS_NODE_VERSION}"; else npm install; fi;'
script:
  - 'if [ -n "${PRETEST-}" ]; then npm run pretest ; fi'
  - 'if [ -n "${POSTTEST-}" ]; then npm run posttest ; fi'
  - 'if [ -n "${COVERAGE-}" ]; then npm run coverage && bash <(curl -s https://codecov.io/bash) -f coverage/*.json; fi'
  - 'if [ -n "${TEST-}" ]; then npm run tests-only ; fi'
sudo: false
env:
  - TEST=true
matrix:
  fast_finish: true
  include:
    - node_js: "lts/*"
      env: PRETEST=true
    - node_js: "lts/*"
      env: POSTTEST=true
    - node_js: "0.8"
      env: COVERAGE=true
    - node_js: "0.12"
      env: COVERAGE=true
    - node_js: "4"
      env: COVERAGE=true
    - node_js: "8"
      env: COVERAGE=true
    - node_js: "9.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "9.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "8.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "8.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "8.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "8.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "8.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "8.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "8.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "8.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "8.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.11"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.10"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.11"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.10"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.11"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.4"
      env: TEST=true ALLOW_FAILURE=true
  allow_failures:
    - os: osx
    - env: TEST=true ALLOW_FAILURE=true
    - node_js: "9.2"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.6
  - 0.8


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "iojs"
branches:
  only:
    - master


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
sudo: false
node_js:
  - "0.10"
  - 0.12
  - iojs
  - 4
  - 5
env:
  - CXX=g++-4.8
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.8
notifications:
  email:
    - andris@kreata.ee
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/0ed18fd9b3e529b3c2cc
    on_success: change  # options: [always|never|change] default: always
    on_failure: always  # options: [always|never|change] default: always
    on_start: false     # default: false


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

theme: jekyll-theme-minimal

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
script: "npm run-script ci"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

extends: eslint:recommended
env:
  node: true
  browser: true
rules:
  block-scoped-var: 2
  complexity: [2, 13]
  curly: [2, multi-or-nest, consistent]
  dot-location: [2, property]
  dot-notation: 2
  indent: [2, 2, SwitchCase: 1]
  linebreak-style: [2, unix]
  new-cap: 2
  no-console: [2, allow: [warn, error]]
  no-else-return: 2
  no-eq-null: 2
  no-fallthrough: 2
  no-invalid-this: 2
  no-return-assign: 2
  no-shadow: 1
  no-trailing-spaces: 2
  no-use-before-define: [2, nofunc]
  quotes: [2, single, avoid-escape]
  semi: [2, always]
  strict: [2, global]
  valid-jsdoc: [2, requireReturn: false]
  no-control-regex: 0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "4"
  - "6"
  - "7"
  - "8"
after_script:
  - coveralls < coverage/lcov.info


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

parserOptions:
  ecmaVersion: 6
globals:
  beforeEach: false
  describe: false
  it: false


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"
  - "0.12"
  - "iojs"
before_install:
  - npm install -g npm@~1.4.6


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false

language: node_js

node_js:
  - "0.10"
  - "0.12"
  - "4"
  - "6"
  - "stable"

script:
  - npm run lint
  - npm test
  - npm run coverage


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - "0.10"
  - "0.11"

matrix:
  allow_failures:
    - node_js: 0.11


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
before_install:
  - npm install -g npm@2
  - npm install -g npm
matrix:
  include:
  - node_js: '0.8'
    env: TASK=test-node
  - node_js: '0.10'
    env: TASK=test-node
  - node_js: '0.11'
    env: TASK=test-node
  - node_js: '0.12'
    env: TASK=test-node
  - node_js: 1
    env: TASK=test-node
  - node_js: 2
    env: TASK=test-node
  - node_js: 3
    env: TASK=test-node
  - node_js: 4
    env: TASK=test-node
  - node_js: 5
    env: TASK=test-node
  - node_js: '0.10'
    env: TASK=test-browser
script: "npm run $TASK"
env:
  global:
  - secure: qThuKBZQtkooAvzaYldECGNqvKGPRTnXx62IVyhSbFlsCY1VCmjhLldhyPDiZQ3JqL1XvSkK8OMDupiHqZnNE0nGijoO4M/kaEdjBB+jpjg3f8I6te2SNU935SbkfY9KHAaFXMZwdcq7Fk932AxWEu+FMSDM+080wNKpEATXDe4=
  - secure: O/scKjHLRcPN5ILV5qsSkksQ7qcZQdHWEUUPItmj/4+vmCc28bHpicoUxXG5A96iHvkBbdmky/nGCg464ZaNLk68m6hfEMDAR3J6mhM2Pf5C4QI/LlFlR1fob9sQ8lztwSGOItwdK8Rfrgb30RRVV71f6FxnaJ6PKMuMNT5S1AQ=


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ui: mocha-qunit
tunnel: ngrok
browsers:
  - name: chrome
    version: latest
  - name: firefox
    version: latest
  - name: safari
    version: latest
  - name: ie
    version: 9..latest
  - name: microsoftedge
    version: latest


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false # http://docs.travis-ci.com/user/workers/container-based-infrastructure/
language: node_js
node_js:
  - 0.12
  - 4
  - 6
  - 7

before_install:
  - mkdir node_modules; ln -s ../ node_modules/event-emitter

notifications:
  email:
    - medikoo+event-emitter@medikoo.com

script: "npm test && npm run lint"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.6
  - 0.8
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
node_js:
  - "0.10"
before_deploy:
  - npm-prepublish --verbose
deploy:
  provider: npm
  email: matt@mattandre.ws
  api_key:
    secure: eEeb1aG7phF4X5z+CQ3yzTdXtHf71Dk4ec6v5iAjRYNh/s6GLxfZS7c4qocZI8YXW3YmmsJR5zGZ2l88k2iqTtlBn0Mrp6ytwIa/jO00kDpR8V11eW9i47KRQq25eA1YW+SrLM5V/fh+s9u3VU7jhbax5eeViqVdwORI85kZrZE=
  on:
    all_branches: true
    tags: true
    repo: matthew-andrews/isomorphic-fetch


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "4"
  - "6"
  - "node"
script: npm run travis

before_install:
  - '[ "${TRAVIS_NODE_VERSION}" != "0.10" ] || npm install -g npm'


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
env:
  global:
  - secure: OgPRLCzHFh5WbjHEKlghHFW1oOreSF2JVUr3CMaFDi03ngTS2WONSw8mRn8SA6FTldiGGBx1n8orDzUw6cdkB7+tkU3G5B0M0V3vl823NaUFKgxsCM3UGDYfJb3yfAG5cj72rVZoX/ABd1fVuG4vBIlDLxsSlKQFMzUCFoyttr8=
  - secure: AiZP8GHbyx83ZBhOvOxxtpNcgNHoP+vo5G1a1OYU78EHCgHg8NRyHKyCdrBnPvw6mV2BI/8frZaXAEicsHMtHMofBYn7nibNlaajBPI8AkHtYfNSc+zO+71Kwv7VOTOKKnkMEIkqhHlc6njFoH3QaBNHsgNlzzplPxaIt8vdUVk=


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ui: mocha-tdd
browsers:
  - name: chrome
    version: latest
  - name: firefox
    version: 24..latest
  - name: safari
    version: latest
  - name: ie
    version: 9..latest
  - name: iphone
    version: oldest..latest
  - name: ipad
    version: oldest..latest
  - name: android
    version: oldest..latest


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
matrix:
  include:
    - node_js: '0.11'
      env: TEST_SUITE=unit
    - node_js: '0.12'
      env: TEST_SUITE=unit
    - node_js: '4'
      env: TEST_SUITE=unit
    - node_js: '4'
      env: TEST_SUITE=standard
    - node_js: '4'
      env: TEST_SUITE=browser BROWSER_NAME=ie BROWSER_VERSION="10..latest"
    - node_js: '4'
      env: TEST_SUITE=browser BROWSER_NAME=chrome BROWSER_VERSION="-2..beta"
    - node_js: '4'
      env: TEST_SUITE=browser BROWSER_NAME=firefox BROWSER_VERSION="-2..latest"
    - node_js: '4'
      env: TEST_SUITE=browser BROWSER_NAME=safari BROWSER_VERSION="7..latest"
    - node_js: '4'
      env: TEST_SUITE=browser BROWSER_NAME=android BROWSER_VERSION="5.0..latest"
script: "npm run-script $TEST_SUITE"
env:
  global:
  - secure: YHNUDQmx/WiW3gmDcRCfb6KLDeio7Mr5tqPY2kHPdZlBSytsQjNk75ytM4U6Cu8Uk8iEIoj/aFlxiVMpJNA8J4QSUyW/YkbVaIz0+1oywoV0Ht8aRBfZ1jvXfX6789+1Q9c4xaMkYYbJpXSh9JcirsiwmqWd4+IDd7hcESodsDQ=
  - secure: Nhj5yejKZxUbtHGZta+GjYWqXGaOZB7ainTkOuGcpXM+OwwjeDpYlTBrwS90Q7hqens7KXVzQM09aDbadpsDCsOo1nyaEigMtomAorZ1UC1CpEoVz1ZuikF9bEhb+/7M9pzuL1fX+Ke9Dx4mPPeb8sf/2SrAu1RqXkSwZV/duAc=


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ui: tape


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
  - "0.12"
  - "4.4"
  - "6.2"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
node_js:
  - 'iojs'
  - '0.12'
  - '0.10'
  - '0.8'
before_install:
  - npm install -g npm


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
- '5'
- '4'
- '0.12'
- '0.10'
- '0.8'
before_install:
- 'if [ "${TRAVIS_NODE_VERSION}" == "0.8" ]; then npm install -g npm@2.12.1; fi'


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# replace default config

# multipass: true
# full: true

plugins:

  # - name
  #
  # or:
  # - name: false
  # - name: true
  #
  # or:
  # - name:
  #     param1: 1
  #     param2: 2

  - removeDoctype
  - removeXMLProcInst
  - removeComments
  - removeMetadata
  - removeXMLNS
  - removeEditorsNSData
  - cleanupAttrs
  - minifyStyles
  - convertStyleToAttrs
  - cleanupIDs
  - removeRasterImages
  - removeUselessDefs
  - cleanupNumericValues
  - cleanupListOfValues
  - convertColors
  - removeUnknownsAndDefaults
  - removeNonInheritableGroupAttrs
  - removeUselessStrokeAndFill
  - removeViewBox
  - cleanupEnableBackground
  - removeHiddenElems
  - removeEmptyText
  - convertShapeToPath
  - moveElemsAttrsToGroup
  - moveGroupAttrsToElems
  - collapseGroups
  - convertPathData
  - convertTransform
  - removeEmptyAttrs
  - removeEmptyContainers
  - mergePaths
  - removeUnusedNS
  - transformsWithOnePath
  - sortAttrs
  - removeTitle
  - removeDesc
  - removeDimensions
  - removeAttrs
  - removeElementsByAttr
  - addClassesToSVGElement
  - removeStyleElement
  - addAttributesToSVGElement

# configure the indent (default 4 spaces) used by `--pretty` here:
#
# @see https://github.com/svg/svgo/blob/master/lib/svgo/js2svg.js#L6 for more config options
#
# js2svg:
#  pretty: true
#  indent: '  '


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
language: node_js
node_js:
  - '0.8'
  - '0.10'
  - '0.12'
  - 'iojs'
before_install:
  - npm install -g npm@latest


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.12"
  - "0.11"
  - "0.10"
  - "0.10.12"
  - "0.8"
  - "0.6"
  - "iojs"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false # http://docs.travis-ci.com/user/workers/container-based-infrastructure/
language: node_js
node_js:
  - 0.12
  - 4
  - 6
  - 7

notifications:
  email:
    - medikoo+es6-set@medikoo.com

script: "npm test && npm run lint"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
- 'node'
env:
  global:
  - secure: f3NrmOV/A7oACn47J1mkIpH8Sn/LINtluZvo/9pGo3Ss4+D2lyt7UawpedHtnYgU9WEyjPSi7pDWopUrIzusQ2trLYRJr8WAOEyHlgaepDyy4BW3ghGMKHMsS05kilYLP8nu1sRd6y1AcUYKw+kUrrSPanI7kViWVQ5d5DuwXO8=
  - secure: a6teILh33z5fbGQbh5/EkFfAyXfa2fPJG1upy9K+jLAbG4WZxXD+YmXG9Tz33/2NJm6UplGfTJ8IQEXgxEfAFk3ao3xfKxzm3i64XxtroSlXIFNSiQKogxDfLEtWDoNNCodPHaV3ATEqxGJ5rkkUeU1+ROWW0sjG5JR26k8/Hfg=


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ui: tape
scripts:
  - "./test/_polyfill.js"
browsers:
  - name: chrome
    version: latest
  - name: firefox
    version: latest
  - name: safari
    version: latest
  - name: ie
    version: 11
  - name: microsoftedge
    version: latest
  - name: opera
    version: latest
  - name: android
    version: latest
  - name: iphone
    version: latest


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.4
  - 0.6


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false

language: node_js

node_js:
  - "0.10"
  - "0.12"
  - "4"
  - "6"
  - "stable"

script:
  - npm run lint
  - npm test
  - npm run coverage


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "4.2"
  - "4.1"
  - "4.0"
  - "iojs-v3.3"
  - "iojs-v3.2"
  - "iojs-v3.1"
  - "iojs-v3.0"
  - "iojs-v2.5"
  - "iojs-v2.4"
  - "iojs-v2.3"
  - "iojs-v2.2"
  - "iojs-v2.1"
  - "iojs-v2.0"
  - "iojs-v1.8"
  - "iojs-v1.7"
  - "iojs-v1.6"
  - "iojs-v1.5"
  - "iojs-v1.4"
  - "iojs-v1.3"
  - "iojs-v1.2"
  - "iojs-v1.1"
  - "iojs-v1.0"
  - "0.12"
  - "0.11"
  - "0.10"
  - "0.9"
  - "0.8"
  - "0.6"
  - "0.4"
before_install:
  - '[ "${TRAVIS_NODE_VERSION}" = "0.6" ] || npm install -g npm@1.4.28 && npm install -g npm'
sudo: false
matrix:
  fast_finish: true
  allow_failures:
    - node_js: "4.1"
    - node_js: "4.0"
    - node_js: "iojs-v3.2"
    - node_js: "iojs-v3.1"
    - node_js: "iojs-v3.0"
    - node_js: "iojs-v2.4"
    - node_js: "iojs-v2.3"
    - node_js: "iojs-v2.2"
    - node_js: "iojs-v2.1"
    - node_js: "iojs-v2.0"
    - node_js: "iojs-v1.7"
    - node_js: "iojs-v1.6"
    - node_js: "iojs-v1.5"
    - node_js: "iojs-v1.4"
    - node_js: "iojs-v1.3"
    - node_js: "iojs-v1.2"
    - node_js: "iojs-v1.1"
    - node_js: "iojs-v1.0"
    - node_js: "0.11"
    - node_js: "0.9"
    - node_js: "0.8"
    - node_js: "0.6"
    - node_js: "0.4"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
- '0.10'
after_success:
- npm run jsdoc
- cat artifacts/coverage/lcov.info | node_modules/coveralls/bin/coveralls.js
notifications:
  slack:
    secure: k4kpAZcA1Mu7LHs58m4JkMbGtpWPI8BPYqmqKVfHBE21daaqRYgpHOiLyWiFhv83xkiOWWfDAS2svvS2h2jDmaRzieVBlonQlhGgDEu123Mobvi8nUxeu6bNxoFSRwKXVx8uTCGKmzwqWz870Y6d7+TUQnMhhdl0GRB2tqAhY0A=
deploy:
- provider: s3
  access_key_id:
    secure: IQXPBnuNyREtmNN+W9bONLok5lFO9+JzQ3n5nK/uRHTuYDgS4ZbKJwaJ1dRNS6Zb8qAgVyIq8FBVa4olbvH6sfxGwVluwY0ujskvgA5hOMEpyjJ5zQx5+boWDTz9wNdMUe4ImygJjcpTjn33wMu9arFLMyIQdKysrlfU1HlRWB0=
  secret_access_key:
    secure: lIFQHzB5Sfzi0BmYM/b8PzEtdwOUQjtTPBGdTjX09b7OFVsb3M4FROaAsaTMrbZ+L6TyLD9fDBJMPHW7xZTnrZG1zcKIjZITT25Ec/2YQ9CCdAdbr+NobKrjaJ6dIcF2NKcUaRQQvRE9E8uC/KVveWGEC7ITtv0yssuADNSdcOU=
  bucket: tsertkov-artifacts
  local-dir: artifacts
  upload-dir: exec-sh/master
  acl: public_read
  skip_cleanup: true
  region: eu-central-1
  endpoint: s3.eu-central-1.amazonaws.com
  on:
    branch: master
- provider: s3
  access_key_id:
    secure: IQXPBnuNyREtmNN+W9bONLok5lFO9+JzQ3n5nK/uRHTuYDgS4ZbKJwaJ1dRNS6Zb8qAgVyIq8FBVa4olbvH6sfxGwVluwY0ujskvgA5hOMEpyjJ5zQx5+boWDTz9wNdMUe4ImygJjcpTjn33wMu9arFLMyIQdKysrlfU1HlRWB0=
  secret_access_key:
    secure: lIFQHzB5Sfzi0BmYM/b8PzEtdwOUQjtTPBGdTjX09b7OFVsb3M4FROaAsaTMrbZ+L6TyLD9fDBJMPHW7xZTnrZG1zcKIjZITT25Ec/2YQ9CCdAdbr+NobKrjaJ6dIcF2NKcUaRQQvRE9E8uC/KVveWGEC7ITtv0yssuADNSdcOU=
  bucket: tsertkov-artifacts
  local-dir: artifacts
  upload-dir: exec-sh/develop
  acl: public_read
  skip_cleanup: true
  region: eu-central-1
  endpoint: s3.eu-central-1.amazonaws.com
  on:
    branch: develop


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.10
  - 4.0

sudo: false



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "6"
  - "4"
  - "0.10"
  - "0.12"
before_install:
  - "npm config set spin false"
  - "npm install -g npm/npm"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

repo_token: SIAeZjKYlHK74rbcFvNHMUzjRiMpflxve


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false

language: node_js

node_js:
  - "4"
  - "6"
  - "8"

install:
  - make install

script:
  - make lint
  - make test

matrix:
  include:
  - node_js: '8'
    env: BROWSER=1


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# Test against these versions of Node.js
environment:
  matrix:
    - nodejs_version: "4"
    - nodejs_version: "5"

platform:
  - x64

# Install scripts (runs after repo cloning)
install:
  # Get the latest stable version of Node.js
  - ps: Install-Product node $env:nodejs_version $env:platform
  # Clone submodules (mustache spec)
  - cmd: git submodule update --init --recursive
  # Install modules
  - cmd: npm install
  - cmd: npm install -g grunt-cli


# Post-install test scripts
test_script:
  # Output useful info for debugging
  - cmd: node --version
  - cmd: npm --version
  # Run tests
  - cmd: grunt --stack travis

# Don't actually build
build: off

on_failure:
  - cmd: 7z a coverage.zip coverage
  - cmd: appveyor PushArtifact coverage.zip


# Set build version format here instead of in the admin panel
version: "{build}"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

instrumentation:
    excludes: ['**/spec/**', '**/handlebars/compiler/parser.js']


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - "0.10"
  - "0.11"
  - "0.12"
  - "iojs"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.10

sudo: false

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
sudo: false
node_js:
  - '0.12'
  - '4'
  - '5'
  - '6'


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
node_js:
  - "0.12"
  - "iojs"
env:
  - TEST_SUITE=standard
  - TEST_SUITE=unit
script: "npm run-script $TEST_SUITE"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.8
  - 0.9


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - '0.10'
  - '0.11'
  - '0.12'
  - 'iojs-1'
  - 'iojs-2'
  - 'iojs-3'
  - '4.0'
after_script:
  - npm run coveralls


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
node_js:
  - "4"
  - "5"
  - "6"
  - "7"
  - "8"
matrix:
  include:
    - node_js: "7"
      env: TEST_SUITE=standard
env:
  - TEST_SUITE=unit
script: npm run-script $TEST_SUITE


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.6
  - 0.8


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false

language: node_js

node_js:
  - "4"
  - "6"
  - "stable"

script:
  - npm test


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.4
  - 0.6


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
matrix:
  include:
    - node_js: '7'
      env: TEST_SUITE=test
    - node_js: '6'
      env: TEST_SUITE=test
    - node_js: '5'
      env: TEST_SUITE=test
    - node_js: '4'
      env: TEST_SUITE=test
    - node_js: '4'
      env: TEST_SUITE=phantom
script: "npm run-script $TEST_SUITE"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ui: tape


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "5"
  - "4"
  - "0.12"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

instrumentation:
  excludes:
    - test.js
    - test/**/*


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

script:
  - node_modules/.bin/istanbul cover node_modules/.bin/_mocha -- --compilers coffee:coffee-script/register
  - cat coverage/lcov.info | node_modules/.bin/coveralls
node_js:
  - "0.10"
  - "0.11"
  - "0.12"
  - "iojs"
os:
  - linux
  - osx

notifications:
  slack:
    secure: oOt8QGzdrPDsTMcyahtIq5Q+0U1iwfgJgFCxBLsomQ0bpIMn+y5m4viJydA2UinHPGc944HS3LMZS9iKQyv+DjTgbhUyNXqeVjtxCwRe37f5rKQlXVvdfmjHk2kln4H8DcK3r5Qd/+2hd9BeMsp2GImTrkRSud1CZQlhhe5IgZOboSoWpGVMMy1iazWT06tAtiB2LRVhmsdUaFZDWAhGZ+UAvCPf+mnBOAylIj+U0GDrofhfTi25RK0gddG2f/p2M1HCu49O6wECGWkt2hVei233DkNJyLLLJVcvmhf+aXkV5TjMyaoxh/HdcV4DrA7KvYuWmWWKsINa9hlwAsdd/FYmJ6PjRkKWas2JoQ1C+qOzDxyQvn3CaUZFKD99pdsq0rBBZujqXQKZZ/hWb/CE74BI6fKmqQkiEPaD/7uADj04FEg6HVBZaMCyauOaK5b3VC97twbALZ1qVxYV6mU+zSEvnUbpnjjvRO0fSl9ZHA+rzkW73kX3GmHY0wAozEZbSy7QLuZlQ2QtHmBLr+APaGMdL1sFF9qFfzqKy0WDbSE0WS6hpAEJpTsjYmeBrnI8UmK3m++iEgyQPvZoH9LhUT+ek7XIfHZMe04BmC6wuO24/RfpmR6bQK9VMarFCYlBiWxg/z30vkP0KTpUi3o/cqFm7/Noxc0i2LVqM3E0Sy4=


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.10
  - 4.0

sudo: false



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.10
  - 4.0

sudo: false


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "5.10"
  - "4.4"
  - "4.1"
  - "0.12"
  - "0.10"
before_install:
  - "make check"
after_success:
  - '[ "${TRAVIS_NODE_VERSION}" = "4.4" ] && make codecovio'


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
    - stable
    - "0.10"

notifications:
  email: false

cache:
    directories:
        - node_modules

sudo: false


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
  - "0.8"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - "0.10"
  - "0.11"
  - "0.12"
  - "4.0"
  - "4.1"
  - "4.2"
  - "5"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
os:
 - linux
node_js:
  - "7.5"
  - "6.9"
  - "5.12"
  - "4.7"
  - "iojs-v3.3"
  - "iojs-v2.5"
  - "iojs-v1.8"
  - "0.12"
  - "0.10"
  - "0.8"
before_install:
  - 'if [ "${TRAVIS_NODE_VERSION}" = "0.6" ]; then npm install -g npm@1.3 ; elif [ "${TRAVIS_NODE_VERSION}" != "0.9" ]; then case "$(npm --version)" in 1.*) npm install -g npm@1.4.28 ;; 2.*) npm install -g npm@2 ;; esac ; fi'
  - 'if [ "${TRAVIS_NODE_VERSION}" != "0.6" ] && [ "${TRAVIS_NODE_VERSION}" != "0.9" ]; then npm install -g npm; fi'
script:
  - 'if [ -n "${PRETEST-}" ]; then npm run pretest ; fi'
  - 'if [ -n "${POSTTEST-}" ]; then npm run posttest ; fi'
  - 'if [ -n "${COVERAGE-}" ]; then npm run coverage ; fi'
  - 'if [ -n "${TEST-}" ]; then npm run tests-only ; fi'
sudo: false
env:
  - TEST=true
matrix:
  fast_finish: true
  include:
    - node_js: "node"
      env: PRETEST=true
    - node_js: "node"
      env: POSTTEST=true
    - node_js: "7.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.11"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.10"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.11"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7"
      env: TEST=true
      os: osx
    - node_js: "6"
      env: TEST=true
      os: osx
    - node_js: "5"
      env: TEST=true
      os: osx
    - node_js: "4"
      env: TEST=true
      os: osx
    - node_js: "iojs"
      env: TEST=true
      os: osx
    - node_js: "0.12"
      env: TEST=true
      os: osx
    - node_js: "0.10"
      env: TEST=true
      os: osx
    - node_js: "0.8"
      env: TEST=true
      os: osx
  allow_failures:
    - os: osx
    - env: TEST=true ALLOW_FAILURE=true


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

repo_token: SIAeZjKYlHK74rbcFvNHMUzjRiMpflxve


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false

language: node_js

node_js:
  - "4"
  - "6"
  - "8"

install:
  - make install

script:
  - make lint
  - make test

matrix:
  include:
  - node_js: '8'
    env: BROWSER=1


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

rules:
    internal-no-invalid-meta: "error"
    internal-consistent-docs-description: "error"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
os:
- linux
- osx
node_js:
- '6'
- '5'
- '4'
- '0.12'
- '0.10'


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
os:
  - linux
language: node_js
node_js:
  - "4"
  - "5"
  - "6"
  - "7"
env:
  matrix:
    - TEST_SUITE=unit
matrix:
  include:
    - node_js: "7"
      env: TEST_SUITE=lint
script: npm run $TEST_SUITE


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.10



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.10
  - 4.0

sudo: false


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false # http://docs.travis-ci.com/user/workers/container-based-infrastructure/
language: node_js
node_js:
  - 0.12
  - 4
  - 6
  - 7

notifications:
  email:
    - medikoo+es6-map@medikoo.com

script: "npm test && npm run lint"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "6.2"
  - "6.1"
  - "6.0"
  - "5.11"
  - "5.10"
  - "5.9"
  - "5.8"
  - "5.7"
  - "5.6"
  - "5.5"
  - "5.4"
  - "5.3"
  - "5.2"
  - "5.1"
  - "5.0"
  - "4.4"
  - "4.3"
  - "4.2"
  - "4.1"
  - "4.0"
  - "iojs-v3.3"
  - "iojs-v3.2"
  - "iojs-v3.1"
  - "iojs-v3.0"
  - "iojs-v2.5"
  - "iojs-v2.4"
  - "iojs-v2.3"
  - "iojs-v2.2"
  - "iojs-v2.1"
  - "iojs-v2.0"
  - "iojs-v1.8"
  - "iojs-v1.7"
  - "iojs-v1.6"
  - "iojs-v1.5"
  - "iojs-v1.4"
  - "iojs-v1.3"
  - "iojs-v1.2"
  - "iojs-v1.1"
  - "iojs-v1.0"
  - "0.12"
  - "0.11"
  - "0.10"
  - "0.9"
  - "0.8"
  - "0.6"
  - "0.4"
before_install:
  - 'if [ "${TRAVIS_NODE_VERSION}" != "0.9" ]; then case "$(npm --version)" in 1.*) npm install -g npm@1.4.28 ;; 2.*) npm install -g npm@2 ;; esac ; fi'
  - 'if [ "${TRAVIS_NODE_VERSION}" != "0.6" ] && [ "${TRAVIS_NODE_VERSION}" != "0.9" ]; then npm install -g npm; fi'
script:
  - 'if [ "${TRAVIS_NODE_VERSION}" != "4.4" ]; then npm run tests-only ; else npm test ; fi'
sudo: false
matrix:
  fast_finish: true
  allow_failures:
    - node_js: "6.1"
    - node_js: "6.0"
    - node_js: "5.10"
    - node_js: "5.9"
    - node_js: "5.8"
    - node_js: "5.7"
    - node_js: "5.6"
    - node_js: "5.5"
    - node_js: "5.4"
    - node_js: "5.3"
    - node_js: "5.2"
    - node_js: "5.1"
    - node_js: "5.0"
    - node_js: "4.3"
    - node_js: "4.2"
    - node_js: "4.1"
    - node_js: "4.0"
    - node_js: "iojs-v3.2"
    - node_js: "iojs-v3.1"
    - node_js: "iojs-v3.0"
    - node_js: "iojs-v2.4"
    - node_js: "iojs-v2.3"
    - node_js: "iojs-v2.2"
    - node_js: "iojs-v2.1"
    - node_js: "iojs-v2.0"
    - node_js: "iojs-v1.7"
    - node_js: "iojs-v1.6"
    - node_js: "iojs-v1.5"
    - node_js: "iojs-v1.4"
    - node_js: "iojs-v1.3"
    - node_js: "iojs-v1.2"
    - node_js: "iojs-v1.1"
    - node_js: "iojs-v1.0"
    - node_js: "0.11"
    - node_js: "0.9"
    - node_js: "0.6"
    - node_js: "0.4"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

repo_token: NiRhyj91Z2vtgob6XdEAqs83rzNnbMZUu


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
  - "0.11"
  - "0.12"
  - "iojs"
after_script: "NODE_ENV=test YOURPACKAGE_COVERAGE=1 ./node_modules/.bin/mocha --require patched-blanket --reporter mocha-lcov-reporter | ./node_modules/coveralls/bin/coveralls.js"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
- '5'
- '4'
- '0.12'
- '0.10'


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
  - "0.12"
  - "iojs"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
node_js:
- '0.10'
env:
  global:
  - secure: XcBiD8yReflut9q7leKsigDZ0mI3qTKH+QrNVY8DaqlomJOZw8aOrVuX9Jz12l86ZJ41nbxmKnRNkFzcVr9mbP9YaeTb3DpeOBWmvaoSfud9Wnc16VfXtc1FCcwDhSVcSiM3UtnrmFU5cH+Dw1LPh5PbfylYOS/nJxUvG0FFLqI=
  - secure: jNWtEbqhUdQ0xXDHvCYfUbKYeJCi6a7B4LsrcxYCyWWn4NIgncE5x2YbB+FSUUFVYfz0dsn5RKP1oHB99f0laUEo18HBNkrAS/rtyOdVzcpJjbQ6kgSILGjnJD/Ty1B57Rcz3iyev5Y7bLZ6Y1FbDnk/i9/l0faOGz8vTC3Vdkc=


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ui: mocha-qunit
browsers:
    - name: chrome
      version: latest
    - name: firefox
      version: latest
    - name: safari
      version: 5..latest
    - name: iphone
      version: latest
    - name: ie
      version: 8..latest


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "4.4.7"
notifications:
  email:
    - dustin@dustindiaz.com

script: NODE_ENV=test ./node_modules/.bin/mocha --reporter spec


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# Configuration for probot-stale - https://github.com/probot/stale

# Number of days of inactivity before an Issue or Pull Request becomes stale
daysUntilStale: 60
# Number of days of inactivity before a stale Issue or Pull Request is closed
daysUntilClose: 7
# Issues or Pull Requests with these labels will never be considered stale. Set to `[]` to disable
exemptLabels:
  - has pr
  - pinned
  - security
# Label to use when marking as stale
staleLabel: stale
# Comment to post when marking as stale. Set to `false` to disable
markComment: >
  This issue has been automatically marked as `stale` because it has not had
  recent activity 😴. It will be closed if no further activity occurs. Thank you
  for your contributions 👌!
# Comment to post when removing the stale label. Set to `false` to disable
unmarkComment: false
# Comment to post when closing a stale Issue or Pull Request. Set to `false` to disable
closeComment: false
# Limit to only `issues` or `pulls`
# only: issues


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "5.7"
  - "5.6"
  - "5.5"
  - "5.4"
  - "5.3"
  - "5.2"
  - "5.1"
  - "5.0"
  - "4.3"
  - "4.2"
  - "4.1"
  - "4.0"
  - "iojs-v3.3"
  - "iojs-v3.2"
  - "iojs-v3.1"
  - "iojs-v3.0"
  - "iojs-v2.5"
  - "iojs-v2.4"
  - "iojs-v2.3"
  - "iojs-v2.2"
  - "iojs-v2.1"
  - "iojs-v2.0"
  - "iojs-v1.8"
  - "iojs-v1.7"
  - "iojs-v1.6"
  - "iojs-v1.5"
  - "iojs-v1.4"
  - "iojs-v1.3"
  - "iojs-v1.2"
  - "iojs-v1.1"
  - "iojs-v1.0"
  - "0.12"
  - "0.11"
  - "0.10"
  - "0.9"
  - "0.8"
  - "0.6"
  - "0.4"
before_install:
  - 'if [ "${TRAVIS_NODE_VERSION}" != "0.9" ]; then case "$(npm --version)" in 1.*) npm install -g npm@1.4.28 ;; 2.*) npm install -g npm@2 ;; esac ; fi'
  - 'if [ "${TRAVIS_NODE_VERSION}" != "0.6" ] && [ "${TRAVIS_NODE_VERSION}" != "0.9" ]; then npm install -g npm; fi'
script:
  - 'if [ "${TRAVIS_NODE_VERSION}" != "4.3" ]; then npm run tests-only ; else npm test ; fi'
sudo: false
matrix:
  fast_finish: true
  allow_failures:
    - node_js: "5.6"
    - node_js: "5.5"
    - node_js: "5.4"
    - node_js: "5.3"
    - node_js: "5.2"
    - node_js: "5.1"
    - node_js: "5.0"
    - node_js: "4.2"
    - node_js: "4.1"
    - node_js: "4.0"
    - node_js: "iojs-v3.2"
    - node_js: "iojs-v3.1"
    - node_js: "iojs-v3.0"
    - node_js: "iojs-v2.4"
    - node_js: "iojs-v2.3"
    - node_js: "iojs-v2.2"
    - node_js: "iojs-v2.1"
    - node_js: "iojs-v2.0"
    - node_js: "iojs-v1.7"
    - node_js: "iojs-v1.6"
    - node_js: "iojs-v1.5"
    - node_js: "iojs-v1.4"
    - node_js: "iojs-v1.3"
    - node_js: "iojs-v1.2"
    - node_js: "iojs-v1.1"
    - node_js: "iojs-v1.0"
    - node_js: "0.11"
    - node_js: "0.9"
    - node_js: "0.6"
    - node_js: "0.4"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 4
  - 5
  - 6
cache:
  yarn: true
  directories:
    - node_modules
after_success:
  - npm run coveralls


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"
  - "0.11"
branches:
  only:
    - master
notifications:
  email:
    - rod@vagg.org
script: npm test


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
node_js:
  - "4"
  - "6"
  - "stable"
branches:
  only:
    - master


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
node_js:
  - "0.8"
  - "0.10"
  - "0.12"
  - "4"
  - "6"

before_install:
  - travis_retry npm install -g npm@2.14.5
  - travis_retry npm install

script:
  - npm test


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
    - "0.6"
    - "0.8"
    - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.10
  - 0.11


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.4
  - 0.6
  - 0.8
  - 0.10


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false # http://docs.travis-ci.com/user/workers/container-based-infrastructure/
language: node_js
node_js:
  - 0.12
  - 4
  - 5

before_install:
  - mkdir node_modules; ln -s ../ node_modules/d

notifications:
  email:
    - medikoo+d@medikoo.com

script: "npm test && npm run lint"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.11"
  - "0.10"
  - "0.12"
  - "iojs"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

rules:
  no-console: 0
  no-empty: [2, allowEmptyCatch: true]


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.10



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.10
  - 4.0

sudo: false


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.8
  - "0.10"
  - 0.11


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
before_install:
  - npm install -g npm@2
  - test $NPM_LEGACY && npm install -g npm@latest-3 || npm install npm -g
notifications:
  email: false
matrix:
  fast_finish: true
  include:
  - node_js: '0.8'
    env:
      - TASK=test
      - NPM_LEGACY=true
  - node_js: '0.10'
    env:
      - TASK=test
      - NPM_LEGACY=true
  - node_js: '0.11'
    env:
      - TASK=test
      - NPM_LEGACY=true
  - node_js: '0.12'
    env:
      - TASK=test
      - NPM_LEGACY=true
  - node_js: 1
    env:
      - TASK=test
      - NPM_LEGACY=true
  - node_js: 2
    env:
      - TASK=test
      - NPM_LEGACY=true
  - node_js: 3
    env:
      - TASK=test
      - NPM_LEGACY=true
  - node_js: 4
    env: TASK=test
  - node_js: 5
    env: TASK=test
  - node_js: 6
    env: TASK=test
  - node_js: 7
    env: TASK=test
  - node_js: 8
    env: TASK=test
  - node_js: 6
    env: TASK=browser BROWSER_NAME=ie BROWSER_VERSION="9..latest"
  - node_js: 6
    env: TASK=browser BROWSER_NAME=opera BROWSER_VERSION="11..latest"
  - node_js: 6
    env: TASK=browser BROWSER_NAME=chrome BROWSER_VERSION="-3..latest"
  - node_js: 6
    env: TASK=browser BROWSER_NAME=firefox BROWSER_VERSION="-3..latest"
  - node_js: 6
    env: TASK=browser BROWSER_NAME=safari BROWSER_VERSION="5..latest"
  - node_js: 6
    env: TASK=browser BROWSER_NAME=microsoftedge BROWSER_VERSION=latest
script: "npm run $TASK"
env:
  global:
  - secure: rE2Vvo7vnjabYNULNyLFxOyt98BoJexDqsiOnfiD6kLYYsiQGfr/sbZkPMOFm9qfQG7pjqx+zZWZjGSswhTt+626C0t/njXqug7Yps4c3dFblzGfreQHp7wNX5TFsvrxd6dAowVasMp61sJcRnB2w8cUzoe3RAYUDHyiHktwqMc=
  - secure: g9YINaKAdMatsJ28G9jCGbSaguXCyxSTy+pBO6Ch0Cf57ZLOTka3HqDj8p3nV28LUIHZ3ut5WO43CeYKwt4AUtLpBS3a0dndHdY6D83uY6b2qh5hXlrcbeQTq2cvw2y95F7hm4D1kwrgZ7ViqaKggRcEupAL69YbJnxeUDKWEdI=


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
matrix:
  include:
    - node_js: '7'
      env: TEST_SUITE=test
    - node_js: '6'
      env: TEST_SUITE=test
    - node_js: '5'
      env: TEST_SUITE=test
    - node_js: '4'
      env: TEST_SUITE=test
    - node_js: '4'
      env: TEST_SUITE=phantom
script: "npm run-script $TEST_SUITE"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ui: tape


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"
  - "0.12"
  - "iojs"
before_install:
  - npm install -g npm@~1.4.6


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.6


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.8
  - "0.10"
  - 0.11

script: npm run coveralls


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: objective-c

env:
  global:
    - secure: "gve1nkeKkwFEG1VAT3i+JwYyAdF0gKXwKx0uxbkBTsmm2M+0MDusohQdFLoEIkSIFktXBIDefoa7iGpLKRfG2VsZLpwJgnvnD0HqbnuR+k+W+bu7BHt4CAaR6GTllsDCjyq9zNyhUThzSnf2WNIpOEF5kHspZlbGfawURuUJH/U="
    - secure: "jqVpmWxxBVXu2X8+XJMpKH0cooc2EKz9xKL2znBfYdNafJORSXcFAVbjCX5mZmVDcgIMwDtm2+gIG4P73hzJ2e3S+y2Z9ROJGyXHa3AxUTvXHQsxqzH8coHHqB8vTvfr0t2O5aKfpvpICpSea39r0hzNoMv6Ie5SwBdqj1YY9K0="
  matrix:
    - NODE_VERSION="v8"
    - NODE_VERSION="v7"
    - NODE_VERSION="v6"
    - NODE_VERSION="v5"
    - NODE_VERSION="v4"
    - NODE_VERSION="v0.12"
    - NODE_VERSION="v0.10"

before_install:

  - echo $TRAVIS_OS_NAME

  # commit
  # ------------------------
  # The commit message is used to determine the whether to manually
  # invoke a binary publish

  - COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')

  # node
  # ------------------------

  - export PATH=./node_modules/.bin/:$PATH
  - rm -rf ~/.nvm && git clone --depth 1 https://github.com/creationix/nvm.git ~/.nvm
  - source ~/.nvm/nvm.sh
  - nvm install $NODE_VERSION
  - nvm use $NODE_VERSION
  - npm install -g npm@3
  - node --version
  - npm --version
  - nvm --version

  # publish dependencies
  # ------------------------

  - npm install node-gyp -g
  - npm install aws-sdk

install:

  # in the first instance we build from source to create the initial binary
  # which can then be used to create a package

  - npm install --build-from-source
  - npm test

before_script:

  # Detemine if a publish is required.
  #
  # a) we are building a tag
  # b) we put [publish binary] in the commit message

  - PUBLISH_BINARY=false

  - if [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` ]]; then PUBLISH_BINARY=true; fi;       # a
  - if test "${COMMIT_MESSAGE#*'[publish binary]'}" != "$COMMIT_MESSAGE"; then PUBLISH_BINARY=true; fi; # b

  # package & publish
  # ------------------------

  - if [[ $PUBLISH_BINARY == true ]]; then npm run node-pre-gyp package publish; fi;

  # clean-up
  # ------------------------

  - npm run node-pre-gyp clean
  - node-gyp clean

script:

  # validate
  # ------------------------
  # Post publishing a release verify that installing will pull down latest
  # binary from remote host

  - INSTALL_RESULT=0
  - if [[ $PUBLISH_BINARY == true ]]; then INSTALL_RESULT=$(npm install --fallback-to-build=false > /dev/null)$? || true; fi;

  - npm run node-pre-gyp clean

  # failure?
  # ------------------------
  # if install returned non zero (errored) then we first unpublish and then
  # call false so travis will bail at this line.

  - if [[ $INSTALL_RESULT != 0 ]]; then npm run node-pre-gyp unpublish; fi;
  - if [[ $INSTALL_RESULT != 0 ]]; then echo "returned $INSTALL_RESULT";false; fi;

after_success:

  # display all published binaries

 - npm run node-pre-gyp info


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.8
  - 0.10


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"
  - "0.11"
  - "0.12"
  - "1.7.1"
  - 1
  - 2
  - 3
  - 4
  - 5


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
os:
 - linux
node_js:
  - "7.9"
  - "6.10"
  - "5.12"
  - "4.8"
  - "iojs-v3.3"
  - "iojs-v2.5"
  - "iojs-v1.8"
  - "0.12"
  - "0.10"
  - "0.8"
before_install:
  - 'if [ "${TRAVIS_NODE_VERSION}" = "0.6" ]; then npm install -g npm@1.3 ; elif [ "${TRAVIS_NODE_VERSION}" != "0.9" ]; then case "$(npm --version)" in 1.*) npm install -g npm@1.4.28 ;; 2.*) npm install -g npm@2 ;; esac ; fi'
  - 'if [ "${TRAVIS_NODE_VERSION}" != "0.6" ] && [ "${TRAVIS_NODE_VERSION}" != "0.9" ]; then npm install -g npm; fi'
install:
  - 'if [ "${TRAVIS_NODE_VERSION}" = "0.6" ]; then nvm install 0.8 && npm install -g npm@1.3 && npm install -g npm@1.4.28 && npm install -g npm@2 && npm install && nvm use "${TRAVIS_NODE_VERSION}"; else npm install; fi;'
script:
  - 'if [ -n "${PRETEST-}" ]; then npm run pretest ; fi'
  - 'if [ -n "${POSTTEST-}" ]; then npm run posttest ; fi'
  - 'if [ -n "${COVERAGE-}" ]; then npm run coverage ; fi'
  - 'if [ -n "${TEST-}" ]; then npm run tests-only ; fi'
sudo: false
env:
  - TEST=true
matrix:
  fast_finish: true
  include:
    - node_js: "node"
      env: PRETEST=true
    - node_js: "node"
      env: COVERAGE=true
    - node_js: "7.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "7.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "6.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.11"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.10"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.8"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "5.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "4.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v3.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v2.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.7"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.5"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.4"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.3"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.2"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.1"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "iojs-v1.0"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.11"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.9"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.6"
      env: TEST=true ALLOW_FAILURE=true
    - node_js: "0.4"
      env: TEST=true ALLOW_FAILURE=true
    ##- node_js: "7"
      #env: TEST=true
      #os: osx
    #- node_js: "6"
      #env: TEST=true
      #os: osx
    #- node_js: "5"
      #env: TEST=true
      #os: osx
    #- node_js: "4"
      #env: TEST=true
      #os: osx
    #- node_js: "iojs"
      #env: TEST=true
      #os: osx
    #- node_js: "0.12"
      #env: TEST=true
      #os: osx
    #- node_js: "0.10"
      #env: TEST=true
      #os: osx
    #- node_js: "0.8"
      #env: TEST=true
      #os: osx
  allow_failures:
    - os: osx
    - env: TEST=true ALLOW_FAILURE=true


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
  - "0.12"
  - "4.2"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 'node'
  - '5'
  - '4'
  - '0.12'
  - '0.10'


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "5.10"
  - "4.4"
  - "4.1"
  - "0.12"
  - "0.10"
before_install:
  - "make check"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
node_js:
  - stable
  - "0.10"
  - "0.8"
before_install: if [[ `npm --version` != 3* ]]; then npm install -g npm; fi;


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
language: node_js
node_js:
  - '0.8'
  - '0.10'
  - '0.12'
  - 'iojs'
before_install:
  - npm install -g npm@latest


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.4
  - 0.6


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.10
  - 4.0

sudo: false



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "6"
  - "4"
  - "0.10"
  - "0.12"
before_install:
  - "npm config set spin false"
  - "npm install -g npm/npm"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.4
  - 0.6


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.10
  - 4.0

sudo: false



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "5.10"
  - "4.4"
  - "4.1"
  - "0.12"
  - "0.10"
before_install:
  - "make check"
after_success:
  - '[ "${TRAVIS_NODE_VERSION}" = "4.4" ] && make codecovio'


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.10



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"
  - "0.11"
branches:
  only:
    - master
notifications:
  email:
    - rod@vagg.org
script: npm test


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
    - "0.12"
    - "4"
    - "6"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"
  - "0.12"
  - "iojs"
before_install:
  - npm install -g npm@~1.4.6


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.10
  - 0.11


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.10
  - 4.0

sudo: false


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

rules:
  no-console: 0
  no-empty: [2, allowEmptyCatch: true]


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js

node_js:
  - 0.10



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

sudo: false
language: node_js
before_install:
  - npm install -g npm@2
  - npm install -g npm
notifications:
  email: false
matrix:
  fast_finish: true
  include:
  - node_js: '0.8'
    env: TASK=test
  - node_js: '0.10'
    env: TASK=test
  - node_js: '0.11'
    env: TASK=test
  - node_js: '0.12'
    env: TASK=test
  - node_js: 1
    env: TASK=test
  - node_js: 2
    env: TASK=test
  - node_js: 3
    env: TASK=test
  - node_js: 4
    env: TASK=test
  - node_js: 5
    env: TASK=test
  - node_js: 6
    env: TASK=test
  - node_js: 7
    env: TASK=test
  - node_js: 5
    env: TASK=browser BROWSER_NAME=ie BROWSER_VERSION="9..latest"
  - node_js: 5
    env: TASK=browser BROWSER_NAME=opera BROWSER_VERSION="11..latest"
  - node_js: 5
    env: TASK=browser BROWSER_NAME=chrome BROWSER_VERSION="-3..latest"
  - node_js: 5
    env: TASK=browser BROWSER_NAME=firefox BROWSER_VERSION="-3..latest"
  - node_js: 5
    env: TASK=browser BROWSER_NAME=safari BROWSER_VERSION="5..latest"
  - node_js: 5
    env: TASK=browser BROWSER_NAME=microsoftedge BROWSER_VERSION=latest
script: "npm run $TASK"
env:
  global:
  - secure: rE2Vvo7vnjabYNULNyLFxOyt98BoJexDqsiOnfiD6kLYYsiQGfr/sbZkPMOFm9qfQG7pjqx+zZWZjGSswhTt+626C0t/njXqug7Yps4c3dFblzGfreQHp7wNX5TFsvrxd6dAowVasMp61sJcRnB2w8cUzoe3RAYUDHyiHktwqMc=
  - secure: g9YINaKAdMatsJ28G9jCGbSaguXCyxSTy+pBO6Ch0Cf57ZLOTka3HqDj8p3nV28LUIHZ3ut5WO43CeYKwt4AUtLpBS3a0dndHdY6D83uY6b2qh5hXlrcbeQTq2cvw2y95F7hm4D1kwrgZ7ViqaKggRcEupAL69YbJnxeUDKWEdI=


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"
  - "0.12"
  - "iojs"
before_install:
  - npm install -g npm@~1.4.6


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

os: Visual Studio 2015

environment:
  matrix:
    - nodejs_version: 0.10
    - nodejs_version: 4
    - nodejs_version: 6

platform:
  - x64
  - x86

shallow_clone: true

install:
  - ps: Install-Product node $env:nodejs_version $env:Platform
  - ps: Set-ExecutionPolicy Unrestricted -Scope CurrentUser -Force
  # https://github.com/nodejs/node-gyp/issues/972#issuecomment-231055109
  - npm install --production node-gyp
  - node --version
  - npm --version
  #- SET PATH=%APPDATA%\npm;%PATH%
  #- npm install -g node-gyp
  - npm install -g node-gyp@3.2.1
  - node -e "console.log(process.arch);"
  - IF /I "%PLATFORM%" == "x64" set PATH=C:\Python27-x64;%PATH%
  - IF /I "%PLATFORM%" == "x86" SET PATH=C:\python27;%PATH%
  - IF /I "%PLATFORM%" == "x64" CALL "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" amd64
  - IF /I "%PLATFORM%" == "x86" CALL "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86
  - npm install
  - npm test

build: off
test: off
deploy: off


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
  - "0.8"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - '0.12'
  - '4'
  - '6'
  - '7'
before_install:
  - npm install -g npm@latest


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.10"
  - "0.11"
branches:
  only:
    - master


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

repo_token: SIAeZjKYlHK74rbcFvNHMUzjRiMpflxve


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============


language: node_js
node_js:
  - "6"
  - "5"
  - "4"

install:
  - make node_modules

script:
  - make lint
  - make test
  - make coveralls


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

os: Visual Studio 2015

environment:
  matrix:
    - nodejs_version: 0.10
    - nodejs_version: 4
    - nodejs_version: 6
    - nodejs_version: 8
    - nodejs_version: 9

platform:
  - x64
  - x86

shallow_clone: true

install:
  - ps: Install-Product node $env:nodejs_version $env:Platform
  - ps: Set-ExecutionPolicy Unrestricted -Scope CurrentUser -Force
  - npm config get
  # upgrade node-gyp to dodge 2013 compile issue present in the node gyp bundled with node v0.10
  # https://github.com/nodejs/node-gyp/issues/972#issuecomment-231055109
  # but we upgrade using my fork since 3.x upstream will now break node v0.10.x support
  - IF "%nodejs_version:~0,1%"=="0" npm install https://github.com/springmeyer/node-gyp/tarball/v3.x
  # upgrade node-gyp to dodge https://github.com/mapbox/node-pre-gyp/issues/209#issuecomment-307641388
  # and allow make node 4.x x86 builds work
  # https://github.com/mapbox/node-pre-gyp/issues/209#issuecomment-217690537
  - IF "%nodejs_version:~0,1%"=="4" npm install node-gyp@3.x
  # downgrade npm to avoid multiple npm bugs:
  # for node v6 this dodges npm 3.10.10 bug whereby --nodedir/--dist-url is not passed to node-gyp (https://github.com/mapbox/node-pre-gyp/issues/300)
  # for all node x86 versions this dodges a mysterious ELIFECYCLE error: https://ci.appveyor.com/project/Mapbox/node-pre-gyp/build/1.0.582/job/b8q2nud6vkj0s6qo#L233
  # for node v8 this dodges https://github.com/mapbox/node-pre-gyp/issues/302
  - npm install npm@2.x -g
  - node --version
  - npm --version
  - node -e "console.log(process.arch);"
  - IF /I "%PLATFORM%" == "x64" set PATH=C:\Python27-x64;%PATH%
  - IF /I "%PLATFORM%" == "x86" SET PATH=C:\python27;%PATH%
  - IF /I "%PLATFORM%" == "x64" CALL "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" amd64
  - IF /I "%PLATFORM%" == "x86" CALL "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86
  - npm install
  - npm test

build: off
test: off
deploy: off


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

env:
  node: true
extends: 'eslint:recommended'
rules:
  indent: [ 2, 2, { SwitchCase: 1 } ]
  no-trailing-spaces: 2
  quotes: [ 2, single, avoid-escape ]
  linebreak-style: [ 2, unix ]
  semi: [ 2, always ]
  valid-jsdoc: [ 2, { requireReturn: false } ]
  no-invalid-this: 2
  no-unused-vars: [ 2, { args: none } ]
  no-console: [ 2, { allow: [ warn, error ] } ]
  block-scoped-var: 2
  curly: [ 2, multi-or-nest, consistent ]
  dot-location: [ 2, property ]
  dot-notation: 2
  no-else-return: 2
  no-eq-null: 2
  no-fallthrough: 2
  no-return-assign: 2
  strict: [ 2, global ]
  no-use-before-define: [ 2, nofunc ]
  callback-return: 2
  no-path-concat: 2


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "4"
  - "6"
  - "7"
  - "8"
after_script:
  - coveralls < coverage/lcov.info


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

parserOptions:
  ecmaVersion: 2016
rules:
  no-invalid-this: 0
  no-console: 0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

rules:
  no-console: 0
globals:
  describe: false
  it: false


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "node"
  - "6"
  - "4"
  - "0.12"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 4
  - 6
  - 8


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - '0.12'
  - '4'
  - '6'
  - '7'
before_install:
  - npm install -g npm@latest


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "0.8"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - '0.10'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

repo_token: SIAeZjKYlHK74rbcFvNHMUzjRiMpflxve


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============


language: node_js
node_js:
  - "6"
  - "5"
  - "4"

install:
  - make node_modules

script:
  - make lint
  - make test
  - make coveralls


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - "4"
  - "iojs-v3"
  - "iojs-v2"
  - "iojs-v1"
  - "0.12"
  - "0.10"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 0.4
  - 0.6
  - 0.8
  - 0.9


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
- 'node'
sudo: false
env:
  global:
  - secure: AUsK+8fYSpwIMHcVt8Mu9SpG9RPHp4XDAwCQfpU3d5U65q8OVVC6C+XjvnNmEd2PoEJRHem8ZXEyRVfGM1sttKZLZP70TEKZOpOiRQnZiTQCAJ92TfGsDj/F4LoWSjUZUpfeg9b3iSp8G5dVw3+q9QZPIu6eykASK6bfcg//Cyg=
  - secure: eQBKJWu7XbhAN4ZvOOhMenC0IPpoYj+wZVVzzsLwUppfJqlrHV0CUW8rJdvZNiaGhYhoyHTnAcynpTE5kZfg3XjevOvF8PGY5wUYCki9BI+rp+pvVPZE/DNUAQpFR2gd2nxMJ4kYv7GVb6i/DfuqJa0h8IuY4zcMuKWwbQd3Az8=


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ui: tape
scripts:
  - ./test/_polyfill.js
browsers:
  - name: safari
    version: latest
  - name: ie
    version: 8..latest
  - name: microsoftedge
    version: 13..latest
  - name: android
    version: 4.4..latest
  - name: iphone
    version: latest


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ui: tape
browsers:
  - name: chrome
    version: '-1..latest'
  - name: firefox
    version: '-1..latest'


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: node_js
node_js:
  - 4
  - 6
  - 8
  - 9
branches:
  only:
    - master
notifications:
  email:
    - rod@vagg.org


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Pod                                            # 1
metadata:
  name: sa-frontend
  labels:
    app: sa-frontend                                 # 2
spec:                                                # 3
  containers:
    - image: smascha/sentiment-analysis-frontend:latest
      name: sa-frontend                              # 5
      ports:
        - containerPort: 80                          # 6
          protocol: TCP

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sa-frontend
  labels:
    app: sa-frontend
spec:
  selector:
    matchLabels:
      app: sa-frontend
  replicas: 2
  minReadySeconds: 15
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: sa-frontend
    spec:
      containers:
        - image: rinormaloku/sentiment-analysis-frontend:green
          imagePullPolicy: Always
          name: sa-frontend
          ports:
            - containerPort: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: sa-web-app-lb
spec:
  type: LoadBalancer
  ports:
  - port: 8888
    protocol: TCP
    targetPort: 8080
  selector:
    app: sa-web-app

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment                                          # 1
metadata:
  name: sa-frontend
  labels:
    app: sa-frontend
spec:
  selector:
    matchLabels:
      app: sa-frontend
  replicas: 2                                             # 2
  minReadySeconds: 15
  strategy:
    type: RollingUpdate                                   # 3
    rollingUpdate: 
      maxUnavailable: 1                                   # 4
      maxSurge: 1                                         # 5
  template:
    metadata:
      labels:
        app: sa-frontend                                  # 6
    spec:
      containers:
        - image: smascha/sentiment-analysis-frontend:kube
          imagePullPolicy: Always                         # 7
          name: sa-frontend
          ports:
            - containerPort: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: sa-logic
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 5000
  selector:
    app: sa-logic

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Pod
metadata:
  name: sa-frontend2
  labels:
    app: sa-frontend
spec:
  containers:
    - image: smascha/sentiment-analysis-frontend 
      name: sa-frontend
      ports:
        - containerPort: 80

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sa-logic
  labels:
    app: sa-logic
spec:
  selector:
     matchLabels:
       app: sa-logic
  replicas: 2
  minReadySeconds: 15
  strategy:
    type: RollingUpdate
    rollingUpdate: 
      maxUnavailable: 1
      maxSurge: 1 
  template:
    metadata:
      labels:
        app: sa-logic
    spec:
      containers:
        - image: smascha/sentiment-analysis-logic:arm32
          imagePullPolicy: Always
          name: sa-logic
          ports:
            - containerPort: 5000


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service              # 1
metadata:
  name: sa-frontend-lb
spec:
  type: LoadBalancer       # 2
  ports:
  - port: 3333               # 3
    protocol: TCP          # 4
    targetPort: 80         # 5
  selector:                # 6
    app: sa-frontend       # 7

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sa-web-app
  labels:
    app: sa-web-app
spec:
  selector:
    matchLabels:
      app: sa-web-app
  replicas: 2
  minReadySeconds: 15
  strategy:
    type: RollingUpdate
    rollingUpdate: 
      maxUnavailable: 1
      maxSurge: 1 
  template:
    metadata:
      labels:
        app: sa-web-app
    spec:
      containers:
      - image: smascha/sentiment-analysis-web-app:rpi
        imagePullPolicy: Always
        name: sa-web-app
        env:
          - name: SA_LOGIC_API_URL
            value: "http://sa-logic"
        ports:
          - containerPort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

language: java
install: true

os: linux
dist: trusty
jdk: openjdk8

script:
  - ./gradlew clean build --scan -s

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# three node (two workers) cluster config
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
- role: worker
- role: worker



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: Deployment
apiVersion: apps/v1
metadata:
  name: k8dash
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: k8dash
  template:
    metadata:
      labels:
        k8s-app: k8dash
    spec:
      containers:
      - name: k8dash
        image: herbrandson/k8dash:latest
        ports:
        - containerPort: 4654
        livenessProbe:
          httpGet:
            scheme: HTTP
            path: /
            port: 4654
          initialDelaySeconds: 30
          timeoutSeconds: 30
      nodeSelector:
        'beta.kubernetes.io/os': linux

---
kind: Service
apiVersion: v1
metadata:
  name: k8dash
  namespace: kube-system
spec:
  type: NodePort
  ports:
    - port: 4654
  selector:
    k8s-app: k8dash


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kube-green-nfs
  namespace: kube-green
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 50Gi



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Namespace
metadata:
  name: kube-green
  labels:
    app: kube-green


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: PersistentVolume
metadata:
  name: kube-green-nfs
  namespace: kube-green
spec:
  capacity:
    storage: 50Gi
  accessModes:
    - ReadWriteMany
  nfs:
    server: 10.7.242.140
    path: "/nfs_share"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: admin
  namespace: kube-green
spec:
  type: NodePort
  selector:
    app: admin
  ports:
  - port: 8761
    nodePort: 30333
    targetPort: 8761
    protocol: TCP


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: customers-deployment
  namespace: kube-green
  labels:
    app: customers
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: customers
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: kube-mount
          name: customers
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/customers:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "customers", "172.17.0.3", "30333"]
      volumes:
        - name: kube-mount
          emptyDir: {}
      restartPolicy: Always
    metadata:
      labels:
        app: customers
  replicas: 1


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-deployment
  namespace: kube-green
  labels:
    app: admin
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: admin
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: kube-mount
          name: admin
          ports:
            - containerPort: 8761
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/admin:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "admin", "172.17.0.3", "8761"]
      volumes:
        - name: kube-mount
          emptyDir: {}
      restartPolicy: Always
    metadata:
      labels:
        app: admin
  replicas: 1


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: accounts-deployment
  namespace: kube-green
  labels:
    app: accounts
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: accounts
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: kube-mount
          name: accounts
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/accounts:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "accounts", "172.17.0.3", "30333"]
      volumes:
        - name: kube-mount
          emptyDir: {}
      restartPolicy: Always
    metadata:
      labels:
        app: accounts
  replicas: 1


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: users-deployment
  namespace: kube-green
  labels:
    app: users
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: users
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: kube-mount
          name: users
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/users:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "users", "172.17.0.3", "30333"]
      volumes:
        - name: kube-mount
          emptyDir: {}
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: users
  replicas: 1


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: PersistentVolume
metadata:
  name: kube-red-nfs
  namespace: kube-red
spec:
  capacity:
    storage: 50Gi
  accessModes:
    - ReadWriteMany
  nfs:
    server: 10.7.242.140
    path: "/nfs_share"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Namespace
metadata:
  name: kube-red
  labels:
    app: kube-red


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kube-red-nfs
  namespace: kube-red
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 50Gi



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-deployment
  namespace: kube-red
  labels:
    app: admin
    purpose: kube-red-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: admin
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: kube-mount
          name: admin
          ports:
            - containerPort: 8761
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/admin:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["red", "admin", "172.17.0.3", "8761"]
      volumes:
        - name: kube-mount
          emptyDir: {}
      restartPolicy: Always
    metadata:
      labels:
        app: admin
  replicas: 1


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: accounts-deployment
  namespace: kube-red
  labels:
    app: accounts
    purpose: kube-red-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: accounts
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: kube-mount
          name: accounts
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/accounts:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["red", "accounts", "172.17.0.3", "30333"]
      volumes:
        - name: kube-mount
          emptyDir: {}
      restartPolicy: Always
    metadata:
      labels:
        app: accounts
  replicas: 1


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

version: 2
jobs:
  build:
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
#    working_directory: apps/admin/
    steps:
      - checkout
#      - restore_cache:
#          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
#      - restore_cache:
#          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Create Kube Home
          command: sudo mkdir -p /opt/mw/app/kube/ && sudo chmod 777 -R /opt/mw/app/kube/
      - run:
          name: Create Kube Logs
          command: sudo mkdir -p /opt/mw/mount/logs/kube/ && sudo chmod 777 -R /opt/mw/mount/logs/kube/
      - run:
          name: Add Kube Logback XML
          command: cp apps/admin/src/main/resources/logback-spring.xml /opt/mw/app/kube/logback-spring.xml
      - run:
          name: Kube Admin CI
          command: cd apps/admin && ./gradlew clean build && cp build/libs/*.jar ../toolbox/kube/docker/build/
#      - run:
#          name: Kube Customers CI
#          command: cd apps/customers && ./gradlew clean build
#      - run:
#          name: Kube Users CI
#          command: cd apps/users && ./gradlew clean build
      - setup_remote_docker:
          docker_layer_caching: false
      # build and push Docker image
#          name: Kube Docker Build
#          command: cd apps/toolbox/kube/docker/build
      - run:
          name: Build Kube Docker Image
          command: |
            TAG=1.0.0_$CIRCLE_BUILD_NUM
            cd apps/toolbox/kube/docker/build/
            docker build --build-arg kubeMicroservice=admin -t navikco/kube:admin-${TAG} .
            docker login --username=navikco --password=Frisc0tx!
            docker push navikco/kube:admin-${TAG}
#            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
#          docker build -t CircleCI-Public/circleci-demo-docker:$TAG .
#          docker build --build-arg kubeMicroservice=${MICROSERVICE} -t navikco/kube:${MICROSERVICE}-${VERSION} .
#          docker push CircleCI-Public/circleci-demo-docker:$TAG
#          docker push navikco/kube:${MICROSERVICE}-${VERSION}

#      - save_cache:
#          paths:
#            - ~/.gradle/wrapper
#          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
#      - save_cache:
#          paths:
#            - ~/.gradle/caches
#          key: v1-gradle-cache-{{ checksum "build.gradle" }}
#      - persist_to_workspace:
#          root: .
#          paths:
#            - build
workflows:
  version: 2
  workflow:
    jobs:
      - build


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: customers
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: customers
    restDocName: customers
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/customers'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: offers
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: offers
    restDocName: offers
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/offers'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: vendors
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: vendors
    restDocName: vendors
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/vendors'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: payments
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: payments
    restDocName: payments
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/payments'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: products
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: products
    restDocName: products
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/products'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: invoices
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: invoices
    restDocName: invoices
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/invoices'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: dues
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: dues
    restDocName: dues
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/dues'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: wishlists
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: wishlists
    restDocName: wishlists
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/wishlists'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: referrals
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: referrals
    restDocName: referrals
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/referrals'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: leads
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: leads
    restDocName: leads
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/leads'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: admin
  profiles:
    active: local

logging:
  file: "/opt/mw/mount/logs/kube/\${spring.application.name}/\${spring.cloud.client.ip-address}/\${spring.application.name}.log"
  config: /opt/mw/app/kube/logback-spring.xml

server:
  port: ${PORT:8761}

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  adminServer:
    host: localhost
    port: 8761
  main:
    allow-bean-definition-overriding: true
  boot:
    admin:
      context-path: /admin
      ui:
        brand: <img src="navik.png"><span><font color="green">Kube Land Microservices Dashboard</font></span>
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
    health:
      show-details: ALWAYS

logging.level.org: INFO
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

info:
  General:
    Environment: ${spring.profiles.active}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/admin'

eureka:
  server:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
    useDnsForFetchingServiceUrls: true
    eurekaServerDNSName: eureka.local
    eurekaServerPort: 8761
    eurekaServerURLContext: eureka

zuul:
  host:
    connect-timeout-millis: 60000
    socket-timeout-millis: 60000
  retryable: true
  routes:
    accounts:
      path: /kube/accounts/**
      stripPrefix: false
    carts:
      path: /kube/carts/**
      stripPrefix: false
    categories:
      path: /kube/categories/**
      stripPrefix: false
    coupons:
      path: /kube/coupons/**
      stripPrefix: false
    customers:
      path: /kube/customers/**
      stripPrefix: false
    dues:
      path: /kube/dues/**
      stripPrefix: false
    invoices:
      path: /kube/invoices/**
      stripPrefix: false
    leads:
      path: /kube/leads/**
      stripPrefix: false
    losts:
      path: /kube/losts/**
      stripPrefix: false
    markets:
      path: /kube/markets/**
      stripPrefix: false
    offers:
      path: /kube/offers/**
      stripPrefix: false
    orders:
      path: /kube/orders/**
      stripPrefix: false
    payments:
      path: /kube/payments/**
      stripPrefix: false
    products:
      path: /kube/products/**
      stripPrefix: false
    referrals:
      path: /kube/referrals/**
      stripPrefix: false
    returns:
      path: /kube/returns/**
      stripPrefix: false
    roles:
      path: /kube/roles/**
      stripPrefix: false
    services:
      path: /kube/services/**
      stripPrefix: false
    subscriptions:
      path: /kube/subscriptions/**
      stripPrefix: false
    users:
      path: /kube/users/**
      stripPrefix: false
    vendors:
      path: /kube/vendors/**
      stripPrefix: false
    wishlists:
      path: /kube/wishlists/**
      stripPrefix: false


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: roles
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: roles
    restDocName: roles
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/roles'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: subscriptions
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: subscriptions
    restDocName: subscriptions
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/subscriptions'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: carts
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: carts
    restDocName: carts
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/carts'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: coupons
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: coupons
    restDocName: coupons
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/coupons'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: accounts
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: accounts
    restDocName: accounts
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/accounts'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: markets
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: markets
    restDocName: markets
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/markets'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kube-green-nfs
  namespace: kube-green
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 50Gi



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Namespace
metadata:
  name: kube-green
  labels:
    app: kube-green


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: PersistentVolume
metadata:
  name: kube-green-nfs
  namespace: kube-green
spec:
  capacity:
    storage: 50Gi
  accessModes:
    - ReadWriteMany
  nfs:
    server: 10.7.242.140
    path: "/nfs_share"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: admin
  namespace: kube-green
spec:
  type: NodePort
  selector:
    app: admin
  ports:
  - port: 8761
    nodePort: 30333
    targetPort: 8761
    protocol: TCP


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: customers-deployment
  namespace: kube-green
  labels:
    app: customers
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: customers
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: customers
          name: customers
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/customers:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "customers", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: customers
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: offers-deployment
  namespace: kube-green
  labels:
    app: offers
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: offers
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: offers
          name: offers
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/offers:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "offers", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: offers
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: vendors-deployment
  namespace: kube-green
  labels:
    app: vendors
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: vendors
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: vendors
          name: vendors
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/vendors:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "vendors", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: vendors
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: payments-deployment
  namespace: kube-green
  labels:
    app: payments
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: payments
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: payments
          name: payments
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/payments:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "payments", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: payments
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: products-deployment
  namespace: kube-green
  labels:
    app: products
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: products
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: products
          name: products
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/products:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "products", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: products
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: invoices-deployment
  namespace: kube-green
  labels:
    app: invoices
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: invoices
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: invoices
          name: invoices
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/invoices:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "invoices", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: invoices
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: dues-deployment
  namespace: kube-green
  labels:
    app: dues
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: dues
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: dues
          name: dues
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/dues:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "dues", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: dues
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: wishlists-deployment
  namespace: kube-green
  labels:
    app: wishlists
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: wishlists
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: wishlists
          name: wishlists
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/wishlists:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "wishlists", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: wishlists
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: referrals-deployment
  namespace: kube-green
  labels:
    app: referrals
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: referrals
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: referrals
          name: referrals
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/referrals:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "referrals", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: referrals
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: leads-deployment
  namespace: kube-green
  labels:
    app: leads
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: leads
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: leads
          name: leads
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/leads:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "leads", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: leads
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-deployment
  namespace: kube-green
  labels:
    app: admin
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: admin
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: admin
          name: admin
          ports:
            - containerPort: 8761
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/admin:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "admin", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: admin
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: roles-deployment
  namespace: kube-green
  labels:
    app: roles
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: roles
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: roles
          name: roles
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/roles:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "roles", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: roles
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: subscriptions-deployment
  namespace: kube-green
  labels:
    app: subscriptions
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: subscriptions
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: subscriptions
          name: subscriptions
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/subscriptions:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "subscriptions", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: subscriptions
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts-deployment
  namespace: kube-green
  labels:
    app: carts
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: carts
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: carts
          name: carts
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/carts:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "carts", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: carts
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: coupons-deployment
  namespace: kube-green
  labels:
    app: coupons
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: coupons
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: coupons
          name: coupons
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/coupons:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "coupons", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: coupons
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: accounts-deployment
  namespace: kube-green
  labels:
    app: accounts
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: accounts
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: accounts
          name: accounts
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/accounts:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "accounts", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: accounts
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: markets-deployment
  namespace: kube-green
  labels:
    app: markets
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: markets
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: markets
          name: markets
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/markets:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "markets", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: markets
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: users-deployment
  namespace: kube-green
  labels:
    app: users
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: users
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: users
          name: users
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/users:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "users", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: users
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: returns-deployment
  namespace: kube-green
  labels:
    app: returns
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: returns
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: returns
          name: returns
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/returns:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "returns", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: returns
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders-deployment
  namespace: kube-green
  labels:
    app: orders
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: orders
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: orders
          name: orders
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/orders:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "orders", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: orders
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: categories-deployment
  namespace: kube-green
  labels:
    app: categories
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: categories
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: categories
          name: categories
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/categories:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "categories", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: categories
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: services-deployment
  namespace: kube-green
  labels:
    app: services
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: services
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: services
          name: services
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/services:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "services", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: services
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: losts-deployment
  namespace: kube-green
  labels:
    app: losts
    purpose: kube-green-containers
  annotations:
    version: 'latest'
spec:
  selector:
    matchLabels:
      app: losts
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: losts
          name: losts
          ports:
            - containerPort: 8080
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: navikco/losts:latest
          resources:
            requests:
              memory: "150Mi"
              cpu: "250m"
            limits:
              memory: "500Mi"
              cpu: "1"
          args: ["green", "losts", "10.70.245.142", "30333"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-green-nfs
      dnsConfig:
        nameservers:
          - "172.1.1.22"
          - "10.1.1.22"
        searches:
          - "lab.kubeland.net"
      restartPolicy: Always
    metadata:
      labels:
        app: losts
  replicas: 1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{MICROSERVICE}}
  namespace: kube-{{PROFILE}}
spec:
  type: NodePort
  selector:
    app: {{MICROSERVICE}}
  ports:
  - port: {{PORT}}
    nodePort: {{NODE_PORT}}
    targetPort: {{TARGET_PORT}}
    protocol: TCP


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kube-{{PROFILE}}-nfs
  namespace: kube-{{PROFILE}}
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: {{STORAGE}}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: PersistentVolume
metadata:
  name: kube-{{PROFILE}}-nfs
  namespace: kube-{{PROFILE}}
spec:
  capacity:
    storage: {{STORAGE}}
  accessModes:
    - ReadWriteMany
  nfs:
    server: {{NFS_SERVER}}
    path: "{{NFS_PATH}}"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Namespace
metadata:
  name: kube-{{PROFILE}}
  labels:
    app: kube-{{PROFILE}}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{MICROSERVICE}}-deployment
  namespace: kube-{{PROFILE}}
  labels:
    app: {{MICROSERVICE}}
    purpose: kube-{{PROFILE}}-containers
  annotations:
    version: '{{VERSION}}'
spec:
  selector:
    matchLabels:
      app: {{MICROSERVICE}}
  template:
    spec:
      containers:
        - volumeMounts:
            - mountPath: /opt/mw/mount
              name: {{MICROSERVICE}}
          name: {{MICROSERVICE}}
          ports:
            - containerPort: {{CONTAINER_PORT}}
              protocol: TCP
              name: kube-port
          imagePullPolicy: IfNotPresent
          image: {{REGISTRY_HOST}}/{{MICROSERVICE}}:{{VERSION}}
          resources:
            requests:
              memory: "{{REQUEST_MEMORY}}"
              cpu: "{{REQUEST_CPU}}"
            limits:
              memory: "{{LIMIT_MEMORY}}"
              cpu: "{{LIMIT_CPU}}"
          args: ["{{PROFILE}}", "{{MICROSERVICE}}", "{{ADMIN_HOST}}", "{{ADMIN_PORT}}"]
          volumeMounts:
            - mountPath: "/opt/mw/mount"
              name: kube-mount
      volumes:
        - name: kube-mount
          persistentVolumeClaim:
            claimName: kube-{{PROFILE}}-nfs
      restartPolicy: Always
    metadata:
      labels:
        app: {{MICROSERVICE}}
  replicas: {{REPLICAS}}

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: users
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: users
    restDocName: users
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/users'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: returns
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: returns
    restDocName: returns
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/returns'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: orders
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: orders
    restDocName: orders
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/orders'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: categories
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: categories
    restDocName: categories
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/categories'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: services
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: services
    restDocName: services
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/services'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: losts
  profiles:
    active: local

logging:
  file: /opt/mw/mount/logs/kube/${spring.application.name}/${spring.cloud.client.ip-address}/${spring.application.name}.log
  config: /opt/mw/app/kube/logback-spring.xml

---

spring:
  profiles: local

logging:
  file: ./logs/\${spring.application.name}.log
  config: ./src/main/resources/logback-spring.xml

---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: losts
    restDocName: losts
  adminServer:
    host: ${KUBE_ADMIN_HOST}
    port: ${KUBE_ADMIN_PORT}
  boot:
    admin:
      context-path: /admin
      discovery:
        converter:
          management-context-path: /
  security:
    enabled: false

management:
  security:
    enabled: false
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /
      path-mapping:
        health: health
        info: info
        metrics: metrics
    jmx:
      enabled: true
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

logging.level.org: ERROR
logging.level.com: ERROR
logging.level.net.kube.land: DEBUG
logging.level.org.springframework.boot.SpringApplication: INFO
logging.level.org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: DEBUG
logging.level.org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration: DEBUG

eureka:
  instance:
    preferIpAddress: true
    leaseRenewalIntervalInSeconds: 30
    health-check-url-path: /health
  client:
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://${KUBE_ADMIN_HOST}:${KUBE_ADMIN_PORT}/eureka/

info:
  General:
    Environment: ${spring.profiles.active}
    Rest_API_Doc: http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/info/index.html
    Endpoint(s):
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}
      - http://${spring.adminServer.host}:${spring.adminServer.port}/kube/${spring.application.restDocName}/{CUSTOMER_ID}
    GIT Repo: 'https://github.com/navikco/kube/tree/master/apps/losts'

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  name: images
  labels:
    app: images
data:
  application.yaml: |-
    security:
      basic:
        enabled: false
    spring:
      datasource:
        url: jdbc:mysql://${MYSQL_SERVICE_HOST}:${MYSQL_SERVICE_PORT}/mysql
        username: root
        password: ${mysql-root-password}
        driverClassName: com.mysql.jdbc.Driver
        testOnBorrow: true
        validationQuery: "SELECT 1"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: images
  labels:
    app: images
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: images
    spec:
      containers:
      - name: images
        image: trisberg/images:0.0.1-SNAPSHOT
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: 1.0
            memory: 1024Mi
          requests:
            cpu: 0.5
            memory: 640Mi
        livenessProbe:
          httpGet:
            path: /application/status
            port: 80
          initialDelaySeconds: 90
          periodSeconds: 15
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /application/status
            port: 80
          initialDelaySeconds: 45
          periodSeconds: 15
          timeoutSeconds: 5
        env:
        - name: SERVER_PORT
          value: '80'
        - name: SPRING_PROFILES_ACTIVE
          value: kubernetes
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql
              key: mysql-root-password
        volumeMounts:
        - name: application-config
          mountPath: "/config"
          readOnly: true
      volumes:
      - name: application-config
        configMap:
          name: images
          items:
          - key: application.yaml
            path: application-kubernetes.yaml


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: Service
apiVersion: v1
metadata:
  name: images
  labels:
    app: images
spec:
  # If you are running k8s on a local dev box or using minikube, you can use type NodePort instead of LoadBalancer
  type: NodePort
  ports:
    - port: 80
  selector:
    app: images


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

dependencies:
- name:  mysql
  version: 0.3.0
  repository: https://kubernetes-charts.storage.googleapis.com/


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
description: A Helm chart for Spring Boot Demo App on Kubernetes
name: hollywood
version: 0.1.0
home: https://github.com/trisberg/boot-k8s-microservices
sources:
- https://github.com/trisberg/boot-k8s-microservices
icon: https://raw.githubusercontent.com/trisberg/images/master/spring-boot-project-logo.png
maintainers:
- name: Thomas Risberg
  email: trisberg@pivotal.io


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# Default values for hollywood.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
actors:
  replicaCount: 1
  image:
    repository: springdeveloper/actors
    tag: 0.0.1-SNAPSHOT
    pullPolicy: IfNotPresent
  service:
    name: http
    type: NodePort
    externalPort: 80
    internalPort: 8080
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
images:
  replicaCount: 1
  image:
    repository: springdeveloper/images  
    tag: 0.0.1-SNAPSHOT
    pullPolicy: IfNotPresent
  service:
    name: http
    type: NodePort
    externalPort: 80
    internalPort: 8080
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
gateway:
  replicaCount: 1
  image:
    repository: springdeveloper/gateway
    tag: 0.0.1-SNAPSHOT
    pullPolicy: IfNotPresent
  service:
    name: http
    type: NodePort
    externalPort: 80
    internalPort: 8080
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
zipkin:
  replicaCount: 1
  image:
    repository: openzipkin/zipkin
    tag: 2.2
    pullPolicy: IfNotPresent
  service:
    name: http
    type: NodePort
    externalPort: 9411
    internalPort: 9411
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
grafana:
  replicaCount: 1
  image:
    repository: grafana/grafana
    tag: 4.4.1
    pullPolicy: IfNotPresent
  service:
    name: prometheus
    type: NodePort
    externalPort: 3000
    internalPort: 3000
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
prometheus:
  replicaCount: 1
  image:
    repository: prom/prometheus
    tag: v1.7.1
    pullPolicy: IfNotPresent
  service:
    name: prometheus
    type: NodePort
    externalPort: 9090
    internalPort: 9090
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
ingress:
  enabled: false
  # Used to create an Ingress record.
  hosts:
    - chart-example.local
  annotations:
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls:
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
mysql:
  mysqlRootPassword: testing


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ template "hollywood.fullname" . }}-gateway
  labels:
    app: {{ template "hollywood.name" . }}-gateway
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.gateway.service.type }}
  ports:
    - port: {{ .Values.gateway.service.externalPort }}
      targetPort: {{ .Values.gateway.service.internalPort }}
      protocol: TCP
      name: {{ .Values.gateway.service.name }}
  selector:
    app: {{ template "hollywood.name" . }}-gateway
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "hollywood.fullname" . }}-actors
  labels:
    app: {{ template "hollywood.name" . }}-actors
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  application.yaml: |-
    spring:
      datasource:
        url: jdbc:mysql://{{ .Release.Name }}-mysql:3306/mysql
        username: root
        password: ${MYSQL_ROOT_PASSWORD}
        driverClassName: com.mysql.jdbc.Driver
        testOnBorrow: true
        validationQuery: "SELECT 1"
      zipkin:
        baseUrl: http://{{ template "hollywood.fullname" . }}-zipkin:{{ .Values.zipkin.service.externalPort }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ template "hollywood.fullname" . }}-grafana
  labels:
    app: {{ template "hollywood.name" . }}
    component: grafana
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.grafana.service.type }}
  ports:
    - port: {{ .Values.grafana.service.externalPort }}
      targetPort: {{ .Values.grafana.service.internalPort }}
      protocol: TCP
      name: {{ .Values.grafana.service.name }}
  selector:
    app: {{ template "hollywood.name" . }}
    component: grafana
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ template "hollywood.fullname" . }}-images
  labels:
    app: {{ template "hollywood.name" . }}-images
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.images.service.type }}
  ports:
    - port: {{ .Values.images.service.externalPort }}
      targetPort: {{ .Values.images.service.internalPort }}
      protocol: TCP
      name: {{ .Values.images.service.name }}
  selector:
    app: {{ template "hollywood.name" . }}-images
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "hollywood.fullname" . }}-prometheus
  labels:
    app: {{ template "hollywood.name" . }}
    component: prometheus
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.prometheus.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ template "hollywood.name" . }}
        component: prometheus
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}-prometheus
          image: "{{ .Values.prometheus.image.repository }}:{{ .Values.prometheus.image.tag }}"
          imagePullPolicy: {{ .Values.prometheus.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.prometheus.service.internalPort }}
          args:
            - '-storage.local.retention=6h'
            - '-storage.local.memory-chunks=500000'
            - '-config.file=/etc/prometheus/prometheus.yml'
          volumeMounts:
          - name: config-volume
            mountPath: /etc/prometheus
          resources:
{{ toYaml .Values.prometheus.resources | indent 12 }}
      volumes:
      - name: config-volume
        configMap:
          name: {{ template "hollywood.fullname" . }}-prometheus
    {{- if .Values.prometheus.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.prometheus.nodeSelector | indent 8 }}
    {{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "hollywood.fullname" . }}-prometheus
  labels:
    app: {{ template "hollywood.name" . }}
    component: prometheus
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  prometheus.yml: |-
    global:
      scrape_interval: 15s
    scrape_configs:
    - job_name: 'prometheus'
      # Override the global default and scrape targets from this job every 5 seconds.
      scrape_interval: 5s
      # metrics_path defaults to '/metrics'
      # scheme defaults to 'http'.
      static_configs: 
      - targets: ['localhost:9090']
    - job_name: 'zipkin'
      # Override the global default and scrape targets from this job every 5 seconds.
      scrape_interval: 5s
      # metrics_path defaults to '/metrics'
      # scheme defaults to 'http'.
      metrics_path: '/prometheus'
      static_configs:
      - targets: ['{{ template "hollywood.fullname" . }}-zipkin:{{ .Values.zipkin.service.externalPort }}']
    - job_name: 'hollywood'
      # Override the global default and scrape targets from this job every 5 seconds.
      scrape_interval: 5s
      # metrics_path defaults to '/metrics'
      # scheme defaults to 'http'.
      metrics_path: '/application/prometheus'
      static_configs:
      - targets: ['{{ template "hollywood.fullname" . }}-actors:{{ .Values.actors.service.externalPort }}','{{ template "hollywood.fullname" . }}-images:{{ .Values.images.service.externalPort }}','{{ template "hollywood.fullname" . }}-gateway:{{ .Values.gateway.service.externalPort }}']


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $serviceName := include "hollywood.fullname" . -}}
{{- $servicePort := .Values.service.externalPort -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "hollywood.fullname" . }}
  labels:
    app: {{ template "hollywood.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
    {{- range $key, $value := .Values.ingress.annotations }}
      {{ $key }}: {{ $value | quote }}
    {{- end }}
spec:
  rules:
    {{- range $host := .Values.ingress.hosts }}
    - host: {{ $host }}
      http:
        paths:
          - path: /
            backend:
              serviceName: {{ $serviceName }}
              servicePort: {{ $servicePort }}
    {{- end -}}
  {{- if .Values.ingress.tls }}
  tls:
{{ toYaml .Values.ingress.tls | indent 4 }}
  {{- end -}}
{{- end -}}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ template "hollywood.fullname" . }}-actors
  labels:
    app: {{ template "hollywood.name" . }}-actors
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.actors.service.type }}
  ports:
    - port: {{ .Values.actors.service.externalPort }}
      targetPort: {{ .Values.actors.service.internalPort }}
      protocol: TCP
      name: {{ .Values.actors.service.name }}
  selector:
    app: {{ template "hollywood.name" . }}-actors
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "hollywood.fullname" . }}-grafana
  labels:
    app: {{ template "hollywood.name" . }}
    component: grafana
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.grafana.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ template "hollywood.name" . }}
        component: grafana
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}-grafana
          image: "{{ .Values.grafana.image.repository }}:{{ .Values.grafana.image.tag }}"
          imagePullPolicy: {{ .Values.grafana.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.grafana.service.internalPort }}
          env:
          - name: GRAFANA_PORT
            value: "3000"
          - name: GF_AUTH_BASIC_ENABLED
            value: "false"
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "true"
          - name: GF_AUTH_ANONYMOUS_ORG_ROLE
            value: Admin
          - name: GF_PATHS_DATA
            value: /data/grafana
          volumeMounts:
          - mountPath: /data/grafana
            name: grafana-data
          resources:
{{ toYaml .Values.grafana.resources | indent 12 }}
      volumes:
        - name: grafana-data
          emptyDir: {}
    {{- if .Values.grafana.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.grafana.nodeSelector | indent 8 }}
    {{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "hollywood.fullname" . }}-images
  labels:
    app: {{ template "hollywood.name" . }}-images
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  application.yaml: |-
    spring:
      datasource:
        url: jdbc:mysql://{{ .Release.Name }}-mysql:3306/mysql
        username: root
        password: ${MYSQL_ROOT_PASSWORD}
        driverClassName: com.mysql.jdbc.Driver
        testOnBorrow: true
        validationQuery: "SELECT 1"
      zipkin:
        baseUrl: http://{{ template "hollywood.fullname" . }}-zipkin:{{ .Values.zipkin.service.externalPort }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ template "hollywood.fullname" . }}-zipkin
  labels:
    app: {{ template "hollywood.name" . }}-zipkin
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.zipkin.service.type }}
  ports:
    - port: {{ .Values.zipkin.service.externalPort }}
      targetPort: {{ .Values.zipkin.service.internalPort }}
      protocol: TCP
      name: {{ .Values.zipkin.service.name }}
  selector:
    app: {{ template "hollywood.name" . }}-zipkin
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "hollywood.fullname" . }}-images
  labels:
    app: {{ template "hollywood.name" . }}-images
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.images.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ template "hollywood.name" . }}-images
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.images.image.repository }}:{{ .Values.images.image.tag }}"
          imagePullPolicy: {{ .Values.images.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.images.service.internalPort }}
          livenessProbe:
            httpGet:
              path: /application/status
              port: {{ .Values.images.service.internalPort }}
            initialDelaySeconds: 90
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /application/status
              port: {{ .Values.images.service.internalPort }}
            initialDelaySeconds: 45
            periodSeconds: 15
            timeoutSeconds: 5
          env:
          - name: SPRING_PROFILES_ACTIVE
            value: kubernetes
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-mysql
                key: mysql-root-password
          volumeMounts:
          - name: application-config 
            mountPath: "/config" 
            readOnly: true
          resources:
{{ toYaml .Values.images.resources | indent 12 }}
      volumes:
      - name: application-config
        configMap:
          name: {{ template "hollywood.fullname" . }}-images 
          items:
          - key: application.yaml 
            path: application-kubernetes.yaml
    {{- if .Values.images.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.images.nodeSelector | indent 8 }}
    {{- end }}
 

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "hollywood.fullname" . }}-actors
  labels:
    app: {{ template "hollywood.name" . }}-actors
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.actors.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ template "hollywood.name" . }}-actors
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.actors.image.repository }}:{{ .Values.actors.image.tag }}"
          imagePullPolicy: {{ .Values.actors.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.actors.service.internalPort }}
          livenessProbe:
            httpGet:
              path: /application/status
              port: {{ .Values.actors.service.internalPort }}
            initialDelaySeconds: 90
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /application/status
              port: {{ .Values.actors.service.internalPort }}
            initialDelaySeconds: 45
            periodSeconds: 15
            timeoutSeconds: 5
          env:
          - name: SPRING_PROFILES_ACTIVE
            value: kubernetes
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-mysql
                key: mysql-root-password
          volumeMounts:
          - name: application-config 
            mountPath: "/config" 
            readOnly: true
          resources:
{{ toYaml .Values.actors.resources | indent 12 }}
      volumes:
      - name: application-config
        configMap:
          name: {{ template "hollywood.fullname" . }}-actors 
          items:
          - key: application.yaml 
            path: application-kubernetes.yaml
    {{- if .Values.actors.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.actors.nodeSelector | indent 8 }}
    {{- end }}
 

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "hollywood.fullname" . }}-zipkin
  labels:
    app: {{ template "hollywood.name" . }}-zipkin
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.zipkin.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ template "hollywood.name" . }}-zipkin
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.zipkin.image.repository }}:{{ .Values.zipkin.image.tag }}"
          imagePullPolicy: {{ .Values.zipkin.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.zipkin.service.internalPort }}
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          resources:
{{ toYaml .Values.zipkin.resources | indent 12 }}
    {{- if .Values.zipkin.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.zipkin.nodeSelector | indent 8 }}
    {{- end }}
 

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ template "hollywood.fullname" . }}-prometheus
  labels:
    app: {{ template "hollywood.name" . }}
    component: prometheus
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.prometheus.service.type }}
  ports:
    - port: {{ .Values.prometheus.service.externalPort }}
      targetPort: {{ .Values.prometheus.service.internalPort }}
      protocol: TCP
      name: {{ .Values.prometheus.service.name }}
  selector:
    app: {{ template "hollywood.name" . }}
    component: prometheus
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "hollywood.fullname" . }}-gateway
  labels:
    app: {{ template "hollywood.name" . }}-gateway
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.gateway.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ template "hollywood.name" . }}-gateway
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.gateway.image.repository }}:{{ .Values.gateway.image.tag }}"
          imagePullPolicy: {{ .Values.gateway.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.gateway.service.internalPort }}
          livenessProbe:
            httpGet:
              path: /application/status
              port: {{ .Values.gateway.service.internalPort }}
            initialDelaySeconds: 90
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /application/status
              port: {{ .Values.gateway.service.internalPort }}
            initialDelaySeconds: 45
            periodSeconds: 15
            timeoutSeconds: 5
          env:
          - name: SPRING_PROFILES_ACTIVE
            value: kubernetes
          - name: SPRING_ZIPKIN_BASEURL
            value: http://{{ template "hollywood.fullname" . }}-zipkin:{{ .Values.zipkin.service.externalPort }}
          - name: ACTORS_SERVICE_URL
            value: http://{{ template "hollywood.fullname" . }}-actors/actors
          - name: IMAGES_SERVICE_URL
            value: http://{{ template "hollywood.fullname" . }}-images/images
          resources:
{{ toYaml .Values.gateway.resources | indent 12 }}
    {{- if .Values.gateway.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.gateway.nodeSelector | indent 8 }}
    {{- end }}
 

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  name: actors
  labels:
    app: actors
data:
  application.yaml: |-
    security:
      basic:
        enabled: false
    spring:
      datasource:
        url: jdbc:mysql://${MYSQL_SERVICE_HOST}:${MYSQL_SERVICE_PORT}/mysql
        username: root
        password: ${MYSQL_ROOT_PASSWORD}
        driverClassName: com.mysql.jdbc.Driver
        testOnBorrow: true
        validationQuery: "SELECT 1"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: Service
apiVersion: v1
metadata:
  name: actors
  labels:
    app: actors
spec:
  # If you are running k8s on a local dev box or using minikube, you can use type NodePort instead of LoadBalancer
  type: NodePort
  ports:
    - port: 80
  selector:
    app: actors
    

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: actors
  labels:
    app: actors
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: actors
    spec:
      containers:
      - name: actors
        image: trisberg/actors:0.0.1-SNAPSHOT
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: 1.0
            memory: 1024Mi
          requests:
            cpu: 0.5
            memory: 640Mi
        livenessProbe:
          httpGet:
            path: /application/status
            port: 80
          initialDelaySeconds: 90
          periodSeconds: 15
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /application/status
            port: 80
          initialDelaySeconds: 45
          periodSeconds: 15
          timeoutSeconds: 5
        env:
        - name: SERVER_PORT
          value: '80'
        - name: SPRING_PROFILES_ACTIVE
          value: kubernetes
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql
              key: mysql-root-password
        volumeMounts:
        - name: application-config 
          mountPath: "/config" 
          readOnly: true
      volumes:
      - name: application-config
        configMap:
          name: actors 
          items:
          - key: application.yaml 
            path: application-kubernetes.yaml


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: Service
apiVersion: v1
metadata:
  name: gateway
  labels:
    app: gateway
spec:
  # If you are running k8s on a local dev box or using minikube, you can use type NodePort instead of LoadBalancer
  type: NodePort
  ports:
    - port: 80
  selector:
    app: gateway


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: gateway
  labels:
    app: gateway
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: gateway
    spec:
      containers:
      - name: gateway
        image: trisberg/gateway:0.0.1-SNAPSHOT
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: 1.0
            memory: 1024Mi
          requests:
            cpu: 0.5
            memory: 640Mi
        livenessProbe:
          httpGet:
            path: /application/health
            port: 80
          initialDelaySeconds: 90
          periodSeconds: 15
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /application/health
            port: 80
          initialDelaySeconds: 45
          periodSeconds: 15
          timeoutSeconds: 5
        env:
        - name: SERVER_PORT
          value: '80'
        - name: SPRING_PROFILES_ACTIVE
          value: kubernetes


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: $POS_APP_NAME
  labels:
    app: node
spec:
  replicas: 1
  selector:
    matchLabels:
      app: node
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 33%
  template:
    metadata:
      labels:
        app: node
    spec:
      containers:
        - name: $POS_APP_NAME
          image: $DOCKER_REGISTRY/$POS_APP_NAME@$DOCKER_RELEASE_SHA
          imagePullPolicy: Always
          ports:
            - containerPort: $POS_APP_PORT
          livenessProbe:
            httpGet:
              path: /healthz
              port: $POS_APP_PORT
            initialDelaySeconds: 2
            periodSeconds: 2
          readinessProbe:
            httpGet:
              path: /healthz
              port: $POS_APP_PORT
            initialDelaySeconds: 2
            periodSeconds: 2
---
kind: Service
apiVersion: v1
metadata:
  name: $POS_APP_NAME-service
spec:
  selector:
    app: node
  ports:
    - port: $POS_APP_PORT # Default port for image
---    
kind: Ingress
apiVersion: extensions/v1beta1
metadata:
  name: test-ingress
spec:
  rules:
    - host: $SERVICE_HOST
      http:
        paths:
        - path: /
          backend:
            serviceName: $POS_APP_NAME-service
            servicePort: $POS_APP_PORT

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

image: borjatur/custom-gitlab-ci:latest
services:
- docker:18.09-dind

stages:
- build
- lint-test
- branch-build-clean
- master-clean-fail
- release
- deploy
- rollback

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375 #set to tcp://docker:2375/ non kubernetes executor
  POS_APP_NAME: node-sample
  POS_APP_PORT: 3000
  CONTAINER_TEST_IMAGE: $DOCKER_REGISTRY/$POS_APP_NAME:$CI_BUILD_REF
  CONTAINER_RELEASE_IMAGE: $DOCKER_REGISTRY/$POS_APP_NAME:production

before_script:
  - make ci-before-script

build:
  stage: build
  script:
    - make ci-container-build-image

lint-test:
  stage: lint-test
  script:
    - make ci-lint-test

branch-build-clean:
  stage: branch-build-clean
  except:
    - master
  script:
    - make ci-clean-image

master-clean-fail:
  stage: master-clean-fail
  only:
    - master
  when: on_failure
  script:
    - make ci-clean-image

release-image:
  stage: release
  only:
    - master
  script:
    - make ci-release-image

deploy-app:
  stage: deploy
  only:
    - master
  script:
    - make ci-deploy

rollback:
  stage: rollback
  when: manual
  only:
    - master
  script:
    - make ci-rollback



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: skaffold/v2alpha3
kind: Config
deploy:
  kubectl:
    manifests:
      - ./infra/k8s/*
build:
  local:
    push: false
  artifacts:
    - image: prakhartewari/client
      context: client
      docker:
        dockerfile: Dockerfile
      sync:
        manual:
          - src: "src/**/*.js"
            dest: .
    - image: prakhartewari/comments
      context: comments
      docker:
        dockerfile: Dockerfile
      sync:
        manual:
          - src: "*.js"
            dest: .
    - image: prakhartewari/event-bus
      context: event-bus
      docker:
        dockerfile: Dockerfile
      sync:
        manual:
          - src: "*.js"
            dest: .
    - image: prakhartewari/moderation
      context: moderation
      docker:
        dockerfile: Dockerfile
      sync:
        manual:
          - src: "*.js"
            dest: .
    - image: prakhartewari/posts
      context: posts
      docker:
        dockerfile: Dockerfile
      sync:
        manual:
          - src: "*.js"
            dest: .
    - image: prakhartewari/query
      context: query
      docker:
        dockerfile: Dockerfile
      sync:
        manual:
          - src: "*.js"
            dest: .


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: client-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: client
  template:
    metadata:
      labels:
        app: client
    spec:
      containers:
        - name: client
          image: prakhartewari/client:latest

---
apiVersion: v1
kind: Service
metadata:
  name: client-srv
spec:
  selector:
    app: client
  type: ClusterIP
  ports:
    - name: client
      protocol: TCP
      port: 3000
      targetPort: 3000


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ingress-srv
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  rules:
    - host: posts.com
      http:
        paths:
          - path: /posts/create
            backend:
              serviceName: posts-clusterip-srv
              servicePort: 4000
          - path: /posts
            backend:
              serviceName: query-srv
              servicePort: 4002
          - path: /posts/?(.*)/comments
            backend:
              serviceName: comments-srv
              servicePort: 4001
          - path: /?(.*)
            backend:
              serviceName: client-srv
              servicePort: 3000


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: query-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: query
  template:
    metadata:
      labels:
        app: query
    spec:
      containers:
        - name: query
          image: prakhartewari/query:latest

---
apiVersion: v1
kind: Service
metadata:
  name: query-srv
spec:
  selector:
    app: query
  type: ClusterIP
  ports:
    - name: query
      protocol: TCP
      port: 4002
      targetPort: 4002


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: comments-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: comments
  template:
    metadata:
      labels:
        app: comments
    spec:
      containers:
        - name: comments
          image: prakhartewari/comments:latest

---
apiVersion: v1
kind: Service
metadata:
  name: comments-srv
spec:
  selector:
    app: comments
  type: ClusterIP
  ports:
    - name: comments
      protocol: TCP
      port: 4001
      targetPort: 4001


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: event-bus-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: event-bus
  template:
    metadata:
      labels:
        app: event-bus
    spec:
      containers:
        - name: event-bus
          image: prakhartewari/event-bus:latest

---
apiVersion: v1
kind: Service
metadata:
  name: event-bus-srv
spec:
  selector:
    app: event-bus
  type: ClusterIP
  ports:
    - name: event-bus
      protocol: TCP
      port: 4005
      targetPort: 4005


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: posts-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: posts
  template:
    metadata:
      labels:
        app: posts
    spec:
      containers:
        - name: posts
          image: prakhartewari/posts:latest

---
apiVersion: v1
kind: Service
metadata:
  name: posts-clusterip-srv
spec:
  selector:
    app: posts
  type: ClusterIP
  ports:
    - name: posts
      protocol: TCP
      port: 4000
      targetPort: 4000


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: posts-srv
spec:
  type: NodePort
  selector:
    app: posts
  ports:
    - name: posts
      protocol: TCP
      port: 4000
      targetPort: 4000


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: moderation-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: moderation
  template:
    metadata:
      labels:
        app: moderation
    spec:
      containers:
        - name: moderation
          image: prakhartewari/moderation:latest

---
apiVersion: v1
kind: Service
metadata:
  name: moderation-srv
spec:
  selector:
    app: moderation
  type: ClusterIP
  ports:
    - name: moderation
      protocol: TCP
      port: 4003
      targetPort: 4003


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

---
spring:
  application:
    name: eurekaserver

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

---
# This default profile is used when running a single instance completely standalone:
spring:
  profiles: default
server:
  port: 8010
eureka:
  instance:
    hostname: localhost  
  client:
    registerWithEureka: false
    fetchRegistry: false
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/    
      

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# Properties active for ALL profiles:
---
spring:
  application:
    name: conversionfactor
  cloud:
    config:
      uri: http://localhost:8001  # Expect the Spring Cloud Config server to be running on localhost, port 8001.   
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8010/eureka/

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# Properties active for ALL profiles:
---
spring:
  cloud:
    config:
      uri: http://localhost:8001	# Expect the Spring Cloud Config server to be running on localhost, port 8001.  
 
  application:
    name: Convert_Currency

server:
  port: ${PORT:${SERVER_PORT:0}}   # Select any available port if neither port nor server port are specified.

# Allow Eureka to recognize two apps of the same type on the same host as separate instances:
eureka:
  instance:
    instanceId: ${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id:${random.value}}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

---
spring:
  cloud:
    config:
      server:
        git:
          uri: https://github.com/kennyk65/Microservices-With-Spring-Student-Files
          searchPaths: ConfigData
        # "native" is used when the native profile is active, for local tests with a classpath repo:
        native:
          searchLocations: classpath:offline-repository/
server:
  port: 8001

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

﻿



# THIS FILE IS AUTOGENERATED BY A TOOL
# IF YOU EDIT IT ANY CHANGES YOU MAKE WILL BE LOST

# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

resources:
- repo: self
  
trigger:
  branches:
    include:
    - master
    - develop
    - features/*
  paths:
    include:
    - MicroserviceSolution/DaprActorTemplate/*
    exclude:
    - README.md
  
stages:
- stage: Build
  displayName: Build stage

  jobs:  
  - job: Build
    variables:
    - group: 'Microservices Pipeline variables-devtest'
    displayName: Build job
    pool:
      vmImage: 'ubuntu-latest'

 

    steps:     
      
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $daprAppName$
        dockerfile: '**/DaprActorTemplate/Dockerfile'
        containerRegistry: $(dockerRegistryServiceConnection)
        buildContext: './MicroserviceSolution/DaprActorTemplate'
        tags: |
          $(tag) 
       
    - task: PublishPipelineArtifact@0
      inputs:
        targetPath: MicroserviceSolution/DaprActorTemplate/deploy

- stage: TagAsLatest
  displayName: TagAsLatest
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:  
  - job: TagAsLatest
    displayName: TagAsLatest
    pool:
      vmImage: 'ubuntu-latest'
    steps:            
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          docker login adlacrdev.azurecr.io -u <Fill in registryUser Here> -p <Fill in Password Here>
          docker pull adlacrdev.azurecr.io/$daprAppName$:$(tag)
          docker tag adlacrdev.azurecr.io/$daprAppName$:$(tag) adlacrdev.azurecr.io/$daprAppName$:latest
          docker push adlacrdev.azurecr.io/$daprAppName$:latest
          
  

- stage: DeployToDev
  displayName: Deploy to Dev
  dependsOn: Build
  jobs:
  - deployment: Deploy
    variables:
    - group: 'Microservices Pipeline variables-devtest'
    displayName: Deploying to Development
    pool:
      name: 'PHP and Brandsites POOL'
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:              
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection) 
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              manifests: |
                $(Pipeline.Workspace)/drop/deployDev.yaml 
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$daprAppName$:$(tag)


- stage: DeployToProd
  displayName: Deploy to prod
  dependsOn: TagAsLatest
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: Deploy
    variables:
    - group: 'Microservices Pipeline variables-prod'
    displayName: Deploying to Production
    pool:
      name: 'PHP and Brandsites POOL'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
              
          
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection) 
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              manifests: |
                $(Pipeline.Workspace)/drop/deployProd.yaml  
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$daprAppName$:latest




========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

﻿# THIS FILE IS AUTOGENERATED BY A TOOL
# IF YOU EDIT IT ANY CHANGES YOU MAKE WILL BE LOST

apiVersion: apps/v1
kind: Deployment
metadata:
  name: $daprAppName$app
  labels:
    app: $daprAppName$
spec:
  replicas: 1
  selector:
    matchLabels:
      app: $daprAppName$
  template:
    metadata:
      labels:
        app: $daprAppName$
      annotations:
        dapr.io/enabled: "true"
        dapr.io/id: "$daprAppName$"
        dapr.io/port: "3000" 
        prometheus.io/scrape: 'true'
        prometheus.io/port:   '9090'
    spec:
      containers:
      - name: $daprAppName$app
        image: adlacrdev.azurecr.io/$daprAppName$:$(tag)
        ports:
        - containerPort: 3000
        imagePullPolicy: Always
        env:
        - name: "ASPNETCORE_ENVIRONMENT"
          value: "Development"



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

﻿# THIS FILE IS AUTOGENERATED BY A TOOL
# IF YOU EDIT IT ANY CHANGES YOU MAKE WILL BE LOST

apiVersion: apps/v1
kind: Deployment
metadata:
  name: $daprAppName$app
  labels:
    app: $daprAppName$
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: $daprAppName$
  template:
    metadata:
      labels:
        app: $daprAppName$
      annotations:
        dapr.io/enabled: "true"
        dapr.io/id: "$daprAppName$"
        dapr.io/port: "3000" 
        prometheus.io/scrape: 'true'
        prometheus.io/port:   '9090'
    spec:
      containers:
      - name: $daprAppName$app
        image: localhost:32000/$daprAppName$:registry
        ports:
        - containerPort: 3000
        imagePullPolicy: Always
        env:
        - name: "ASPNETCORE_ENVIRONMENT"
          value: "Development"



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

﻿
// Generated helper templates
// Generated items
// C:\IgnDev\opensourceContrib\DaprActorTemplate\deploy\deployDev.yaml
// C:\IgnDev\opensourceContrib\DaprActorTemplate\deploy\deployProd.yaml
// C:\IgnDev\opensourceContrib\DaprActorTemplate\deploy\deployLocal.yaml
// C:\IgnDev\opensourceContrib\DaprActorTemplate\deploy\deployLocalFromAcr.yaml




========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

﻿# THIS FILE IS AUTOGENERATED BY A TOOL
# IF YOU EDIT IT ANY CHANGES YOU MAKE WILL BE LOST

apiVersion: apps/v1
kind: Deployment
metadata:
  name: $daprAppName$app
  labels:
    app: $daprAppName$
spec:
  replicas: 1
  selector:
    matchLabels:
      app: $daprAppName$
  template:
    metadata:
      labels:
        app: $daprAppName$
      annotations:
        dapr.io/enabled: "true"
        dapr.io/id: "$daprAppName$"
        dapr.io/port: "3000" 
        prometheus.io/scrape: 'true'
        prometheus.io/port:   '9090'
    spec:
      containers:
      - name: $daprAppName$app
        image: adlacrdev.azurecr.io/$daprAppName$:latest
        ports:
        - containerPort: 3000
        imagePullPolicy: Always
        env:
        - name: "ASPNETCORE_ENVIRONMENT"
          value: "Production"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

﻿# THIS FILE IS AUTOGENERATED BY A TOOL
# IF YOU EDIT IT ANY CHANGES YOU MAKE WILL BE LOST

apiVersion: apps/v1
kind: Deployment
metadata:
  name: $daprAppName$app
  labels:
    app: $daprAppName$
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: $daprAppName$
  template:
    metadata:
      labels:
        app: $daprAppName$
      annotations:
        dapr.io/enabled: "true"
        dapr.io/id: "$daprAppName$"
        dapr.io/port: "3000" 
        prometheus.io/scrape: 'true'
        prometheus.io/port:   '9090'
    spec:
      containers:
      - name: $daprAppName$app
        image: adlacrdev.azurecr.io/$daprAppName$:latest
        ports:
        - containerPort: 3000
        imagePullPolicy: Always
        env:
        - name: "ASPNETCORE_ENVIRONMENT"
          value: "Development"
      imagePullSecrets:
      - name: regcred


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: dapr.io/v1alpha1
kind: Component
metadata:
  name: messagebus
spec:
  type: pubsub.redis
  metadata:
  - name: redisHost
    value: redis-master:6379
  - name: redisPassword
    value: ma5phKuBtC


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: dapr.io/v1alpha1
kind: Component
metadata:
  name: statestore
spec:
  type: state.redis
  metadata:
  - name: redisHost
    value: redis-master:6379
  - name: redisPassword
    value: ma5phKuBtC


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

﻿



# THIS FILE IS AUTOGENERATED BY A TOOL
# IF YOU EDIT IT ANY CHANGES YOU MAKE WILL BE LOST

# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

resources:
- repo: self
  
trigger:
  branches:
    include:
    - master
    - develop
    - features/*
  paths:
    include:
    - MicroserviceSolution/DaprMicroserviceTemplate/*
    exclude:
    - README.md
  
stages:
- stage: Build
  displayName: Build stage

  jobs:  
  - job: Build
    variables:
    - group: 'Microservices Pipeline variables-devtest'
    displayName: Build job
    pool:
      vmImage: 'ubuntu-latest'

 

    steps:     
      
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $daprAppName$
        dockerfile: '**/DaprMicroserviceTemplate/Dockerfile'
        containerRegistry: $(dockerRegistryServiceConnection)
        buildContext: './MicroserviceSolution/DaprMicroserviceTemplate'
        tags: |
          $(tag) 
       
    - task: PublishPipelineArtifact@0
      inputs:
        targetPath: MicroserviceSolution/DaprMicroserviceTemplate/deploy

- stage: TagAsLatest
  displayName: TagAsLatest
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:  
  - job: TagAsLatest
    displayName: TagAsLatest
    pool:
      vmImage: 'ubuntu-latest'
    steps:            
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          docker login adlacrdev.azurecr.io -u <Fill in registryUser Here> -p <Fill in Password Here>
          docker pull adlacrdev.azurecr.io/$daprAppName$:$(tag)
          docker tag adlacrdev.azurecr.io/$daprAppName$:$(tag) adlacrdev.azurecr.io/$daprAppName$:latest
          docker push adlacrdev.azurecr.io/$daprAppName$:latest
          
  

- stage: DeployToDev
  displayName: Deploy to Dev
  dependsOn: Build
  jobs:
  - deployment: Deploy
    variables:
    - group: 'Microservices Pipeline variables-devtest'
    displayName: Deploying to Development
    pool:
      name: 'PHP and Brandsites POOL'
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:              
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection) 
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              manifests: |
                $(Pipeline.Workspace)/drop/deployDev.yaml 
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$daprAppName$:$(tag)


- stage: DeployToProd
  displayName: Deploy to prod
  dependsOn: TagAsLatest
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: Deploy
    variables:
    - group: 'Microservices Pipeline variables-prod'
    displayName: Deploying to Production
    pool:
      name: 'PHP and Brandsites POOL'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
              
          
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection) 
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              manifests: |
                $(Pipeline.Workspace)/drop/deployProd.yaml  
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$daprAppName$:latest




========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

﻿# THIS FILE IS AUTOGENERATED BY A TOOL
# IF YOU EDIT IT ANY CHANGES YOU MAKE WILL BE LOST

apiVersion: apps/v1
kind: Deployment
metadata:
  name: $daprAppName$app
  labels:
    app: $daprAppName$
spec:
  replicas: 1
  selector:
    matchLabels:
      app: $daprAppName$
  template:
    metadata:
      labels:
        app: $daprAppName$
      annotations:
        dapr.io/enabled: "true"
        dapr.io/id: "$daprAppName$"
        dapr.io/port: "3000" 
        prometheus.io/scrape: 'true'
        prometheus.io/port:   '9090'
    spec:
      containers:
      - name: $daprAppName$app
        image: adlacrdev.azurecr.io/$daprAppName$:$(tag)
        ports:
        - containerPort: 3000
        imagePullPolicy: Always
        env:
        - name: "ASPNETCORE_ENVIRONMENT"
          value: "Development"



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

﻿# THIS FILE IS AUTOGENERATED BY A TOOL
# IF YOU EDIT IT ANY CHANGES YOU MAKE WILL BE LOST

apiVersion: apps/v1
kind: Deployment
metadata:
  name: $daprAppName$app
  labels:
    app: $daprAppName$
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: $daprAppName$
  template:
    metadata:
      labels:
        app: $daprAppName$
      annotations:
        dapr.io/enabled: "true"
        dapr.io/id: "$daprAppName$"
        dapr.io/port: "3000" 
        prometheus.io/scrape: 'true'
        prometheus.io/port:   '9090'
    spec:
      containers:
      - name: $daprAppName$app
        image: localhost:32000/$daprAppName$:registry
        ports:
        - containerPort: 3000
        imagePullPolicy: Always
        env:
        - name: "ASPNETCORE_ENVIRONMENT"
          value: "Development"



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

﻿
// Generated helper templates
// Generated items
// C:\IgnDev\opensourceContrib\DaprMicroserviceTemplate\deploy\deployDev.yaml
// C:\IgnDev\opensourceContrib\DaprMicroserviceTemplate\deploy\deployProd.yaml
// C:\IgnDev\opensourceContrib\DaprMicroserviceTemplate\deploy\deployLocal.yaml
// C:\IgnDev\opensourceContrib\DaprMicroserviceTemplate\deploy\deployLocalFromAcr.yaml




========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

﻿# THIS FILE IS AUTOGENERATED BY A TOOL
# IF YOU EDIT IT ANY CHANGES YOU MAKE WILL BE LOST

apiVersion: apps/v1
kind: Deployment
metadata:
  name: $daprAppName$app
  labels:
    app: $daprAppName$
spec:
  replicas: 1
  selector:
    matchLabels:
      app: $daprAppName$
  template:
    metadata:
      labels:
        app: $daprAppName$
      annotations:
        dapr.io/enabled: "true"
        dapr.io/id: "$daprAppName$"
        dapr.io/port: "3000" 
        prometheus.io/scrape: 'true'
        prometheus.io/port:   '9090'
    spec:
      containers:
      - name: $daprAppName$app
        image: adlacrdev.azurecr.io/$daprAppName$:latest
        ports:
        - containerPort: 3000
        imagePullPolicy: Always
        env:
        - name: "ASPNETCORE_ENVIRONMENT"
          value: "Production"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

﻿# THIS FILE IS AUTOGENERATED BY A TOOL
# IF YOU EDIT IT ANY CHANGES YOU MAKE WILL BE LOST

apiVersion: apps/v1
kind: Deployment
metadata:
  name: $daprAppName$app
  labels:
    app: $daprAppName$
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: $daprAppName$
  template:
    metadata:
      labels:
        app: $daprAppName$
      annotations:
        dapr.io/enabled: "true"
        dapr.io/id: "$daprAppName$"
        dapr.io/port: "3000" 
        prometheus.io/scrape: 'true'
        prometheus.io/port:   '9090'
    spec:
      containers:
      - name: $daprAppName$app
        image: adlacrdev.azurecr.io/$daprAppName$:latest
        ports:
        - containerPort: 3000
        imagePullPolicy: Always
        env:
        - name: "ASPNETCORE_ENVIRONMENT"
          value: "Development"
      imagePullSecrets:
      - name: regcred


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

name: .NET Core

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101
    - name: Build DaprMicroserviceTemplate with dotnet core
      run: dotnet build DaprMicroserviceTemplate/DaprMicroserviceTemplate.csproj --configuration Release
    - name: Build DaprActorTemplate with dotnet core
      run: dotnet build DaprActorTemplate/DaprActorTemplate.csproj --configuration Release


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: simple-k8s-client
spec:
  replicas: 1
  template:
    metadata:
      labels:
        io.kompose.service: simple-k8s-client
    spec:
      containers:
      - name: simple-k8s-client
        image: "simple-k8s-client:1.0.1"
        env:
        - name: SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: simple-k8s-config
              key: service.url

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: simple-k8s-server
  name: simple-k8s-server
spec:
  # use NodePort here to be able to access a port on each node
  type: NodePort
  ports:
  - port: 9090
  selector:
    io.kompose.service: simple-k8s-server



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: simple-k8s-server
spec:
  replicas: 2
  template:
    metadata:
      labels:
        io.kompose.service: simple-k8s-server
    spec:
      containers:
      - name: simple-k8s-server
        image: "simple-k8s-server:1.0.1"
        ports:
        - containerPort: 9090
        env:
        - name: PORT
          value: "9090"

        readinessProbe:
          httpGet:
            path: /info
            port: 9090
          initialDelaySeconds: 5
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /info
            port: 9090
          initialDelaySeconds: 10
          timeoutSeconds: 5

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  name: simple-k8s-config
  namespace: default
data:
  service.url: "http://simple-k8s-server:9090/info"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: gin-microservice
  labels:
    app: gin-microservice
    tier: frontend
spec:
  backend:
    serviceName: gin-microservice
    servicePort: 9090

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: gin-microservice
  labels:
    app: gin-microservice
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: gin-microservice
        tier: service
    spec:
      # for faster SIGKILL shutdown
      terminationGracePeriodSeconds: 5
      containers:
      - name: gin-microservice
        image: "gaurawesome/gin-microservice:1.0.1"
        ports:
        - containerPort: 9090
        env:
        - name: PORT
          value: "9090"
        
        # define resource requests and limits
        resources:
          requests:
            memory: "64Mi"
            cpu: "125m"
          limits:
            memory: "128Mi"
            cpu: "250m"

        
        
        # check of gin-microservice is alive and healthy
        readinessProbe:
          httpGet:
            path: /ping
            port: 9090
          initialDelaySeconds: 5
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /ping
            port: 9090
          initialDelaySeconds: 5
          timeoutSeconds: 5       
        

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: gin-microservice
  labels:
    app: gin-microservice
    tier: service
spec:
  # use NodePort here to be able to access a port on each node
  type: NodePort
  ports:
  - port: 9090
  selector:
    app: gin-microservice

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart to deploy a simple Spring application architectured as microservice
name: spring-k8s-demo
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# Default values for spring-k8s-demo.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


general:
  ingress: spring-demo.remi-pace.fr
  profile: dev
  microcomm:
    context: k8sdemo

nats:
  replicaCount: 1
  image:
    repository: nats
    tag: 1.1.0-linux
    pullPolicy: IfNotPresent


mongodb:
  replicaCount: 1
  image:
    repository: mvertes/alpine-mongo
    tag: 3.6.4-2
    pullPolicy: IfNotPresent


signatureService:
  replicaCount: 2
  image:
    repository: registry.gitlab.com/remipassmoilesel/spring-k8s-demo/signature-service
    tag: 0.1
    pullPolicy: Always


gateway:
  replicaCount: 2
  image:
    repository: registry.gitlab.com/remipassmoilesel/spring-k8s-demo/gateway
    tag: 0.1
    pullPolicy: Always



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: gateway-{{ template "spring-k8s-demo.fullname" . }}
  labels:
    app: gateway-{{ template "spring-k8s-demo.name" . }}
    chart: {{ template "spring-k8s-demo.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: gateway-{{ template "spring-k8s-demo.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
    name: mongodb-{{ template "spring-k8s-demo.fullname" . }}
    labels:
        app: mongodb-{{ template "spring-k8s-demo.name" . }}
        chart: {{ template "spring-k8s-demo.chart" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
spec:
    type: ClusterIP
    ports:
        - port: 27017
          targetPort: mongodb
          protocol: TCP
          name: mongodb
    selector:
        app: mongodb-{{ template "spring-k8s-demo.name" . }}
        release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: gateway-{{ template "spring-k8s-demo.fullname" . }}
  labels:
    app: gateway-{{ template "spring-k8s-demo.fullname" . }}
spec:
  rules:
    - host: {{ .Values.general.ingress }}
      http:
        paths:
          - backend:
              serviceName: gateway-{{ template "spring-k8s-demo.fullname" . }}
              servicePort: 8080



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
    name: mongodb-{{ template "spring-k8s-demo.fullname" . }}
    labels:
        app: mongodb-{{ template "spring-k8s-demo.name" . }}
        chart: {{ template "spring-k8s-demo.chart" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
spec:
    replicas: {{ .Values.nats.replicaCount }}
    selector:
        matchLabels:
            app: mongodb-{{ template "spring-k8s-demo.name" . }}
            release: {{ .Release.Name }}
    template:
        metadata:
            labels:
                app: mongodb-{{ template "spring-k8s-demo.name" . }}
                release: {{ .Release.Name }}
        spec:
            containers:
                - name: {{ .Chart.Name }}
                  image: "{{ .Values.mongodb.image.repository }}:{{ .Values.mongodb.image.tag }}"
                  imagePullPolicy: {{ .Values.mongodb.image.pullPolicy }}
                  ports:
                      - name: mongodb
                        containerPort: 27017
                        protocol: TCP
                  livenessProbe:
                      tcpSocket:
                          port: 27017
                      initialDelaySeconds: 5
                      periodSeconds: 5
                  readinessProbe:
                      tcpSocket:
                          port: 27017
                      initialDelaySeconds: 5
                      periodSeconds: 5


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: signature-service-{{ template "spring-k8s-demo.fullname" . }}
  labels:
    app: signature-service-{{ template "spring-k8s-demo.name" . }}
    chart: {{ template "spring-k8s-demo.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: signature-service-{{ template "spring-k8s-demo.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: nats-{{ template "spring-k8s-demo.fullname" . }}
  labels:
    app: nats-{{ template "spring-k8s-demo.name" . }}
    chart: {{ template "spring-k8s-demo.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: ClusterIP
  ports:
    - port: 4222
      targetPort: nats
      protocol: TCP
      name: nats
  selector:
    app: nats-{{ template "spring-k8s-demo.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: nats-{{ template "spring-k8s-demo.fullname" . }}
  labels:
    app: nats-{{ template "spring-k8s-demo.name" . }}
    chart: {{ template "spring-k8s-demo.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.nats.replicaCount }}
  selector:
    matchLabels:
      app: nats-{{ template "spring-k8s-demo.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: nats-{{ template "spring-k8s-demo.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.nats.image.repository }}:{{ .Values.nats.image.tag }}"
          imagePullPolicy: {{ .Values.nats.image.pullPolicy }}
          ports:
            - name: nats
              containerPort: 4222
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: nats
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            tcpSocket:
              port: nats
            initialDelaySeconds: 5
            periodSeconds: 5


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: signature-service-{{ template "spring-k8s-demo.fullname" . }}
  labels:
    app: signature-service-{{ template "spring-k8s-demo.name" . }}
    chart: {{ template "spring-k8s-demo.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.signatureService.replicaCount }}
  selector:
    matchLabels:
      app: signature-service-{{ template "spring-k8s-demo.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: signature-service-{{ template "spring-k8s-demo.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.signatureService.image.repository }}:{{ .Values.signatureService.image.tag }}"
          imagePullPolicy: {{ .Values.signatureService.image.pullPolicy }}
          env:
          - name: SIGNATURE_SERV_ACTIVE_PROFILE
            value: {{ .Values.general.profile }}
          - name: SKD_SIGNATURE_SERV_DB_URI
            value: mongodb://mongodb-{{ template "spring-k8s-demo.name" . }}:27017
          - name: SKD_MICROCOMM_CONTEXT
            value: {{ .Values.general.microcomm.context }}
          - name: SKD_MICROCOMM_NATS_URL
            value: nats://nats-{{ template "spring-k8s-demo.fullname" . }}:4222
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 5
      imagePullSecrets:
      - name: registry-secret


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: gateway-{{ template "spring-k8s-demo.fullname" . }}
  labels:
    app: gateway-{{ template "spring-k8s-demo.name" . }}
    chart: {{ template "spring-k8s-demo.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.gateway.replicaCount }}
  selector:
    matchLabels:
      app: gateway-{{ template "spring-k8s-demo.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: gateway-{{ template "spring-k8s-demo.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.gateway.image.repository }}:{{ .Values.gateway.image.tag }}"
          imagePullPolicy: {{ .Values.gateway.image.pullPolicy }}
          env:
          - name: SKD_GATEWAY_ACTIVE_PROFILE
            value: {{ .Values.general.profile }}
          - name: SKD_MICROCOMM_CONTEXT
            value: {{ .Values.general.microcomm.context }}
          - name: SKD_MICROCOMM_NATS_URL
            value: nats://nats-{{ template "spring-k8s-demo.fullname" . }}:4222
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
      imagePullSecrets:
      - name: registry-secret


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: python:3.7.3-stretch
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/udacity-project5-ml-microservice-kubernetes

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Pod
metadata:
  name: worker-app-pod
  labels:
    name: worker-app-pod
    app: demo-voting-app

spec:
  containers:
    - name: worker-app
      image: dockersamples/examplevotingapp_worker

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: voting-service
  labels:
    name: voting-service
    app: demo-voting-app

spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
  selector:
    name: voting-app-pod
    app: demo-voting-app




========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Pod
metadata:
  name: postgres-pod
  labels:
    name: postgres-pod
    app: demo-voting-app

spec:
  containers:
    - name: postgres
      image: postgres:9.4
      ports:
       - containerPort: 5432

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: result-service
  labels:
    name: result-service
    app: demo-voting-app

spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
  selector:
    name: result-app-pod
    app: demo-voting-app



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    name: redis-service
    app: demo-voting-app

spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    name: redis-pod
    app: demo-voting-app




========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Pod
metadata:
  name: voting-app-pod
  labels:
    name: voting-app-pod
    app: demo-voting-app

spec:
  containers:
    - name: voting-app
      image: dockersamples/examplevotingapp_vote
      ports:
       - containerPort: 80

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Pod
metadata:
  name: redis-pod
  labels:
    name: redis-pod
    app: demo-voting-app

spec:
  containers:
    - name: redis
      image: redis
      ports:
       - containerPort: 6379

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Pod
metadata:
  name: result-app-pod
  labels:
    name: result-app-pod
    app: demo-voting-app

spec:
  containers:
    - name: result-app
      image: dockersamples/examplevotingapp_result
      ports:
        - containerPort: 80

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: db
  labels:
    name: db-service
    app: demo-voting-app

spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    name: postgres-pod
    app: demo-voting-app




========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# bookshelfservice-deployment
apiVersion: apps/v1
kind: Deployment
metadata: 
  name: bookshelfservice-deployment
  namespace: bookshelf-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app: bookshelfservice
  minReadySeconds: 30
  progressDeadlineSeconds: 600
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 50%
  template:
    metadata:
      labels:
        app: bookshelfservice
        version: v1
    spec:
      containers:
      - name: bookshelfservice
        image: example/bookshelfservice:0.0.1
        env:
        - name: JAVA_OPTS
          value: -Dspring.profiles.active=k8s
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health_check
            port: 8080
          initialDelaySeconds: 120
          timeoutSeconds: 5
          periodSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health_check
            port: 8080
          initialDelaySeconds: 120
          timeoutSeconds: 5
          periodSeconds: 10
          failureThreshold: 3
        resources:
          limits:
            memory: "256Mi"
          requests:
            memory: "128Mi"
---
# bookshelfservice-service
apiVersion: v1
kind: Service
metadata:
  labels:
    app: bookshelfservice
  name: bookshelfservice
  namespace: bookshelf-system
spec:
  ports:
  - port: 80
    name: http
    targetPort: 8080
  - port: 443
    name: https
    targetPort: 8080
  - port: 6565
    name: grpc
    targetPort: 6565
  selector:
    app: bookshelfservice
  sessionAffinity: None
  type: ClusterIP


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# frontendservice-deployment
apiVersion: apps/v1
kind: Deployment
metadata: 
  name: frontend-deployment
  namespace: bookshelf-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  minReadySeconds: 30
  progressDeadlineSeconds: 600
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 50%
  template:
    metadata:
      labels:
        app: frontend
        version: v1
    spec:
      containers:
      - name: frontend
        image: example/frontend:0.0.5
        env:
        - name: JAVA_OPTS
          value: -Dspring.profiles.active=k8s
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health_check
            port: 8080
          initialDelaySeconds: 120
          timeoutSeconds: 5
          periodSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health_check
            port: 8080
          initialDelaySeconds: 120
          timeoutSeconds: 5
          periodSeconds: 10
          failureThreshold: 3
        resources:
          limits:
            memory: "256Mi"
          requests:
            memory: "128Mi"
---
# frontendservice-service
apiVersion: v1
kind: Service
metadata:
  labels:
    app: frontend
  name: frontend
  namespace: bookshelf-system
spec:
  ports:
  - port: 80
    name: http
    targetPort: 8080
  - port: 443
    name: https
    targetPort: 8080
  selector:
    app: frontend
  sessionAffinity: None
  type: ClusterIP
---
# frontendservice-ingress
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: frontend-ingress
  namespace: bookshelf-system
spec:
  backend:
    serviceName: frontend
    servicePort: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# bookservice-deployment
apiVersion: apps/v1
kind: Deployment
metadata: 
  name: bookservice-deployment
  namespace: bookshelf-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app: bookservice
  minReadySeconds: 30
  progressDeadlineSeconds: 600
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 50%
  template:
    metadata:
      labels:
        app: bookservice
        version: v1
    spec:
      containers:
      - name: bookservice
        image: example/bookservice:0.0.4
        env:
        - name: JAVA_OPTS
          value: -Dspring.profiles.active=k8s
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health_check
            port: 8080
          initialDelaySeconds: 120
          timeoutSeconds: 5
          periodSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health_check
            port: 8080
          initialDelaySeconds: 120
          timeoutSeconds: 5
          periodSeconds: 10
          failureThreshold: 3
        resources:
          limits:
            memory: "256Mi"
          requests:
            memory: "128Mi"
---
# bookservice-service
apiVersion: v1
kind: Service
metadata:
  labels:
    app: bookservice
  name: bookservice
  namespace: bookshelf-system
spec:
  ports:
  - port: 80
    name: http
    targetPort: 8080
  - port: 443
    name: https
    targetPort: 8080
  - port: 6565
    name: grpc
    targetPort: 6565
  selector:
    app: bookservice
  sessionAffinity: None
  type: ClusterIP


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# database deployment
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: book-db-deployment
  namespace: bookshelf-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: book-db
    spec:
      containers:
        - name: book-db
          image: postgres:9.6.2
          env:
            - name: POSTGRES_USER
              value: user
            - name: POSTGRES_PASSWORD
              value: password
            - name: POSTGRES_DB
              value: book
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql
              name: book-db-data
          resources:
            limits:
              memory: "512Mi"
            requests:
              memory: "256Mi"
      restartPolicy: Always
      volumes:
        - name: book-db-data
          emptyDir: {}
---
# database service
apiVersion: v1
kind: Service
metadata:
  name: book-db
  namespace: bookshelf-system
spec:
  selector:
    app: book-db
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
# database deployment
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: bookshelf-db-deployment
  namespace: bookshelf-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: bookshelf-db
    spec:
      containers:
        - name: bookshelf-db
          image: postgres:9.6.2
          env:
            - name: POSTGRES_USER
              value: user
            - name: POSTGRES_PASSWORD
              value: password
            - name: POSTGRES_DB
              value: bookshelf
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql
              name: bookshelf-db-data
          resources:
            limits:
              memory: "512Mi"
            requests:
              memory: "256Mi"
      restartPolicy: Always
      volumes:
        - name: bookshelf-db-data
          emptyDir: {}
---
# database service
apiVersion: v1
kind: Service
metadata:
  name: bookshelf-db
  namespace: bookshelf-system
spec:
  selector:
    app: bookshelf-db
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  profiles:
    active: dev

---
spring:
  profiles: dev
grpc:
  book:
    hostname: localhost
    port: 6565
  bookshelf:
    hostname: localhost
    port: 6566

---
spring:
  profiles: k8s
grpc:
  book:
    hostname: bookservice.bookshelf-system
    port: 6565
  bookshelf:
    hostname: bookshelfservice.bookshelf-system
    port: 6565


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  profiles:
    active: dev

---
spring:
  profiles: dev
  datasource:
    url: jdbc:h2:mem:test;MODE=PostgreSQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password:
    driverClassName: org.h2.Driver
server.port: 8090

---
spring:
  profiles: k8s
  datasource:
    url: jdbc:postgresql://book-db.bookshelf-system:5432/book
    username: user
    password: password
    driverClassName: org.postgresql.Driver


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  profiles:
    active: dev

---
spring:
  profiles: dev
  datasource:
    url: jdbc:h2:mem:test;MODE=PostgreSQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password:
    driverClassName: org.h2.Driver
server.port: 8091
grpc.port: 6566

---
spring:
  profiles: k8s
  datasource:
    url: jdbc:postgresql://bookshelf-db.bookshelf-system:5432/bookshelf
    username: user
    password: password
    driverClassName: org.postgresql.Driver


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: skaffold/v2beta7
kind: Config
metadata:
  name: microservice-k-s-polyglot
build:
  artifacts:
  - image: gcr.io/kubernetes-e2e-test-images/dnsutils
    context: src/adservice
  - image: strapi/strapi
    context: src/angular
  - image: tibinlukose/ads-app
    context: src/java-apps/gateway
  - image: tibinlukose/front-end
    context: src/java-apps/news
  - image: tibinlukose/gateway-app
    context: src/java-apps/product-availbaility
  - image: tibinlukose/news-app
    context: src/kafka-producer
  - image: tibinlukose/oms
    context: src/oms
  - image: tibinlukose/product-availability
    context: src/strapi_cms/Docker
    docker:
      dockerfile: dockerfile
  - image: tibinlukose/weather
    context: src/weather
deploy:
  kubectl:
    manifests:
    - k8/ads.yaml
    - k8/dnsUpstream.yaml
    - k8/dnsutils.yaml
    - k8/front-end.yaml
    - k8/gateway.yaml
    - k8/newsservice.yaml
    - k8/oms.yaml
    - k8/strapi.yaml
    - k8/weather.yaml
    - src/java-apps/gateway/gateway.yaml
    - src/java-apps/product-availbaility/product-availbility.yaml


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: front-end
  namespace: demo-app
spec:
  selector:
    matchLabels:
      app: front-end
  template:
    metadata:
      labels:
        app: front-end
    spec:
      containers:
        - name: front-end
          env:
            - name: PROFILE
              value: prod
          image: tibinlukose/front-end:v.1.5
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: front-end
  namespace: demo-app
spec:
  type: ClusterIP
  selector:
    app: front-end
  ports:
    - name: front-end-port
      port: 80
      protocol: TCP
      targetPort: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: microservice-demo
  namespace: demo-app
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: gatewayservice
          servicePort: 80
        path: /v1(/|$)(.*)
      - backend:
          serviceName: front-end
          servicePort: 80
        path: /(.*)

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: ads-app
  name: ads-app
  namespace: demo-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ads-app
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: ads-app
    spec:
      containers:
      - image: tibinlukose/ads-app:v.1.0
        name: ads-app
        ports:
          - containerPort: 5000
        resources: {}
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: ads-app-svc
  name: ads-app-svc
  namespace: demo-app
spec:
  type: ClusterIP
  selector:
    app: ads-app
  ports:
    - port: 80
      targetPort: 5000
      name: news-port


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# apiVersion: v1
# kind: Pod
# metadata:
#   name: dnsutils
#   namespace: default
# spec:
#   containers:
#   - name: dnsutils
#     image: gcr.io/kubernetes-e2e-test-images/dnsutils:1.3
#     command:
#       - sleep
#       - "3600"
#     imagePullPolicy: IfNotPresent
#   restartPolicy: Always


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: strapi-pvc
  namespace: demo-app
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: managed-premium
  resources:
    requests:
      storage: 5Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: strapi
  namespace: demo-app
spec:
  selector:
    matchLabels:
      app: strapi
  template:
    metadata:
      labels:
        app: strapi
    spec:
      containers:
        - name: strapi
          image: strapi/strapi
          ports:
            - containerPort: 1337
          volumeMounts:
            - mountPath: "/srv/app"
              name: strapi
      volumes:
        - name: strapi
          persistentVolumeClaim:
            claimName: strapi-pvc
        - name: strapi-conf
          configMap:
              name: strapi-server

---
apiVersion: v1
kind: Service
metadata:
  name: strapi
  namespace: demo-app
spec:
  selector:
    app: strapi
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 1337

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: gatewayservice
  namespace: demo-app
spec:
  selector:
    matchLabels:
      app: gatewayservice
  template:
    metadata:
      labels:
        app: gatewayservice
    spec:
      containers:
        - name: gatewayservice
          env:
            - name: PROFILE
              value: prod
          image: tibinlukose/gateway-app:v.1.6
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: gatewayservice
  namespace: demo-app
spec:
  type: ClusterIP
  selector:
    app: gatewayservice
  ports:
    - name: gateway-port
      port: 80
      protocol: TCP
      targetPort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: kube-dns
#   namespace: kube-system
# data:
#   upstreamNameservers: |
#     ["8.8.8.8", "8.8.4.4"]


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: weather-app
  name: weather-app
  namespace: demo-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: weather-app
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: weather-app
    spec:
      containers:
      - image: tibinlukose/weather:v.1.0
        name: weather-app
        ports:
          - containerPort: 5000
        resources: {}
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: weather-app-svc
  name: weather-app-svc
  namespace: demo-app
spec:
  type: ClusterIP
  selector:
    app: weather-app
  ports:
    - port: 80
      targetPort: 5000
      name: news-port


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: newsservice
  namespace: demo-app
spec:
  selector:
    matchLabels:
      app: newsservice
  template:
    metadata:
      labels:
        app: newsservice
    spec:
      containers:
        - name: newsservice
          env:
            - name: PROFILE
              value: prod
          image: tibinlukose/news-app:v.1.0
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: newsservice
  namespace: demo-app
spec:
  type: ClusterIP
  selector:
    app: newsservice
  ports:
    - port: 80
      targetPort: 8080
      name: news-port


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: oms-pvc-media
#   namespace: demo-app
# spec:
#   accessModes:
#     - ReadWriteOnce
#   storageClassName: default
#   resources:
#     requests:
#       storage: 10Gi
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: oms-pvc-static
#   namespace: demo-app
# spec:
#   accessModes:
#     - ReadWriteOnce
#   storageClassName: default
#   resources:
#     requests:
#       storage: 10Gi
# ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oms-app
  namespace: demo-app
spec:
  selector:
    matchLabels:
      app: oms-app
  template:
    metadata:
      labels:
        app: oms-app
    spec:
      containers:
        - name: oms-app
          image: tibinlukose/oms:v.1.8
          ports:
            - containerPort: 8000
      #     volumeMounts:
      #       - mountPath: "/var/static"
      #         name: staticvolumestatic
      #       - mountPath: "/var/media"
      #         name: staticvolumemedia

      # volumes:
      #   - name: staticvolumemedia
      #     persistentVolumeClaim:
      #       claimName: oms-pvc-media
      #   - name: staticvolumestatic
      #     persistentVolumeClaim:
      #       claimName: oms-pvc-static
---
apiVersion: v1
kind: Service
metadata:
  name: oms-app-service
  namespace: demo-app
spec:
  type: ClusterIP
  selector:
    app: oms-app
  ports:
    - name: oms-app-port
      port: 80
      protocol: TCP
      targetPort: 8000
---



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: prod-avail
  namespace: demo-app
spec:
  selector:
    matchLabels:
      app: prod-avail
  template:
    metadata:
      labels:
        app: prod-avail
    spec:
      containers:
        - name: prod-avail
          env:
            - name: KEY
              value:
          image: tibinlukose/product-availability:v.1.2
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: prod-avail
  namespace: demo-app
spec:
  type: ClusterIP
  selector:
    app: prod-avail
  ports:
    - port: 80
      targetPort: 8080
      name: prod-avail-port


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

server:
  port: 8081
spring:
  kafka:
    bootstrap-servers: ecom-data.servicebus.windows.net:9093
    client-id: product-availbility-1
    properties:
      sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="$ConnectionString" password="Endpoint=sb://ecom-data.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=oAWGjDDWndiaM99k15rZwCOIDI8Wqf0RvIlK7Zed4cI=";
      sasl.mechanism: PLAIN
      security.protocol: SASL_SSL
    consumer:
      group-id: product-availbility
      properties:
        spring.json:
          use.type.headers: false
          value.default.type: in.zycon.demo.pa.products.Product
topic:
  name: ecom-sku-stock

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

server:
  port: 8080
partners:
  version:
  news:
    - id: 1
      name: bbc
      url: http://feeds.bbci.co.uk/news/world/rss.xml
      type: WORLD
      enabled: true
    - id: 2
      name: techrepublic
      url: https://www.techrepublic.com/rssfeeds/articles/
      type: TECHNOLOGY
      enabled: true
    - id: 3
      name: fox
      url: https://api.foxsports.com/v1/rss?partnerKey=zBaFxRyGKCfxBagJG9b8pqLyndmvo7UU
      type: SPORTS
      enabled: true
spring:
  jackson:
    deserialization:
      ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT : true
      ACCEPT_EMPTY_STRING_AS_NULL_OBJECT: true

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

server:
  port: 8081
partners:
  version:
  news:
    - id: 1
      name: bbc
      url: http://feeds.bbci.co.uk/news/world/rss.xml
      type: WORLD
      enabled: true
    - id: 2
      name: techrepublic
      url: https://www.techrepublic.com/rssfeeds/articles/
      type: TECHNOLOGY
      enabled: true
    - id: 3
      name: fox
      url: https://api.foxsports.com/v1/rss?partnerKey=zBaFxRyGKCfxBagJG9b8pqLyndmvo7UU
      type: SPORTS
      enabled: true
spring:
  jackson:
    deserialization:
      ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT : true
      ACCEPT_EMPTY_STRING_AS_NULL_OBJECT: true

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: gatewayservice
  namespace: demo-app
spec:
  selector:
    matchLabels:
      app: gatewayservice
  template:
    metadata:
      labels:
        app: gatewayservice
    spec:
      containers:
        - name: gatewayservice
          env:
            - name: PROFILE
              value: prod
          image: tibinlukose/gateway-app:v.1.6
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: gatewayservice
  namespace: demo-app
spec:
  type: LoadBalancer
  selector:
    app: gatewayservice
  ports:
    - name: gateway-port
      port: 80
      protocol: TCP
      targetPort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

server:
  port: 8080
spring:
  jackson:
    deserialization:
      ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT : true
      ACCEPT_EMPTY_STRING_AS_NULL_OBJECT: true
news:
  host: http://newsservice.demo-app.svc.cluster.local
  path: /news
weather:
  host: http://weather-app-svc.demo-app.svc.cluster.local
  path: /get-weather?id=
ads:
  host: http://ad-app-svc.demo-app.svc.cluster.local
  path: /
ps:
  host: http://prod-avail.demo-app.svc.cluster.local
  path: /product-availability/
oms:
  product: http://20.191.56.90/api/shuup/front/products/

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

server:
  port: 8080
spring:
  jackson:
    deserialization:
      ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT : true
      ACCEPT_EMPTY_STRING_AS_NULL_OBJECT: true
news:
  host: http://localhost:8081
  path: /news
weather:
  host: http://weather-app-svc.demo-app.svc.cluster.local
  path: /get-weather?id=
ads:
  host: http://ad-app-svc.demo-app.svc.cluster.local
  path: /
ps:
  host: http://localhost:8081
  path: /product-availability/
oms:
  product: http://20.191.56.90/api/shuup/front/products/

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: skaffold/v2alpha4
kind: Config
metadata:
  name: myfiles
build:
  artifacts:
  - image: python-weather-app
deploy:
  kubectl:
    manifests:
    - k8s-deployment.yaml
    - k8s-service.yaml


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: po-service
  labels:
    app: po-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: po-service
  template:
    metadata:
      labels:
        app: po-service
    spec:
      volumes:
      - name: mysqlcm
        configMap:
          name: mysql-db-name
      - name: mysqlse
        secret:
          secretName: mysql-secret
      containers:
      - name: po-service
        image: sep21taacr.azurecr.io/po-service:__Build.BuildNumber__
        ports:
        - containerPort: 8080
          protocol: TCP
        volumeMounts:
        - name: mysqlcm
          mountPath: /etc/config
        - name: mysqlse
          mountPath: /etc/vol-secrets


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-db-name
data:
  mysqldb.properties: |
    mysql.dbname=sampledb
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  username.properties: bXlzcWwudXNlcj1teXNxbAo=
  password.properties: bXlzcWwucGFzc3dvcmQ9cGFzc3dvcmQK
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: po-service
  labels:
    app: po-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: po-service
  template:
    metadata:
      labels:
        app: po-service
    spec:
      volumes:
      - name: mysqlcm
        configMap:
          name: mysql-db-name
      - name: mysqlse
        secret:
          secretName: mysql-secret
      containers:
      - name: po-service
        image: sep21taacr.azurecr.io/po-service:latest
        ports:
        - containerPort: 8080
          protocol: TCP
        volumeMounts:
        - name: mysqlcm
          mountPath: /etc/config
        - name: mysqlse
          mountPath: /etc/vol-secrets
---
kind: Service
apiVersion: v1
metadata:
  name: po-service
spec:
  type: LoadBalancer
  selector:
    app: po-service
  ports:
  - name: 80-tcp
    protocol: TCP
    port: 80
    targetPort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-db-name
data:
  mysqldb.properties: |
    mysql.dbname=sampledb
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  username.properties: bXlzcWwudXNlcj1teXNxbAo=
  password.properties: bXlzcWwucGFzc3dvcmQ9cGFzc3dvcmQK
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: po-service
  labels:
    app: po-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: po-service
  template:
    metadata:
      labels:
        app: po-service
    spec:
      volumes:
      - name: mysqlcm
        configMap:
          name: mysql-db-name
      - name: mysqlse
        secret:
          secretName: mysql-secret
      containers:
      - name: po-service
        image: mtcslabtest.azurecr.io/po-service:latest
        ports:
        - containerPort: 8080
          protocol: TCP
        volumeMounts:
        - name: mysqlcm
          mountPath: /etc/config
        - name: mysqlse
          mountPath: /etc/vol-secrets
      imagePullSecrets:
      - name: acr-registry
---
kind: Service
apiVersion: v1
metadata:
  name: po-service
spec:
  type: LoadBalancer
  selector:
    app: po-service
  ports:
  - name: 80-tcp
    protocol: TCP
    port: 80
    targetPort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Secret
metadata:
  name: mysql
type: Opaque
data:
  database-name: c2FtcGxlZGI=
  database-password: cGFzc3dvcmQ=
  database-root-password: cGFzc3dvcmQ=
  database-user: bXlzcWw=
---
kind: Service
apiVersion: v1
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
  - protocol: TCP
    port: 3306
    targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql-ephemeral
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql/mysql-server:5.7.22
        ports:
        - containerPort: 3306
          protocol: TCP
        env:
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-password
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-name


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Secret
metadata:
  name: mysql
type: Opaque
data:
  database-name: c2FtcGxlZGI=
  database-password: cGFzc3dvcmQ=
  database-root-password: cGFzc3dvcmQ=
  database-user: bXlzcWw=
---
kind: Service
apiVersion: v1
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
  - protocol: TCP
    port: 3306
    targetPort: 3306
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
      app: mysql
  template:
    metadata:
      name: mysql
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql/mysql-server:5.7.22
        ports:
        - containerPort: 3306
          protocol: TCP
        env:
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-password
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-name


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-db-name
data:
  mysqldb.properties: |
    mysql.dbname=sampledb
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  username.properties: bXlzcWwudXNlcj1teXNxbAo=
  password.properties: bXlzcWwucGFzc3dvcmQ9cGFzc3dvcmQK
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: po-service
  labels:
    app: po-service
spec:
  replicas: 1
  selector:
      app: po-service
  template:
    metadata:
      name: po-service
      labels:
        app: po-service
    spec:
      volumes:
      - name: mysqlcm
        configMap:
          name: mysql-db-name
      - name: mysqlse
        secret:
          secretName: mysql-secret
      containers:
      - name: po-service
        image: mtcslabtest.azurecr.io/po-service:latest
        ports:
        - containerPort: 8080
          protocol: TCP
        volumeMounts:
        - name: mysqlcm
          mountPath: /etc/config
        - name: mysqlse
          mountPath: /etc/vol-secrets
      imagePullSecrets:
      - name: acr-registry
---
kind: Service
apiVersion: v1
metadata:
  name: po-service
spec:
  type: LoadBalancer
  selector:
    app: po-service
  ports:
  - name: 80-tcp
    protocol: TCP
    port: 80
    targetPort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: '2018-10-01'
location: westus
name: po-service-aci-group
properties:
  containers:
  - name: po-service-aci
    properties:
      command:
      - /bin/bash
      - -c
      - java -Dspring.datasource.url="jdbc:mysql://hostname:3306/dbname?useSSL=true&requireSSL=true" -jar ./po-rest-service-1.0.jar
      image: mtcslabtest.azurecr.io/po-service:latest
      ports:
      - port: 8080
      resources:
        requests:
          cpu: 1.0
          memoryInGB: 1.0
      volumeMounts:
      - mountPath: /etc/vol-secrets
        name: secretvolume1
      - mountPath: /etc/config
        name: secretvolume2
  osType: Linux
  restartPolicy: OnFailure
  ipAddress:
    dnsNameLabel: po-service-MyInitial
    type: Public
    ports:
    - protocol: tcp
      port: '8080'
  volumes:
  - name: secretvolume1
    secret:
      username.properties: 'Base64 encoded value of : mysql.user=value'
      password.properties: 'Base64 encoded value of : mysql.password=value'
  - name: secretvolume2
    secret:
      mysqldb.properties: 'Any base64 encoded value. This value is not used'
  imageRegistryCredentials:
  - server: mtcslabtest.azurecr.io
    username: mtcslabtest
    password: 'Substitute value of ACR password'
tags: {}
type: Microsoft.ContainerInstance/containerGroups


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: po-service-svcat
  namespace: dev-svcat
  labels:
    app: po-service-svcat
spec:
  replicas: 1
  selector:
    matchLabels:
      app: po-service-svcat
  template:
    metadata:
      labels:
        app: po-service-svcat
    spec:
      containers:
      - name: po-service-svcat
        image: mtcslabtest.azurecr.io/po-service:latest
        volumeMounts:
        - name: mysqlse
          mountPath: "/etc/vol-secrets"
        - name: mysqlcm
          mountPath: "/etc/config"
        ports:
        - containerPort: 8080
          protocol: TCP
        env:
          - name: DB_HOST
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: host
          - name: DB_HOST_PORT
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: port
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: database
          - name: DB_SSL_REQ
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: sslRequired
          - name: SPRING_DATASOURCE_URL
            value: "jdbc:mysql://$(DB_HOST):$(DB_HOST_PORT)/$(DB_NAME)?useSSL=true&requireSSL=$(DB_SSL_REQ)"
          - name: SPRING_DATASOURCE_USERNAME
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: username
          - name: SPRING_DATASOURCE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: password
      volumes:
      - name: mysqlse
        secret:
          secretName: mysql-secret
          items:
          - key: username
            path: username.properties
            mode: 511
          - key: password
            path: password.properties
            mode: 511
      - name: mysqlcm
        secret:
          secretName: mysql-secret
          items:
          - key: database
            path: mysqldb.properties
            mode: 511


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: servicecatalog.k8s.io/v1beta1
kind: ServiceBinding
metadata:
  name: po-service-mysql-database-binding
  namespace: dev-azure-mysql
spec:
  instanceRef:
    name: po-service-mysql-database-instance
  secretName: mysql-secret


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: servicecatalog.k8s.io/v1beta1
kind: ServiceInstance
metadata:
  name: po-service-mysql-database-instance
  namespace: dev-azure-mysql
spec:
  clusterServiceClassExternalName: azure-mysql-5-7-database
  clusterServicePlanExternalName: database
  parameters:
    parentAlias: 71b6b6c4-5271-47d3-8188-51e69fba914e


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: Service
apiVersion: v1
metadata:
  name: po-service-svcat
  namespace: dev-svcat
spec:
  type: LoadBalancer
  selector:
    app: po-service-svcat
  ports:
  - name: 80-tcp
    protocol: TCP
    port: 80
    targetPort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: servicecatalog.k8s.io/v1beta1
kind: ServiceInstance
metadata:
  name: po-service-mysql-dbms-instance
  namespace: dev-azure-mysql
spec:
  clusterServiceClassExternalName: azure-mysql-5-7-dbms
  clusterServicePlanExternalName: basic
  parameters:
    location: westus
    resourceGroup: myResourceGroup
    alias: 71b6b6c4-5271-47d3-8188-51e69fba914e
    firewallRules:
    - startIPAddress: "0.0.0.0"
      endIPAddress: "255.255.255.255"
      name: "AllowAll"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for deploying the 'po-service' Java Springboot microservice to AKS
name: po-service
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# Default values for po-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: mtcslabtest.azurecr.io/po-service
  tag: latest
  pullPolicy: Always

service:
  type: ClusterIP
  port: 80
  targetPort: 8080

secret:
  mode: 511

ingress:
  enabled: true
  name: po-service
  annotations:
    kubernetes.io/ingress.class: addon-http-application-routing
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /orders
  hosts:
    - po-service.033185fc7e8b483fae46.westus.aksapp.io
  tls:
    - secretName: po-ssh-secret
      hosts:
        - po-service.033185fc7e8b483fae46.westus.aksapp.io

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
    # cpu: 100m
    # memory: 512Mi
  # requests:
      # cpu: 100m
      # memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "po-service.fullname" . }}
  labels:
    app: {{ template "po-service.name" . }}
    chart: {{ template "po-service.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "po-service.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "po-service.name" . }}
        release: {{ .Release.Name }}
    spec:
      volumes:
        - name: mysqlcm
          secret:
            secretName: mysql-secret
            items:
            - key: database
              path: mysqldb.properties
              mode: {{ .Values.secret.mode }}
        - name: mysqlse
          secret:
            secretName: mysql-secret
            items:
            - key: username
              path: username.properties
              mode: {{ .Values.secret.mode }}
            - key: password
              path: password.properties
              mode: {{ .Values.secret.mode }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: mysqlcm
              mountPath: /etc/config
            - name: mysqlse
              mountPath: /etc/vol-secrets
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: host
            - name: DB_HOST_PORT
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: port
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: database
            - name: DB_SSL_REQ
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: sslRequired
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:mysql://$(DB_HOST):$(DB_HOST_PORT)/$(DB_NAME)?useSSL=true&requireSSL=$(DB_SSL_REQ)"
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: username
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: password
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $fullName := include "po-service.fullname" . -}}
{{- $ingressPath := .Values.ingress.path -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ $fullName }}
  labels:
    app: {{ template "po-service.name" . }}
    chart: {{ template "po-service.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $fullName }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ template "po-service.fullname" . }}
  labels:
    app: {{ template "po-service.name" . }}
    chart: {{ template "po-service.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.targetPort }}
      protocol: TCP
      name: http
  selector:
    app: {{ template "po-service.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: managed-dev-mysql
provisioner: kubernetes.io/azure-disk
parameters:
  storageaccounttype: Standard_LRS
  kind: managed
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: azure-mgd-dsk-mysql
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: managed-dev-mysql
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql
type: Opaque
data:
  database-name: c2FtcGxlZGI=
  database-password: cGFzc3dvcmQ=
  database-root-password: cGFzc3dvcmQ=
  database-user: bXlzcWw=
---
kind: Service
apiVersion: v1
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
  - protocol: TCP
    port: 3306
    targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql-persistent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql/mysql-server:5.7.22
        ports:
        - containerPort: 3306
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: data-volume
          subPath: mysql
        env:
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-password
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-name
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: azure-mgd-dsk-mysql
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-db-name
data:
  mysqldb.properties: |
    mysql.dbname=sampledb
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  username.properties: bXlzcWwudXNlcj1teXNxbAo=
  password.properties: bXlzcWwucGFzc3dvcmQ9cGFzc3dvcmQK
---
kind: Service
apiVersion: v1
metadata:
  name: po-service
spec:
  type: LoadBalancer
  selector:
    app: po-service
  ports:
  - name: 80-tcp
    protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: po-service
  labels:
    app: po-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: po-service
  template:
    metadata:
      labels:
        app: po-service
    spec:
      volumes:
      - name: mysqlcm
        configMap:
          name: mysql-db-name
      - name: mysqlse
        secret:
          secretName: mysql-secret
      containers:
      - name: po-service
        image: mtcslabtest.azurecr.io/po-service:latest
        ports:
        - containerPort: 8080
          protocol: TCP
        volumeMounts:
        - name: mysqlcm
          mountPath: /etc/config
        - name: mysqlse
          mountPath: /etc/vol-secrets
---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql-ephemeral
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql/mysql-server:5.7.22
        ports:
        - containerPort: 3306
          protocol: TCP
        env:
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-password
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-name


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

---
apiVersion: v1
kind: Secret
metadata:
  name: mysql
type: Opaque
data:
  database-name: c2FtcGxlZGI=
  database-password: cGFzc3dvcmQ=
  database-root-password: cGFzc3dvcmQ=
  database-user: bXlzcWw=
---
kind: Service
apiVersion: v1
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
  - protocol: TCP
    port: 3306
    targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql-ephemeral
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql/mysql-server:5.7.22
        ports:
        - containerPort: 3306
          protocol: TCP
        env:
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-password
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database-name
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-db-name
data:
  mysqldb.properties: |
    mysql.dbname=sampledb
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  username.properties: bXlzcWwudXNlcj1teXNxbAo=
  password.properties: bXlzcWwucGFzc3dvcmQ9cGFzc3dvcmQK
---
kind: Service
apiVersion: v1
metadata:
  name: po-service
spec:
  type: LoadBalancer
  selector:
    app: po-service
  ports:
  - name: 80-tcp
    protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: po-service
  labels:
    app: po-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: po-service
  template:
    metadata:
      labels:
        app: po-service
    spec:
      volumes:
      - name: mysqlcm
        configMap:
          name: mysql-db-name
      - name: mysqlse
        secret:
          secretName: mysql-secret
      containers:
      - name: po-service
        image: mtcslabtest.azurecr.io/po-service:latest
        ports:
        - containerPort: 8080
          protocol: TCP
        volumeMounts:
        - name: mysqlcm
          mountPath: /etc/config
        - name: mysqlse
          mountPath: /etc/vol-secrets
---


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: po-service
  labels:
    app: po-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: po-service
  template:
    metadata:
      labels:
        app: po-service
    spec:
      volumes:
      - name: mysqlcm
        configMap:
          name: mysql-db-name
      - name: mysqlse
        secret:
          secretName: mysql-secret
      containers:
      - name: po-service
        image: mtcslabtest.azurecr.io/po-service:latest
        ports:
        - containerPort: 8080
          protocol: TCP
        volumeMounts:
        - name: mysqlcm
          mountPath: /etc/config
        - name: mysqlse
          mountPath: /etc/vol-secrets


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Secret
metadata:
  name: mysql
type: Opaque
data:
  database-name: c2FtcGxlZGI=
  database-password: cGFzc3dvcmQ=
  database-root-password: cGFzc3dvcmQ=
  database-user: bXlzcWw=


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: Service
apiVersion: v1
metadata:
  name: po-service
spec:
  type: LoadBalancer
  selector:
    app: po-service
  ports:
  - name: 80-tcp
    protocol: TCP
    port: 80
    targetPort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-db-name
data:
  mysqldb.properties: |
    mysql.dbname=sampledb


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: Service
apiVersion: v1
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
  - protocol: TCP
    port: 3306
    targetPort: 3306


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  username.properties: bXlzcWwudXNlcj1teXNxbAo=
  password.properties: bXlzcWwucGFzc3dvcmQ9cGFzc3dvcmQK


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for deploying Jenkins CI/CD
name: jenkins-chart
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# Default values for jenkins-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: mtcslabtest.azurecr.io/jenkins-gr
  tag: latest
  pullPolicy: Always

service:
  type: LoadBalancer
  port: 80
  targetPort: 8080

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "jenkins-chart.fullname" . }}
  labels:
    app: {{ template "jenkins-chart.name" . }}
    chart: {{ template "jenkins-chart.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "jenkins-chart.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "jenkins-chart.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          env:
            - name: JAVA_OPTS
              value: -Djenkins.install.runSetupWizard=false
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: jenkins-home
              mountPath: /var/jenkins_home
            - name: docker-socket
              mountPath: /var/run/docker.sock
          ports:
            - name: http-port
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
            - name: jnlp-port
              containerPort: 50000
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
      - name: jenkins-home
        emptyDir: {}
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $fullName := include "jenkins-chart.fullname" . -}}
{{- $ingressPath := .Values.ingress.path -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ $fullName }}
  labels:
    app: {{ template "jenkins-chart.name" . }}
    chart: {{ template "jenkins-chart.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $fullName }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ template "jenkins-chart.fullname" . }}
  labels:
    app: {{ template "jenkins-chart.name" . }}
    chart: {{ template "jenkins-chart.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.targetPort }}
      protocol: TCP
      name: http
  selector:
    app: {{ template "jenkins-chart.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: internal-lb
  namespace: kube-system
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: internal-lb


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

controller:
  service:
    annotations:
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
rbac:
  create: false

serviceAccount:
  create: false


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: po-service
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# Default values for po-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: mtcslabtest.azurecr.io/po-service
  tag: latest
  pullPolicy: Always

service:
  type: ClusterIP
  port: 80
  targetPort: 8080

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /
    # kubernetes.io/tls-acme: "true"
  path: /bcc
  hosts: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

global:
  mysqlPort: 3306


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for deploying mysqldb on AKS
name: mysql
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# Default values for mysqldb.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: mysql/mysql-server
  tag: 5.7.22
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 3306
  targetPort: 3306

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - 10.0.0.35
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "mysql.fullname" . }}
  labels:
    app: {{ template "mysql.name" . }}
    chart: {{ template "mysql.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "mysql.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "mysql.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: mysql
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          env:
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql
                  key: database-user
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql
                  key: database-password
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
              secretKeyRef:
                name: mysql
                key: database-root-password
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mysql
                  key: database-name
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Secret
metadata:
  name: mysql
type: Opaque
data:
  database-name: c2FtcGxlZGI=
  database-password: cGFzc3dvcmQ=
  database-root-password: cGFzc3dvcmQ=
  database-user: bXlzcWw=


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $fullName := include "mysql.fullname" . -}}
{{- $ingressPath := .Values.ingress.path -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ $fullName }}
  labels:
    app: {{ template "mysql.name" . }}
    chart: {{ template "mysql.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $fullName }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ template "mysql.fullname" . }}
  labels:
    app: {{ template "mysql.name" . }}
    chart: {{ template "mysql.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.targetPort }}
      protocol: TCP
      name: mysql
  selector:
    app: {{ template "mysql.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "po-service.fullname" . }}
  labels:
    app: {{ template "po-service.name" . }}
    chart: {{ template "po-service.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "po-service.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "po-service.name" . }}
        release: {{ .Release.Name }}
    spec:
      volumes:
      - name: mysqlcm
        configMap:
          name: mysql-db-name
      - name: mysqlse
        secret:
          secretName: mysql-secret
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          volumeMounts:
          - name: mysqlcm
            mountPath: /etc/config
          - name: mysqlse
            mountPath: /etc/vol-secrets
          env:
          - name: DB_NAME
            valueFrom:
              configMapKeyRef:
                name: mysql-database
                key: mysql.dbname
          - name: SPRING_DATASOURCE_URL
            value: "jdbc:mysql://{{ .Release.Name }}-mysql.development.svc.cluster.local:{{ .Values.global.mysqlPort }}/$(DB_NAME)"
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-database
data:
    mysql.dbname: sampledb


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $fullName := include "po-service.fullname" . -}}
{{- $ingressPath := .Values.ingress.path -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ $fullName }}
  labels:
    app: {{ template "po-service.name" . }}
    chart: {{ template "po-service.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
    - http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $fullName }}
              servicePort: http
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ template "po-service.fullname" . }}
  labels:
    app: {{ template "po-service.name" . }}
    chart: {{ template "po-service.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.targetPort }}
      protocol: TCP
      name: http
  selector:
    app: {{ template "po-service.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-db-name
data:
  mysqldb.properties: |
    mysql.dbname=sampledb


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  username.properties: bXlzcWwudXNlcj1teXNxbAo=
  password.properties: bXlzcWwucGFzc3dvcmQ9cGFzc3dvcmQK


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: microservice-ingress
  namespace: ${NAMESPACE@microservice-config}
spec:
  rules:
  - host: ${HOST@microservice-config}
    http:
      paths:
      - path: ${BASE_ROUTE@microservice-resources-config}
        backend:
          serviceName: ${SERVICE@microservice-resources-config}
          servicePort: ${INTERNAL_PORT@microservice-resources-config}
      - path: ${BASE_ROUTE_BACKEND@microservice-auth-config}
        backend:
          serviceName: ${SERVICE_GRAPH@microservice-auth-config}
          servicePort: ${INTERNAL_PORT_GRAPH@microservice-auth-config}
      - path: ${BASE_ROUTE_APP@microservice-auth-config}
        backend:
          serviceName: ${SERVICE_WEB@microservice-auth-config}
          servicePort: ${INTERNAL_PORT_APP@microservice-auth-config}
      - path: ${BASE_ROUTE_BACKEND@microservice-blog-config}
        backend:
          serviceName: ${SERVICE_GRAPH@microservice-blog-config}
          servicePort: ${INTERNAL_PORT_GRAPH@microservice-blog-config}
      - path: ${BASE_ROUTE_APP@microservice-blog-config}
        backend:
          serviceName: ${SERVICE_WEB@microservice-blog-config}
          servicePort: ${INTERNAL_PORT_APP@microservice-blog-config}
      - path: ${BASE_ROUTE_BACKEND@microservice-home-config}
        backend:
          serviceName: ${SERVICE_GRAPH@microservice-home-config}
          servicePort: ${INTERNAL_PORT_GRAPH@microservice-home-config}
      - path: ${BASE_ROUTE_APP@microservice-home-config}
        backend:
          serviceName: ${SERVICE_WEB@microservice-home-config}
          servicePort: ${INTERNAL_PORT_APP@microservice-home-config}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Namespace
metadata:
  name: ${NAMESPACE@microservice-config}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: microservice-ingress
  namespace: microservices-namespace
spec:
  rules:
    -
      host: www.repoflow.com
      http:
        paths:
          -
            path: /resources
            backend:
              serviceName: resources-service
              servicePort: 4000
          -
            path: /auth/backend
            backend:
              serviceName: auth-graph-service
              servicePort: 4000
          -
            path: /auth
            backend:
              serviceName: auth-web-service
              servicePort: 3000
          -
            path: /blog/backend
            backend:
              serviceName: blog-graph-service
              servicePort: 4000
          -
            path: /blog
            backend:
              serviceName: blog-web-service
              servicePort: 3000
          -
            path: /backend
            backend:
              serviceName: home-graph-service
              servicePort: 4000
          -
            path: /
            backend:
              serviceName: home-web-service
              servicePort: 3000


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Namespace
metadata:
  name: microservices-namespace


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ServiceAccount
metadata:
  name: tiller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: tiller
    namespace: kube-system

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kubernetes-dashboard
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kubernetes-dashboard


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx

---

kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
    verbs:
      - update

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: nginx-ingress-role
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: nginx-ingress-serviceaccount
      containers:
        - name: nginx-ingress-controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.20.0
          args:
            - /nginx-ingress-controller
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx
            - --annotations-prefix=nginx.ingress.kubernetes.io
          securityContext:
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            # www-data -> 33
            runAsUser: 33
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  type: NodePort
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
    - name: https
      port: 443
      targetPort: 443
      protocol: TCP
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  name: nginx-configuration
  namespace: ingress-nginx
data:
  proxy-buffer-size: "128k"
  proxy-buffers: "4 256k"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: Service
apiVersion: v1
metadata:
  name: ingress-nginx
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  externalTrafficPolicy: Local
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: https
      port: 443
      targetPort: https

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  labels:
    app: webmvc
  name: eshop-webmvc-loopback
  namespace: default
spec:
  rules:
  - http: 
      paths:
      - backend:
          serviceName: webmvc
          servicePort: http
        path: /webmvc
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  labels:
    app: identity-api
  name: eshop-identity-api-loopback
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: identity
          servicePort: http
        path: /identity

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

data:
  mvc_e: http://10.0.75.1/webmvc
  

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

data:
  urls__IdentityUrl: http://10.0.75.1/identity
  urls__mvc: http://10.0.75.1/webmvc


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  creationTimestamp: null
  name: basket-api.default.svc.cluster.local
  namespace: default
spec:
  routes:
  - condition:
      method: GET
      pathRegex: /basket-api/api/v1/basket/[^/]*
    name: GET Basket {id}
    isRetryable: true
  - condition:
      method: GET
      pathRegex: /hc
    name: GET /hc
    isRetryable: false
  - condition:
      method: GET
      pathRegex: /liveness
    name: GET /liveness
    isRetryable: false
  - condition:
      method: POST
      pathRegex: /BasketApi\.Basket/GetBasketById
    name: POST /BasketApi.Basket/GetBasketById
    isRetryable: true
  - condition:
      method: POST
      pathRegex: /BasketApi\.Basket/UpdateBasket
    name: POST /BasketApi.Basket/UpdateBasket
    isRetryable: true
  - condition:
      method: POST
      pathRegex: /basket-api/api/v1/basket/checkout
    name: POST /v1/basket/checkout
    isRetryable: true
  retryBudget:
    retryRatio: 0.2
    minRetriesPerSecond: 10
    ttl: 10s

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  creationTimestamp: null
  name: catalog-api.default.svc.cluster.local
  namespace: default
spec:
  routes:
  - condition:
      method: GET
      pathRegex: /catalog-api/api/v1/catalog/catalogbrands
    name: GET /v1/catalog/catalogbrands
    isRetryable: true
  - condition:
      method: GET
      pathRegex: /catalog-api/api/v1/catalog/catalogtypes
    name: GET /v1/catalog/catalogtypes
    isRetryable: true
  - condition:
      method: GET
      pathRegex: /catalog-api/api/v1/catalog/items
    name: GET /v1/catalog/items
    isRetryable: true
  - condition:
      method: GET
      pathRegex: /api/v1/catalog/items/[^/]*/pic/
    name: GET /v1/catalog/items/{id}/pic/
    isRetryable: false
  - condition:
      method: GET
      pathRegex: /hc
    name: GET /hc
    isRetryable: false
  - condition:
      method: GET
      pathRegex: /liveness
    isRetryable: false
    name: GET /liveness
  - condition:
      method: POST
      pathRegex: /CatalogApi\.Catalog/GetItemsByIds
    name: POST /CatalogApi.Catalog/GetItemsByIds
    isRetryable: true
  retryBudget:
    retryRatio: 0.2
    minRetriesPerSecond: 10
    ttl: 10s

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ServiceAccount
metadata:
  name: tiller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: tiller
    namespace: kube-system

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kubernetes-dashboard
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kubernetes-dashboard


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx

---

kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
    verbs:
      - update

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: nginx-ingress-role
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: nginx-ingress-serviceaccount
      containers:
        - name: nginx-ingress-controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.20.0
          args:
            - /nginx-ingress-controller
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx
            - --annotations-prefix=nginx.ingress.kubernetes.io
          securityContext:
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            # www-data -> 33
            runAsUser: 33
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  type: NodePort
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
    - name: https
      port: 443
      targetPort: 443
      protocol: TCP
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  name: nginx-configuration
  namespace: ingress-nginx
data:
  proxy-buffer-size: "128k"
  proxy-buffers: "4 256k"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: Service
apiVersion: v1
metadata:
  name: ingress-nginx
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  externalTrafficPolicy: Local
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: https
      port: 443
      targetPort: https

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  labels:
    app: webmvc
  name: eshop-webmvc-loopback
  namespace: default
spec:
  rules:
  - http: 
      paths:
      - backend:
          serviceName: webmvc
          servicePort: http
        path: /webmvc
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  labels:
    app: identity-api
  name: eshop-identity-api-loopback
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: identity
          servicePort: http
        path: /identity

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

data:
  mvc_e: http://10.0.75.1/webmvc
  

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

data:
  urls__IdentityUrl: http://10.0.75.1/identity
  urls__mvc: http://10.0.75.1/webmvc


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  creationTimestamp: null
  name: basket-api.default.svc.cluster.local
  namespace: default
spec:
  routes:
  - condition:
      method: GET
      pathRegex: /basket-api/api/v1/basket/[^/]*
    name: GET Basket {id}
    isRetryable: true
  - condition:
      method: GET
      pathRegex: /hc
    name: GET /hc
    isRetryable: false
  - condition:
      method: GET
      pathRegex: /liveness
    name: GET /liveness
    isRetryable: false
  - condition:
      method: POST
      pathRegex: /BasketApi\.Basket/GetBasketById
    name: POST /BasketApi.Basket/GetBasketById
    isRetryable: true
  - condition:
      method: POST
      pathRegex: /BasketApi\.Basket/UpdateBasket
    name: POST /BasketApi.Basket/UpdateBasket
    isRetryable: true
  - condition:
      method: POST
      pathRegex: /basket-api/api/v1/basket/checkout
    name: POST /v1/basket/checkout
    isRetryable: true
  retryBudget:
    retryRatio: 0.2
    minRetriesPerSecond: 10
    ttl: 10s

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  creationTimestamp: null
  name: catalog-api.default.svc.cluster.local
  namespace: default
spec:
  routes:
  - condition:
      method: GET
      pathRegex: /catalog-api/api/v1/catalog/catalogbrands
    name: GET /v1/catalog/catalogbrands
    isRetryable: true
  - condition:
      method: GET
      pathRegex: /catalog-api/api/v1/catalog/catalogtypes
    name: GET /v1/catalog/catalogtypes
    isRetryable: true
  - condition:
      method: GET
      pathRegex: /catalog-api/api/v1/catalog/items
    name: GET /v1/catalog/items
    isRetryable: true
  - condition:
      method: GET
      pathRegex: /api/v1/catalog/items/[^/]*/pic/
    name: GET /v1/catalog/items/{id}/pic/
    isRetryable: false
  - condition:
      method: GET
      pathRegex: /hc
    name: GET /hc
    isRetryable: false
  - condition:
      method: GET
      pathRegex: /liveness
    isRetryable: false
    name: GET /liveness
  - condition:
      method: POST
      pathRegex: /CatalogApi\.Catalog/GetItemsByIds
    name: POST /CatalogApi.Catalog/GetItemsByIds
    isRetryable: true
  retryBudget:
    retryRatio: 0.2
    minRetriesPerSecond: 10
    ttl: 10s

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# This file contains common ingress annotations when using Kubernetes included in Docker Desktop

ingress:
  annotations:
    kubernetes.io/ingress.class: "nginx"
    ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# This helm values file defines app-based settings
# Charts use those values, so this file **MUST** be included in all chart releases

app:                                                    # app global settings
  name: "my-eshop"                                      # Override for custom app name
  ingress:                                              # ingress related settings
    entries:
      basket: basket-api                                # ingress entry for basket api
      catalog: catalog-api                              # ingress entry for catalog api
      ordering: ordering-api                            # ingress entry for ordering api
      identity: identity                                # ingress entry for identity api
      mvc: webmvc                                       # ingress entry for web mvc
      spa: ""                                           # ingress entry for web spa
      status: webstatus                                 # ingress entry for web status
      webshoppingapigw: webshoppingapigw                # ingress entry for web shopping Agw
      webmarketingapigw: webmarketingapigw              # ingress entry for web mkg Agw
      mobilemarketingapigw: mobilemarketingapigw        # ingress entry for mobile mkg Agw
      mobileshoppingapigw: mobileshoppingapigw          # ingress entry for mobile shopping Agw
      webshoppingagg: webshoppingagg                    # ingress entry for web shopping aggregator
      mobileshoppingagg: mobileshoppingagg              # ingress entry for mobile shopping aggregator
      payment: payment-api                              # ingress entry for payment api
      locations: locations-api                          # ingress entry for locations api
      marketing: marketing-api                          # ingress entry for marketing api
      webhooks: webhooks-api                            # ingress entry for webhooks api
      webhooksweb: webhooks-web                         # ingress entry for webhooks web demo client
  svc:
      basket: basket-api                                # service name for basket api
      catalog: catalog-api                              # service name for catalog api
      ordering: ordering-api                            # service name for ordering api
      orderingbackgroundtasks: ordering-backgroundtasks # service name for orderingbackgroundtasks
      orderingsignalrhub: ordering-signalrhub           # service name for orderingsignalrhub
      identity: identity-api                            # service name for identity api
      mvc: webmvc                                       # service name for web mvc
      spa: webspa                                       # service name for web spa
      status: webstatus                                 # service name for web status
      webshoppingapigw: webshoppingapigw                # service name for web shopping Agw
      webmarketingapigw: webmarketingapigw              # service name for web mkg Agw
      mobilemarketingapigw: mobilemarketingapigw        # service name for mobile mkg Agw
      mobileshoppingapigw: mobileshoppingapigw          # service name for mobile shopping Agw
      webshoppingagg: webshoppingagg                    # service name for web shopping aggregator
      mobileshoppingagg: mobileshoppingagg              # service name for mobile shopping aggregator
      payment: payment-api                              # service name for payment api
      locations: locations-api                          # service name for locations api
      marketing: marketing-api                          # service name for marketing ap
      webhooks: webhooks-api                            # service name for webhooks api
      webhooksweb: webhooks-client                      # service name for webhooks web


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
#    addonmanager.kubernetes.io/mode: Reconcile
    app: addon-http-application-routing-ingress-nginx
    kubernetes.io/cluster-service: "true"
  name: addon-http-application-routing-nginx-configuration
  namespace: kube-system
data:
  proxy-buffer-size: "128k"
  proxy-buffers: "4 256k"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# This file contains extra annotations to make Linkerd work with ingress.
# ingress.mesh.annotations are inserted into ingress.annotations of the resource being generated, if mesh is deployed
#
# It is designed to work with NGINX ingress controller or the Http Application Routing
#
# Check https://linkerd.io/2/tasks/using-ingress/ for more info or other ingress controllers
#
# If using your custom file, use -ingressMeshAnnotationsFile parameter in deploy-all.ps1

ingress:
  mesh:
    annotations:
      nginx.ingress.kubernetes.io/configuration-snippet: |
        proxy_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;
        proxy_hide_header l5d-remote-ip;
        proxy_hide_header l5d-server-id;

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# This file contains common ingress annotations when using AKS with Http Application Routing

ingress:
  annotations:
    kubernetes.io/ingress.class: addon-http-application-routing
    ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# This helm values file defines all infrastructure used by eShopOnContainers.
# It is used on all charts, so ** MUST BE INCLUDED ** on every deployment

inf:
  mesh:
    enabled: false          # True to enable Linkerd (set by deploy-all.ps1)
  tls:
    enabled: false          # True to enable TLS (set by deploy-all.ps1)
    issuer: ""              # cert-manager issuer to use for retrieving certs (set by deploy-all.ps1)
  sql:                      # inf.sql defines the sql server databases & logins
#    host:  my-sql-server   # Uncomment to specify a custom sql-server to be used. By default "sql-data-<appname>" will be used  
    common:
      user: sa              # SQL user
      pwd: Pass@word        # SQL pwd
      pid: Developer
    catalog:                # inf.sql.catalog: settings for the catalog-api sql (user, pwd, db)
      db: CatalogDb         # Catalog API SQL db name
    ordering:               # inf.sql.ordering: settings for the ordering-api sql (user, pwd, db)
      db: OrderingDb        # Ordering API SQL db name
    identity:
      db: IdentityDb        # Ordering API SQL db name
    marketing:
      db: MarketingDb       # Marketing API SQL db name
    webhooks:
      db: WebhooksDb        # Webhooks DB
  mongo:
#    host: my-nosql-data    # Uncomment to use specify custom mongo host. By default nosql-data is used
    locations:
      database: LocationsDb
    marketing:
      database: MarketingDb
  redis:                    # inf.redis defines the redis' connection strings
    basket:     
      svc: basket-data      # Name of k8s svc for basket redis     
      constr: basket-data   # Connection string to Redis used by Basket API
    keystore:
      svc: keystore-data    # Name of k8s svc for keystore-data redis
      constr: keystore-data # Connection string to Redis used as a Keystore (by Identity API)
  eventbus:
    svc: rabbitmq           # Name of k8s svc for rabbitmq
    constr: rabbitmq        # Event bus connection string
    useAzure: false         # true if use Azure Service Bus. False if RabbitMQ
  appinsights:
      key: ""               # App insights to use
  k8s:                      # inf.k8s defines Kubernetes cluster global config
    dns:  ""                # k8s external  DNS. This value or ip value MUST BE PROVIDED
    local: false            # True when deploying on "local K8s" provided by Docker Desktop.
  misc:                     # inf.misc contains miscellaneous configuration related to infrastructure
    useLoadTest: false      # If running under loading test or not
    useAzureStorage: false  # If catalog api uses azure storage or not
#  registry:                # Uncomment "registry" to specify registry secret
#    secretName:            # secretName is the name of the secret inside k8s   
#    server:                # Registry login server
#    login:                 # User login
#    pwd:                   # User pwd



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: webhooks-api
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /webhooks-api

image:
  repository: eshop/webhooks.api
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations: {}
  hosts:
    - chart-example.local
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ConnectionString
      key: webhooks__ConnectionString
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: EventBusConnection
      key: all__EventBusConnection
    - name: AzureServiceBusEnabled
      key: all__UseAzureServiceBus
    - name: IdentityUrl
      key: urls__IdentityUrl
    - name: IdentityUrlExternal
      key: urls__IdentityUrlExternal
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webhooks-api.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "webhooks-api.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "webhooks-api.name" . }}
    chart: {{ template "webhooks-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "webhooks-api.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "webhooks-api.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $ingressPath := include "pathBase" . -}}
{{- $serviceName := .Values.app.svc.webhooks }}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "webhooks-api.fullname" . }}
  labels:
    app: {{ template "webhooks-api.name" . }}
    chart: {{ template "webhooks-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $serviceName }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.webhooks }}
  labels:
    app: {{ template "webhooks-api.name" . }}
    chart: {{ template "webhooks-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "webhooks-api.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webhooks-api.fullname" . -}}
{{- $sqlsrv := include "sql-name" . -}}
{{- $identity := include "url-of" (list .Values.app.ingress.entries.identity .) -}}
{{- $protocol := include "protocol" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "webhooks-api.name" . }}
    chart: {{ template "webhooks-api.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  webhooks__ConnectionString: Server={{ $sqlsrv }};Initial Catalog={{ .Values.inf.sql.webhooks.db }};User Id={{ .Values.inf.sql.common.user }};Password={{ .Values.inf.sql.common.pwd }};
  urls__IdentityUrl: http://{{ $identity }}
  urls__IdentityUrlExternal: {{ $protocol }}://{{ $identity }}
  all__EventBusConnection: {{ .Values.inf.eventbus.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: ordering-backgroundtasks
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /ordering-backgroundtasks

image:
  repository: eshop/ordering.backgroundtasks
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
  hosts:
    - chart-example.local
  tls: []

cfg:
  checkUpdateTime: "15000"
  gracePeriodTime: "1"

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ConnectionString
      key: ordering__ConnectionString
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: EventBusConnection
      key: all__EventBusConnection
    - name: AzureServiceBusEnabled
      key: all__UseAzureServiceBus
    - name: UseLoadTest
      key: ordering__EnableLoadTest      
    - name: CheckUpdateTime
      key: graceperiodmanager__CheckUpdateTime
    - name: GracePeriodTime
      key: graceperiodmanager__GracePeriodTime
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'
probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60
    port: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "ordering-backgroundtasks.fullname" . -}}
{{- $cfgname :=  printf "cfg-%s" $name | trunc 63  }}

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "ordering-backgroundtasks.fullname" . }}
  labels:
    app: {{ template "ordering-backgroundtasks.name" . }}
    chart: {{ template "ordering-backgroundtasks.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "ordering-backgroundtasks.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "ordering-backgroundtasks.name" . }}
        release: {{ .Release.Name }}
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}            
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.orderingbackgroundtasks }}
  labels:
    app: {{ template "ordering-backgroundtasks.name" . }}
    chart: {{ template "ordering-backgroundtasks.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "ordering-backgroundtasks.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "ordering-backgroundtasks.fullname" . -}}
{{- $sqlsrv := include "sql-name" . -}}
{{- $cfgname :=  printf "cfg-%s" $name | trunc 63  }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ $cfgname }}"
  labels:
    app: {{ template "ordering-backgroundtasks.name" . }}
    chart: {{ template "ordering-backgroundtasks.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  ordering__ConnectionString: Server={{ $sqlsrv }};Initial Catalog={{ .Values.inf.sql.ordering.db }};User Id={{ .Values.inf.sql.common.user }};Password={{ .Values.inf.sql.common.pwd }};
  ordering__EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  all__EventBusConnection: {{ .Values.inf.eventbus.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"
  graceperiodmanager__CheckUpdateTime: "{{ .Values.cfg.checkUpdateTime }}"
  graceperiodmanager__GracePeriodTime: "{{ .Values.cfg.gracePeriodTime }}"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: ordering-signalrhub
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /ordering-signalrhub

image:
  repository: eshop/ordering.signalrhub
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
  hosts:
    - chart-example.local
  tls: []

cfg:
  checkUpdateTime: "15000"
  gracePeriodTime: "1"

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: EventBusConnection
      key: all__EventBusConnection
    - name: AzureServiceBusEnabled
      key: all__UseAzureServiceBus
    - name: IdentityUrl
      key: urls__IdentityUrl
    - name: SignalrStoreConnectionString
      key: signalr__StoreConnectionString
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'
    - name: IsClusterEnv
      values: 'True'



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "ordering-signalrhub.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "ordering-signalrhub.fullname" . }}
  labels:
    app: {{ template "ordering-signalrhub.name" . }}
    chart: {{ template "ordering-signalrhub.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "ordering-signalrhub.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "ordering-signalrhub.name" . }}
        release: {{ .Release.Name }}
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.orderingsignalrhub }}
  labels:
    app: {{ template "ordering-signalrhub.name" . }}
    chart: {{ template "ordering-signalrhub.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "ordering-signalrhub.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "ordering-signalrhub.fullname" . -}}
{{- $identity := include "url-of" (list .Values.app.ingress.entries.identity .) -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "ordering-signalrhub.name" . }}
    chart: {{ template "ordering-signalrhub.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  all__EventBusConnection: {{ .Values.inf.eventbus.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"
  signalr__StoreConnectionString: {{ .Values.inf.redis.keystore.constr }}
  urls__IdentityUrl: http://{{ $identity }}

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: eshop_backend_route
            virtual_hosts:
            - name: eshop_backend
              domains:
              - "*"
              routes:
              - name: "m-short"
                match:
                  prefix: "/m/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/marketing-api/"
                  cluster: marketing
              - name: "m-long"
                match:
                  prefix: "/marketing-api/"
                route:
                  auto_host_rewrite: true
                  cluster: marketing
          http_filters:
          - name: envoy.router      
          access_log:
          - name: envoy.file_access_log
            filter:
              not_health_check_filter: {}          
            config:
              json_format:
                time: "%START_TIME%"
                protocol: "%PROTOCOL%"
                duration: "%DURATION%"
                request_method: "%REQ(:METHOD)%"  
                request_host: "%REQ(HOST)%"  
                path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%" 
                response_flags: "%RESPONSE_FLAGS%"
                route_name: "%ROUTE_NAME%"
                upstream_host: "%UPSTREAM_HOST%"
                upstream_cluster: "%UPSTREAM_CLUSTER%"
                upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"     
              path: "/tmp/access.log"
  clusters:
  - name: marketing
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: marketing-api
        port_value: 80
  - name: locations
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: locations-api
        port_value: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: apigwwm
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /webmarketingapigw

image:
  repository: envoyproxy/envoy
  tag: v1.11.1

service:
  type: ClusterIP
  port: 80
  adminPort: 8001  

ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    ingress.kubernetes.io/rewrite-target: "/"
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env: {}

envoy:
  configPath: /etc/envoy

probes:
  liveness:
    path: /ready
    initialDelaySeconds: 5
    periodSeconds: 15
    port: 8001
  readiness:
    path: /ready
    initialDelaySeconds: 5
    periodSeconds: 60
    port: 8001

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "apigwwm.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
{{- $envoycfgname := printf "%s-%s" "envoy" $name -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "apigwwm.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "apigwwm.name" . }}
    chart: {{ template "apigwwm.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "apigwwm.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "apigwwm.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}           
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ $envoycfgname }}
          items:
          - key: envoy.yaml
            path: envoy.yaml
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: config
            mountPath: {{ .Values.envoy.configPath }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: admin
              containerPort: 8001
              protocol: TCP              
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $ingressPath := include "pathBase" . -}}
{{- $serviceName := .Values.app.svc.webmarketingapigw -}}

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "apigwwm.fullname" . }}
  labels:
    app: {{ template "apigwwm.name" . }}
    chart: {{ template "apigwwm.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
    {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $serviceName }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.webmarketingapigw }}
  labels:
    app: {{ template "apigwwm.name" . }}
    chart: {{ template "apigwwm.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
    - port: {{ .Values.service.adminPort }}
      targetPort: admin
      protocol: TCP
      name: admin      
  selector:
    app: {{ template "apigwwm.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "apigwwm.fullname" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "envoy-{{ $name }}"
  labels:
    app: {{ template "apigwwm.name" . }}
    chart: {{ template "apigwwm.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  {{ (.Files.Glob "envoy.yaml").AsConfig | indent 2 -}} 



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: catalog-api
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /catalog-api

image:
  repository: eshop/catalog.api
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80
  grpcPort: 81

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ConnectionString
      key: catalog__ConnectionString
    - name: PicBaseUrl
      key: catalog__PicBaseUrl
    - name: AzureStorageEnabled
      key: catalog__AzureStorageEnabled
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: EventBusConnection
      key: all__EventBusConnection
    - name: AzureServiceBusEnabled
      key: all__UseAzureServiceBus
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'
    - name: PORT
      value: "80"
    - name: GRPC_PORT
      value: "81"
probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60
    port: 80



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "catalog-api.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "catalog-api.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "catalog-api.name" . }}
    chart: {{ template "catalog-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "catalog-api.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "catalog-api.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}               
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: grpc
              containerPort: 81
              protocol: TCP              
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.catalog }}
  labels:
    app: {{ template "catalog-api.name" . }}
    chart: {{ template "catalog-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
    - port: {{ .Values.service.grpcPort }}
      targetPort: grpc
      protocol: TCP
      name: grpc     
  selector:
    app: {{ template "catalog-api.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "catalog-api.fullname" . -}}
{{- $sqlsrv := include "sql-name" . -}}
{{- $webshoppingapigw := include "url-of" (list .Values.app.ingress.entries.webshoppingapigw .) -}}
{{- $protocol := include "protocol" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "catalog-api.name" . }}
    chart: {{ template "catalog-api.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  catalog__ConnectionString: Server={{ $sqlsrv }};Initial Catalog={{ .Values.inf.sql.catalog.db }};User Id={{ .Values.inf.sql.common.user }};Password={{ .Values.inf.sql.common.pwd }};
  catalog__PicBaseUrl: {{ $protocol }}://{{ $webshoppingapigw }}/c/api/v1/catalog/items/[0]/pic/
  catalog__AzureStorageEnabled: "{{ .Values.inf.misc.useAzureStorage }}"
  all__EventBusConnection: {{ .Values.inf.eventbus.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: webmvc
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /webmvc

image:
  repository: eshop/webmvc
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations: {}
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: UseLoadTest
      key: all_EnableLoadTest
    - name: DPConnectionString
      key: webmvc__keystore
    - name: PurchaseUrl
      key: internalurls__apigwws
    - name: ExternalPurchaseUrl
      key: urls__apigwws
    - name: CallBackUrl
      key: urls__mvc
    - name: IdentityUrl
      key: urls__IdentityUrl
    - name: MarketingUrl
      key: internalurls__apigwwm
    - name: IdentityUrlHC
      key: internalurls__identity__hc      
    - name: SignalrHubUrl
      key: urls__apigwws
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'
    - name: IsClusterEnv
      value: 'True'



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webmvc.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "webmvc.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "webmvc.name" . }}
    chart: {{ template "webmvc.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "webmvc.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "webmvc.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $ingressPath := include "pathBase" . -}}
{{- $serviceName := .Values.app.svc.mvc -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "webmvc.fullname" . }}
  labels:
    app: {{ template "webmvc.name" . }}
    chart: {{ template "webmvc.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
    {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $serviceName }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.mvc }}
  labels:
    app: {{ template "webmvc.name" . }}
    chart: {{ template "webmvc.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "webmvc.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webmvc.fullname" . -}}
{{- $identity := include "url-of" (list .Values.app.ingress.entries.identity .) -}}
{{- $webshoppingapigw := include "url-of" (list .Values.app.ingress.entries.webshoppingapigw .) -}}
{{- $mvc := include "url-of" (list .Values.app.ingress.entries.mvc .) -}}
{{- $protocol := include "protocol" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "webmvc.name" . }}
    chart: {{ template "webmvc.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"
  all_EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  webmvc__keystore: {{ .Values.inf.redis.keystore.constr }}
  internalurls__apigwws: http://{{ .Values.app.svc.webshoppingapigw }}
  internalurls__apigwwm: http://{{ .Values.app.svc.webmarketingapigw }}
  internalurls__identity__hc: http://{{ .Values.app.svc.identity }}/hc
  urls__apigwws: {{ $protocol }}://{{ $webshoppingapigw }}
  urls__mvc: {{ $protocol }}://{{ $mvc }}
  urls__IdentityUrl: {{ $protocol }}://{{ $identity }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- if .Values.inf.k8s.local -}}
{{- $ingressPath := include "pathBase" . -}}
{{- $serviceName := .Values.app.svc.mvc }}
{{- $name := include "webmvc.fullname" . -}} 
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ $name }}-local
  labels:
    app: {{ template "webmvc.name" . }}
    chart: {{ template "webmvc.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}    
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: {{ $serviceName }}
          servicePort: http
        path: {{ $ingressPath }}
{{- end -}}
{{- end -}}

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: eshop_backend_route
            virtual_hosts:
            - name: eshop_backend
              domains:
              - "*"
              routes:
              - name: "c-short"
                match:
                  prefix: "/c/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/catalog-api/"
                  cluster: catalog
              - name: "c-long"
                match:
                  prefix: "/catalog-api/"
                route:
                  auto_host_rewrite: true
                  cluster: catalog
              - name: "o-short"
                match:
                  prefix: "/o/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/ordering-api/"
                  cluster: ordering
              - name: "o-long"
                match:
                  prefix: "/ordering-api/"
                route:
                  auto_host_rewrite: true
                  cluster: ordering
              - name: "h-long"
                match:
                  prefix: "/hub/notificationhub"
                route:
                  auto_host_rewrite: true
                  cluster: signalr-hub
                  timeout: 300s
              - name: "b-short"
                match:
                  prefix: "/b/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/basket-api/"
                  cluster: basket
              - name: "b-long"
                match:
                  prefix: "/basket-api/"
                route:
                  auto_host_rewrite: true
                  cluster: basket
              - name: "agg"
                match:
                  prefix: "/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/"
                  cluster: shoppingagg
          http_filters:
          - name: envoy.router
          access_log:
          - name: envoy.file_access_log
            filter:
              not_health_check_filter: {}
            config:
              json_format:
                time: "%START_TIME%"
                protocol: "%PROTOCOL%"
                duration: "%DURATION%"
                request_method: "%REQ(:METHOD)%"
                request_host: "%REQ(HOST)%"
                path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                response_flags: "%RESPONSE_FLAGS%"
                route_name: "%ROUTE_NAME%"
                upstream_host: "%UPSTREAM_HOST%"
                upstream_cluster: "%UPSTREAM_CLUSTER%"
                upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"
              path: "/tmp/access.log"
  clusters:
  - name: shoppingagg
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: webshoppingagg
        port_value: 80
  - name: catalog
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: catalog-api
        port_value: 80
  - name: basket
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: basket-api
        port_value: 80
  - name: ordering
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: ordering-api
        port_value: 80
  - name: signalr-hub
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: ordering-signalrhub
        port_value: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: apigwms
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /mobileshoppingapigw

image:
  repository: envoyproxy/envoy
  tag: v1.11.1

service:
  type: ClusterIP
  port: 80
  adminPort: 8001  

ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    ingress.kubernetes.io/rewrite-target: "/"
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

env: {}

envoy:
  configPath: /etc/envoy

probes:
  liveness:
    path: /ready
    initialDelaySeconds: 5
    periodSeconds: 15
    port: 8001
  readiness:
    path: /ready
    initialDelaySeconds: 5
    periodSeconds: 60
    port: 8001

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "apigwms.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
{{- $envoycfgname := printf "%s-%s" "envoy" $name -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "apigwms.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "apigwms.name" . }}
    chart: {{ template "apigwms.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "apigwms.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "apigwms.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}           
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ $envoycfgname }}
          items:
          - key: envoy.yaml
            path: envoy.yaml
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: config
            mountPath: {{ .Values.envoy.configPath }}         
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: admin
              containerPort: 8001
              protocol: TCP              
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $ingressPath := include "pathBase" . -}}
{{- $serviceName := .Values.app.svc.mobileshoppingapigw -}}

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "apigwms.fullname" . }}
  labels:
    app: {{ template "apigwms.name" . }}
    chart: {{ template "apigwms.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $serviceName }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.mobileshoppingapigw }}
  labels:
    app: {{ template "apigwms.name" . }}
    chart: {{ template "apigwms.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
    - port: {{ .Values.service.adminPort }}
      targetPort: admin
      protocol: TCP
      name: admin     
  selector:
    app: {{ template "apigwms.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "apigwms.fullname" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "envoy-{{ $name }}"
  labels:
    app: {{ template "apigwms.name" . }}
    chart: {{ template "apigwms.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  {{ (.Files.Glob "envoy.yaml").AsConfig | indent 2 }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: keystore-data
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1

image:
  repository: redis
  tag: 4.0.10
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 6379


resources: {}

nodeSelector: {}

tolerations: []

affinity: {}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "keystore-data.fullname" . }}
  labels:
    app: {{ template "keystore-data.name" . }}
    chart: {{ template "keystore-data.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "keystore-data.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "keystore-data.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 6379
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.inf.redis.keystore.svc }}
  labels:
    app: {{ template "keystore-data.name" . }}
    chart: {{ template "keystore-data.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "keystore-data.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: payment-api
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /payment-api

image:
  repository: eshop/payment.api
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: EventBusConnection
      key: all__EventBusConnection
    - name: AzureServiceBusEnabled
      key: all__UseAzureServiceBus
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'
probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60
    port: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "payment-api.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "payment-api.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "payment-api.name" . }}
    chart: {{ template "payment-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "payment-api.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "payment-api.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}                
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.payment }}
  labels:
    app: {{ template "payment-api.name" . }}
    chart: {{ template "payment-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "payment-api.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "payment-api.fullname" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "payment-api.name" . }}
    chart: {{ template "payment-api.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  all__EventBusConnection: {{ .Values.inf.eventbus.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: webshoppingagg
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /webshoppingagg

image:
  repository: eshop/webshoppingagg
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80
  grpcPort: 81

ingress:
  enabled: false
  annotations: {}
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: urls__basket
      key: internalurls__basket
    - name: urls__catalog
      key: internalurls__catalog
    - name: urls__orders
      key: internalurls__ordering
    - name: urls__identity
      key: internalurls__identity
    - name: CatalogUrlHC
      key: internalurls__catalog__hc
    - name: BasketUrlHC
      key: internalurls__basket__hc
    - name: IdentityUrlHC
      key: internalurls__identity__hc
    - name: OrderingUrlHC
      key: internalurls__ordering__hc
    - name: MarketingUrlHC
      key: internalurls__marketing__hc
    - name: PaymentUrlHC
      key: internalurls__payment__hc
    - name: LocationUrlHC
      key: internalurls__location__hc
    - name: urls__grpcBasket
      key: internalurls__grpcBasket
    - name: urls__grpcCatalog
      key: internalurls__grpcCatalog
    - name: urls__grpcOrdering
      key: internalurls__grpcOrdering

      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: ASPNETCORE_URLS
      value: http://0.0.0.0:80
    - name: OrchestratorType
      value: 'K8S'
    - name: IsClusterEnv
      value: 'True'
probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60      
    port: 80



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webshoppingagg.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "webshoppingagg.fullname" . }}
  labels:
    app: {{ template "webshoppingagg.name" . }}
    chart: {{ template "webshoppingagg.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}    
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "webshoppingagg.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "webshoppingagg.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}              
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.webshoppingagg }}
  labels:
    app: {{ template "webshoppingagg.name" . }}
    chart: {{ template "webshoppingagg.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "webshoppingagg.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webshoppingagg.fullname" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "webshoppingagg.name" . }}
    chart: {{ template "webshoppingagg.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all_EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  webshoppingagg__keystore: {{ .Values.inf.redis.keystore.constr }}
  internalurls__basket: http://{{ .Values.app.svc.basket }}
  internalurls__catalog: http://{{ .Values.app.svc.catalog }}
  internalurls__identity: http://{{ .Values.app.svc.identity }}
  internalurls__ordering: http://{{ .Values.app.svc.ordering }}
  internalurls__basket__hc: http://{{ .Values.app.svc.basket }}/hc
  internalurls__catalog__hc: http://{{ .Values.app.svc.catalog }}/hc
  internalurls__identity__hc: http://{{ .Values.app.svc.identity }}/hc
  internalurls__ordering__hc: http://{{ .Values.app.svc.ordering }}/hc
  internalurls__marketing__hc: http://{{ .Values.app.svc.marketing }}/hc
  internalurls__payment__hc: http://{{ .Values.app.svc.payment }}/hc
  internalurls__location__hc: http://{{ .Values.app.svc.locations }}/hc
  internalurls__grpcBasket: "http://{{ .Values.app.svc.basket }}:{{ .Values.service.grpcPort }}"
  internalurls__grpcCatalog: "http://{{ .Values.app.svc.catalog }}:{{ .Values.service.grpcPort }}"
  internalurls__grpcOrdering: "http://{{ .Values.app.svc.ordering }}:{{ .Values.service.grpcPort }}"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: tt-ssl
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

applicationName: eshop
issuerName: letsencrypt-staging
certName: eshop-cert-staging
environment: staging
server: https://acme-staging-v02.api.letsencrypt.org/directory
certSecretName: eshop-letsencrypt-staging
issuerSecretName: letsencrypt-staging
ingressClass: addon-http-application-routing

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

applicationName: eshop
issuerName: letsencrypt-prod
certName: eshop-cert-prod
environment: prod
server: https://acme-v02.api.letsencrypt.org/directory
certSecretName: eshop-letsencrypt-prod
issuerSecretName: letsencrypt-prod
ingressClass: addon-http-application-routing

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: {{ .Values.issuerName }}
  namespace: default
  environment: {{ .Values.environment }}
  app: {{ .Values.applicationName }}
spec:
  acme:
    server: {{ .Values.server }}
    email: not@used.com
    privateKeySecretRef:
      name: {{ .Values.issuerSecretName }}
    solvers:
    - http01:
        ingress:
          class: {{ .Values.ingressClass }}      

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: rabbitmq
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1

image:
  repository: rabbitmq
  tag: 3-management
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 5672


resources: {}

nodeSelector: {}

tolerations: []

affinity: {}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "rabbitmq.fullname" . }}
  labels:
    app: {{ template "rabbitmq.name" . }}
    chart: {{ template "rabbitmq.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "rabbitmq.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "rabbitmq.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 5672
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.inf.eventbus.svc }}
  labels:
    app: {{ template "rabbitmq.name" . }}
    chart: {{ template "rabbitmq.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "rabbitmq.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: locations-api
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /locations-api

image:
  repository: eshop/locations.api
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: EventBusConnection
      key: all__EventBusConnection
    - name: AzureServiceBusEnabled
      key: all__UseAzureServiceBus
    - name: UseLoadTest
      key: all_EnableLoadTest
    - name: IdentityUrl
      key: internalurls__IdentityUrl
    - name: IdentityUrlExternal
      key: urls__IdentityUrl
    - name: ConnectionString
      key: locations__ConnectionString
    - name: Database
      key: locations__Database
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'
probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60
    port: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "locations-api.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "locations-api.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "locations-api.name" . }}
    chart: {{ template "locations-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "locations-api.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "locations-api.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}     
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}            
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.locations }}
  labels:
    app: {{ template "locations-api.name" . }}
    chart: {{ template "locations-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "locations-api.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "locations-api.fullname" . -}}
{{- $identity := include "url-of" (list .Values.app.ingress.entries.identity .) -}}
{{- $mongo := include "mongo-name" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "locations-api.name" . }}
    chart: {{ template "locations-api.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  all__EventBusConnection: {{ .Values.inf.eventbus.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"
  all_EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  internalurls__IdentityUrl: http://{{ .Values.app.svc.identity }}
  urls__IdentityUrl: {{ $identity }}
  locations__ConnectionString: mongodb://{{ $mongo }}
  locations__Database: {{ .Values.inf.mongo.locations.database }}

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: eshop_backend_route
            virtual_hosts:
            - name: eshop_backend
              domains:
              - "*"
              routes:
              - name: "c-short"
                match:
                  prefix: "/c/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/catalog-api/"
                  cluster: catalog
              - name: "c-long"
                match:
                  prefix: "/catalog-api/"
                route:
                  auto_host_rewrite: true
                  cluster: catalog
              - name: "o-short"
                match:
                  prefix: "/o/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/ordering-api/"
                  cluster: ordering
              - name: "o-long"
                match:
                  prefix: "/ordering-api/"
                route:
                  auto_host_rewrite: true
                  cluster: ordering
              - name: "h-long"
                match:
                  prefix: "/hub/notificationhub"
                route:
                  auto_host_rewrite: true
                  cluster: signalr-hub
                  timeout: 300s
              - name: "b-short"
                match:
                  prefix: "/b/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/basket-api/"
                  cluster: basket
              - name: "b-long"
                match:
                  prefix: "/basket-api/"
                route:
                  auto_host_rewrite: true
                  cluster: basket
              - name: "agg"
                match:
                  prefix: "/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/"
                  cluster: shoppingagg
          http_filters:
          - name: envoy.router
          access_log:
          - name: envoy.file_access_log
            filter:
              not_health_check_filter: {}
            config:
              json_format:
                time: "%START_TIME%"
                protocol: "%PROTOCOL%"
                duration: "%DURATION%"
                request_method: "%REQ(:METHOD)%"
                request_host: "%REQ(HOST)%"
                path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                response_flags: "%RESPONSE_FLAGS%"
                route_name: "%ROUTE_NAME%"
                upstream_host: "%UPSTREAM_HOST%"
                upstream_cluster: "%UPSTREAM_CLUSTER%"
                upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"
              path: "/tmp/access.log"
  clusters:
  - name: shoppingagg
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: webshoppingagg
        port_value: 80
  - name: catalog
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: catalog-api
        port_value: 80
  - name: basket
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: basket-api
        port_value: 80
  - name: ordering
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: ordering-api
        port_value: 80
  - name: signalr-hub
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: ordering-signalrhub
        port_value: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: apigwws
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /webshoppingapigw

image:
  repository: envoyproxy/envoy
  tag: v1.11.1

service:
  type: ClusterIP
  port: 80
  adminPort: 8001

ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    ingress.kubernetes.io/rewrite-target: "/"
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env: {}

envoy:
  configPath: /etc/envoy

probes:
  liveness:
    path: /ready
    initialDelaySeconds: 5
    periodSeconds: 15
    port: 8001
  readiness:
    path: /ready
    initialDelaySeconds: 5
    periodSeconds: 60
    port: 8001

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "apigwws.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
{{- $envoycfgname := printf "%s-%s" "envoy" $name -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "apigwws.fullname" . }}
  labels:
    app: {{ template "apigwws.name" . }}
    chart: {{ template "apigwws.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "apigwws.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "apigwws.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}           
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ $envoycfgname }}
          items:
          - key: envoy.yaml
            path: envoy.yaml
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}        
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
          - name: config
            mountPath: {{ .Values.envoy.configPath }}      
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: admin
              containerPort: 8001
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $ingressPath := include "pathBase" . -}}
{{- $serviceName := .Values.app.svc.webshoppingapigw -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "apigwws.fullname" . }}
  labels:
    app: {{ template "apigwws.name" . }}
    chart: {{ template "apigwws.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
    {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $serviceName }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.webshoppingapigw }}
  labels:
    app: {{ template "apigwws.name" . }}
    chart: {{ template "apigwws.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
    - port: {{ .Values.service.adminPort }}
      targetPort: admin
      protocol: TCP
      name: admin
  selector:
    app: {{ template "apigwws.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "apigwws.fullname" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "envoy-{{ $name }}"
  labels:
    app: {{ template "apigwws.name" . }}
    chart: {{ template "apigwws.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  {{ (.Files.Glob "envoy.yaml").AsConfig | indent 2 }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: basket-data
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1

image:
  repository: redis
  tag: 4.0.10
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 6379


resources: {}

nodeSelector: {}

tolerations: []

affinity: {}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "basket-data.fullname" . }}
  labels:
    app: {{ template "basket-data.name" . }}
    chart: {{ template "basket-data.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "basket-data.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "basket-data.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 6379
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.inf.redis.basket.svc }}
  labels:
    app: {{ template "basket-data.name" . }}
    chart: {{ template "basket-data.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "basket-data.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: ordering-api
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /ordering-api

image:
  repository: eshop/ordering.api
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80
  grpcPort: 81

ingress:
  enabled: false
  annotations: {}
  hosts:
    - chart-example.local
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ConnectionString
      key: ordering__ConnectionString
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: EventBusConnection
      key: all__EventBusConnection
    - name: AzureServiceBusEnabled
      key: all__UseAzureServiceBus
    - name: UseLoadTest
      key: ordering__EnableLoadTest
    - name: IdentityUrl
      key: urls__IdentityUrl
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'
    - name: PORT
      value: "80"
    - name: GRPC_PORT
      value: "81"      
probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60
    port: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "ordering-api.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "ordering-api.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "ordering-api.name" . }}
    chart: {{ template "ordering-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "ordering-api.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "ordering-api.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}                      
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: grpc
              containerPort: 81
              protocol: TCP              
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.ordering }}
  labels:
    app: {{ template "ordering-api.name" . }}
    chart: {{ template "ordering-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
    - port: {{ .Values.service.grpcPort }}
      targetPort: grpc
      protocol: TCP
      name: grpc
  selector:
    app: {{ template "ordering-api.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "ordering-api.fullname" . -}}
{{- $sqlsrv := include "sql-name" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "ordering-api.name" . }}
    chart: {{ template "ordering-api.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  ordering__ConnectionString: Server={{ $sqlsrv }};Initial Catalog={{ .Values.inf.sql.ordering.db }};User Id={{ .Values.inf.sql.common.user }};Password={{ .Values.inf.sql.common.pwd }};
  ordering__EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  urls__IdentityUrl: http://{{ .Values.app.svc.identity }}
  all__EventBusConnection: {{ .Values.inf.eventbus.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: marketing-api
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /marketing-api

image:
  repository: eshop/marketing.api
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: EventBusConnection
      key: all__EventBusConnection
    - name: AzureServiceBusEnabled
      key: all__UseAzureServiceBus
    - name: UseLoadTest
      key: all_EnableLoadTest
    - name: IdentityUrl
      key: internalurls__IdentityUrl
    - name: IdentityUrlExternal
      key: urls__IdentityUrl
    - name: ConnectionString
      key: marketing__ConnectionString
    - name: MongoConnectionString
      key: marketing__MongoConnectionString
    - name: MongoDatabase
      key: marketing__MongoDatabase
    - name: PicBaseUrl
      key: marketing__PicBaseUrl
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'
probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60
    port: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "marketing-api.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "marketing-api.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "marketing-api.name" . }}
    chart: {{ template "marketing-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "marketing-api.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "marketing-api.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}            
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.marketing }}
  labels:
    app: {{ template "marketing-api.name" . }}
    chart: {{ template "marketing-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "marketing-api.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "marketing-api.fullname" . -}}
{{- $identity := include "url-of" (list .Values.app.ingress.entries.identity .) -}}
{{- $webshoppingapigw := include "url-of" (list .Values.app.ingress.entries.webshoppingapigw .) -}}
{{- $mongo := include "mongo-name" . -}}
{{- $sqlsrv := include "sql-name" . -}}
{{- $protocol := include "protocol" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "marketing-api.name" . }}
    chart: {{ template "marketing-api.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  all__EventBusConnection: {{ .Values.inf.eventbus.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"
  all_EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  internalurls__IdentityUrl: http://{{ .Values.app.svc.identity }}
  urls__IdentityUrl: {{ $protocol }}://{{ $identity }}
  marketing__ConnectionString: Server={{ $sqlsrv }};Initial Catalog={{ .Values.inf.sql.marketing.db }};User Id={{ .Values.inf.sql.common.user }};Password={{ .Values.inf.sql.common.pwd }};
  marketing__MongoConnectionString: mongodb://{{ $mongo }}
  marketing__MongoDatabase: {{ .Values.inf.mongo.marketing.database }} 
  marketing__PicBaseUrl: {{ $protocol }}://{{ $webshoppingapigw }}/c/api/v1/catalog/items/[0]/pic/

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: webstatus
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /webstatus

image:
  repository: eshop/webstatus
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations: {

  }
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: HealthChecks-UI__HealthChecks__0__Name
      key: name__mvc__hc
    - name: HealthChecks-UI__HealthChecks__0__Uri
      key: internalurls__mvc__hc
    - name: HealthChecks-UI__HealthChecks__1__Name
      key: name__spa__hc
    - name: HealthChecks-UI__HealthChecks__1__Uri
      key: internalurls__spa__hc
    - name: HealthChecks-UI__HealthChecks__2__Name
      key: name__apigwwsagg__hc
    - name: HealthChecks-UI__HealthChecks__2__Uri
      key: internalurls__apigwwsagg__hc
    - name: HealthChecks-UI__HealthChecks__3__Name
      key: name__apigwmsagg__hc
    - name: HealthChecks-UI__HealthChecks__3__Uri
      key: internalurls__apigwmsagg__hc
    - name: HealthChecks-UI__HealthChecks__4__Name
      key: name__ordering__hc
    - name: HealthChecks-UI__HealthChecks__4__Uri
      key: internalurls__ordering__hc
    - name: HealthChecks-UI__HealthChecks__5__Name
      key: name__basket__hc
    - name: HealthChecks-UI__HealthChecks__5__Uri
      key: internalurls__basket__hc
    - name: HealthChecks-UI__HealthChecks__6__Name
      key: name__catalog__hc
    - name: HealthChecks-UI__HealthChecks__6__Uri
      key: internalurls__catalog__hc
    - name: HealthChecks-UI__HealthChecks__7__Name
      key: name__identity__hc
    - name: HealthChecks-UI__HealthChecks__7__Uri
      key: internalurls__identity__hc
    - name: HealthChecks-UI__HealthChecks__8__Name
      key: name__marketing__hc
    - name: HealthChecks-UI__HealthChecks__8__Uri
      key: internalurls__marketing__hc
    - name: HealthChecks-UI__HealthChecks__9__Name
      key: name__locations__hc
    - name: HealthChecks-UI__HealthChecks__9__Uri
      key: internalurls__locations__hc
    - name: HealthChecks-UI__HealthChecks__10__Name
      key: name__payment__hc
    - name: HealthChecks-UI__HealthChecks__10__Uri
      key: internalurls__payment__hc
    - name: HealthChecks-UI__HealthChecks__11__Name
      key: name__signalrhub__hc
    - name: HealthChecks-UI__HealthChecks__11__Uri
      key: internalurls__signalrhub__hc
    - name: HealthChecks-UI__HealthChecks__12__Name
      key: name__orderingbackground__hc
    - name: HealthChecks-UI__HealthChecks__12__Uri
      key: internalurls__orderingbackground__hc

      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webstatus.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "webstatus.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "webstatus.name" . }}
    chart: {{ template "webstatus.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "webstatus.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "webstatus.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $fullName := include "webstatus.fullname" . -}}
{{- $ingressPath := include "pathBase" . -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "webstatus.fullname" . }}
  labels:
    app: {{ template "webstatus.name" . }}
    chart: {{ template "webstatus.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $.Values.app.svc.status }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.status }}
  labels:
    app: {{ template "webstatus.name" . }}
    chart: {{ template "webstatus.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "webstatus.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webstatus.fullname" . -}}
{{- $identity := include "url-of" (list .Values.app.ingress.entries.identity .) -}}
{{- $webshoppingapigw := include "url-of" (list .Values.app.ingress.entries.webshoppingapigw .) -}}
{{- $mvc := include "url-of" (list .Values.app.ingress.entries.mvc .) -}}
{{- $mongo := include "mongo-name" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "webstatus.name" . }}
    chart: {{ template "webstatus.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"
  all_EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  webstatus__keystore: {{ .Values.inf.redis.keystore.constr }}
  name__mvc__hc: WebMVC HTTP Check
  internalurls__mvc__hc: http://{{ .Values.app.svc.mvc }}/hc
  name__spa__hc: WebSPA HTTP Check
  internalurls__spa__hc: http://{{ .Values.app.svc.spa }}/hc
  name__apigwws__hc: Web Shopping API GW HTTP Check
  internalurls__apigwws__hc: http://{{ .Values.app.svc.webshoppingapigw }}:8001/ready
  name__apigwwm__hc: Web Marketing API GW HTTP Check
  internalurls__apigwwm__hc: http://{{ .Values.app.svc.webmarketingapigw }}:8001/ready
  name__apigwms__hc: Mobile Shopping API GW HTTP Check
  internalurls__apigwms__hc: http://{{ .Values.app.svc.mobileshoppingapigw }}:8001/ready
  name__apigwmm__hc: Mobile Marketing API GW HTTP Check
  internalurls__apigwmm__hc: http://{{ .Values.app.svc.mobilemarketingapigw }}:8001/ready
  name__apigwwsagg__hc: Web Shopping Aggregator GW HTTP Check
  internalurls__apigwwsagg__hc: http://{{ .Values.app.svc.webshoppingagg }}/hc
  name__apigwmsagg__hc: Mobile Shopping Aggregator HTTP Check
  internalurls__apigwmsagg__hc: http://{{ .Values.app.svc.mobileshoppingagg }}/hc
  name__ordering__hc: Ordering HTTP Check
  internalurls__ordering__hc: http://{{ .Values.app.svc.ordering }}/hc
  name__orderingbackground__hc: Ordering HTTP Background Check
  internalurls__orderingbackground__hc: http://{{ .Values.app.svc.orderingbackgroundtasks }}/hc
  name__basket__hc: Basket HTTP Check
  internalurls__basket__hc: http://{{ .Values.app.svc.basket }}/hc
  name__catalog__hc: Catalog HTTP Check
  internalurls__catalog__hc: http://{{ .Values.app.svc.catalog }}/hc
  name__identity__hc: Identity HTTP Check
  internalurls__identity__hc: http://{{ .Values.app.svc.identity }}/hc
  name__marketing__hc: Marketing HTTP Check
  internalurls__marketing__hc: http://{{ .Values.app.svc.marketing }}/hc
  name__locations__hc: Locations HTTP Check
  internalurls__locations__hc: http://{{ .Values.app.svc.locations }}/hc
  name__payment__hc: Payment HTTP Check
  internalurls__payment__hc: http://{{ .Values.app.svc.payment }}/hc
  name__signalrhub__hc: Ordering SignalR Hub HTTP Check
  internalurls__signalrhub__hc: http://{{ .Values.app.svc.orderingsignalrhub }}/hc


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: identity-api
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /identity

image:
  repository: eshop/identity.api
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations: {}
  hosts:
    - chart-example.local
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

env:
  urls:
  configmap:
    - name: ConnectionString
      key: identity__ConnectionString
    - name: DPConnectionString
      key: identity__keystore
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: MvcClient
      key: mvc_e
    - name: SpaClient
      key: spa_e
    - name: LocationApiClient
      key: locations_e
    - name: MarketingApiClient
      key: marketing_e
    - name: BasketApiClient
      key: basket_e
    - name: OrderingApiClient
      key: ordering_e
    - name: MobileShoppingAggClient
      key: mobileshoppingagg_e
    - name: WebShoppingAggClient
      key: webshoppingagg_e
    - name: XamarinCallback
      key: xamarin_callback_e
    - name: WebhooksApiClient
      key: webhooksapi_e
    - name: WebhooksWebClient
      key: webhooksweb_e
    - name: EnableDevspaces
      key: enableDevspaces
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'
    - name: IsClusterEnv
      value: 'True'

probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60
    port: 80

enableDevspaces: "false"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "identity-api.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "identity-api.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "identity-api.name" . }}
    chart: {{ template "identity-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "identity-api.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "identity-api.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}           
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $ingressPath := include "pathBase" . -}}
{{- $serviceName := .Values.app.svc.identity }}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "identity-api.fullname" . }}
  labels:
    app: {{ template "identity-api.name" . }}
    chart: {{ template "identity-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
    {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $serviceName }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.identity }}
  labels:
    app: {{ template "identity-api.name" . }}
    chart: {{ template "identity-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "identity-api.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "identity-api.fullname" . -}}
{{- $sqlsrv := include "sql-name" . -}}
{{- $mvc_url := include "url-of" (list .Values.app.ingress.entries.mvc  .) -}}
{{- $spa_url := include "url-of" (list .Values.app.ingress.entries.spa .) -}}
{{- $locations_url := include "url-of" (list .Values.app.ingress.entries.locations .) -}}
{{- $marketing_url := include "url-of" (list .Values.app.ingress.entries.marketing .) -}}
{{- $basket_url := include "url-of" (list .Values.app.ingress.entries.basket .) -}}
{{- $ordering_url := include "url-of" (list .Values.app.ingress.entries.ordering .) -}}
{{- $mobileshoppingagg := include "url-of" (list .Values.app.ingress.entries.mobileshoppingagg .) -}}
{{- $webhoppingagg := include "url-of" (list .Values.app.ingress.entries.webshoppingagg .) -}}
{{- $xamarincallback := include "url-of" (list "xamarincallback" .) -}}
{{- $webhooks_url := include "url-of" (list .Values.app.ingress.entries.webhooks .) -}}
{{- $webhooksweb_url := include "url-of" (list .Values.app.ingress.entries.webhooksweb .) -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "identity-api.name" . }}
    chart: {{ template "identity-api.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  identity__ConnectionString: Server={{ $sqlsrv }};Initial Catalog={{ .Values.inf.sql.identity.db }};User Id={{ .Values.inf.sql.common.user }};Password={{ .Values.inf.sql.common.pwd }};
  identity__keystore: {{ .Values.inf.redis.keystore.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  mvc_e: http://{{ $mvc_url }}
  spa_e: http://{{ $spa_url }}
  locations_e: http://{{ $locations_url }}
  marketing_e: http://{{ $marketing_url }}
  basket_e: http://{{ $basket_url }}
  ordering_e: http://{{ $ordering_url }}
  mobileshoppingagg_e: http://{{ $mobileshoppingagg }}
  webshoppingagg_e: http://{{ $webhoppingagg }}
  xamarin_callback_e: http://{{ $xamarincallback }}
  webhooksapi_e:  http://{{ $webhooks_url }}
  webhooksweb_e: http://{{ $webhooksweb_url }}
  enableDevspaces: "{{ .Values.enableDevspaces }}"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- if .Values.inf.k8s.local -}}
{{- $ingressPath := include "pathBase" . -}}
{{- $serviceName := .Values.app.svc.identity }}
{{- $name := include "identity-api.fullname" . -}} 
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ $name }}-local
  labels:
    app: {{ template "identity-api.name" . }}
    chart: {{ template "identity-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}    
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: {{ $serviceName }}
          servicePort: http
        path: {{ $ingressPath }}
{{- end -}}
{{- end -}}

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: mobileshoppingagg
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /mobileshoppingagg

image:
  repository: eshop/mobileshoppingagg
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80
  grpcPort: 81

ingress:
  enabled: false
  annotations: {}
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: urls__basket
      key: internalurls__basket
    - name: urls__catalog
      key: internalurls__catalog
    - name: urls__orders
      key: internalurls__ordering
    - name: urls__identity
      key: internalurls__identity
    - name: CatalogUrlHC
      key: internalurls__catalog__hc
    - name: BasketUrlHC
      key: internalurls__basket__hc
    - name: IdentityUrlHC
      key: internalurls__identity__hc
    - name: OrderingUrlHC
      key: internalurls__ordering__hc
    - name: MarketingUrlHC
      key: internalurls__marketing__hc
    - name: PaymentUrlHC
      key: internalurls__payment__hc
    - name: LocationUrlHC
      key: internalurls__location__hc
    - name: urls__grpcBasket
      key: internalurls__grpcBasket
    - name: urls__grpcCatalog
      key: internalurls__grpcCatalog
    - name: urls__grpcOrdering
      key: internalurls__grpcOrdering      
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: ASPNETCORE_URLS
      value: http://0.0.0.0:80
    - name: OrchestratorType
      value: 'K8S'
    - name: IsClusterEnv
      value: 'True'
probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60
    port: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "mobileshoppingagg.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "mobileshoppingagg.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "mobileshoppingagg.name" . }}
    chart: {{ template "mobileshoppingagg.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "mobileshoppingagg.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "mobileshoppingagg.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}                
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.mobileshoppingagg }}
  labels:
    app: {{ template "mobileshoppingagg.name" . }}
    chart: {{ template "mobileshoppingagg.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "mobileshoppingagg.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "mobileshoppingagg.fullname" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "mobileshoppingagg.name" . }}
    chart: {{ template "mobileshoppingagg.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all_EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  mobileshoppingagg__keystore: {{ .Values.inf.redis.keystore.constr }}
  internalurls__basket: http://{{ .Values.app.svc.basket }}
  internalurls__catalog: http://{{ .Values.app.svc.catalog }}
  internalurls__identity: http://{{ .Values.app.svc.identity }}
  internalurls__ordering: http://{{ .Values.app.svc.ordering }}
  internalurls__basket__hc: http://{{ .Values.app.svc.basket }}/hc
  internalurls__catalog__hc: http://{{ .Values.app.svc.catalog }}/hc
  internalurls__identity__hc: http://{{ .Values.app.svc.identity }}/hc
  internalurls__ordering__hc: http://{{ .Values.app.svc.ordering }}/hc
  internalurls__marketing__hc: http://{{ .Values.app.svc.marketing }}/hc
  internalurls__payment__hc: http://{{ .Values.app.svc.payment }}/hc
  internalurls__location__hc: http://{{ .Values.app.svc.locations }}/hc
  internalurls__grpcBasket: "http://{{ .Values.app.svc.basket }}:{{ .Values.service.grpcPort }}"
  internalurls__grpcCatalog: "http://{{ .Values.app.svc.catalog }}:{{ .Values.service.grpcPort }}"
  internalurls__grpcOrdering: "http://{{ .Values.app.svc.ordering }}:{{ .Values.service.grpcPort }}"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: basket-api
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /basket-api

image:
  repository: eshop/basket.api
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80
  grpcPort: 81  

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ConnectionString
      key: basket__ConnectionString
    - name: EventBusConnection
      key: all__EventBusConnection
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: AzureServiceBusEnabled
      key: all__UseAzureServiceBus
    - name: IdentityUrl
      key: urls__IdentityUrl
    - name: UseLoadTest
      key: basket__EnableLoadTest
  # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: OrchestratorType
      value: 'K8S'
    - name: PORT
      value: "80"
    - name: GRPC_PORT
      value: "81"      
probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60
    port: 80

ingress:
  enabled: false

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "basket-api.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "basket-api.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "basket-api.name" . }}
    chart: {{ template "basket-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "basket-api.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "basket-api.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}        
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet: 
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}        
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: grpc
              containerPort: 81
              protocol: TCP                
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.basket }}
  labels:
    app: {{ template "basket-api.name" . }}
    chart: {{ template "basket-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
    - port: {{ .Values.service.grpcPort }}
      targetPort: grpc
      protocol: TCP
      name: grpc
  selector:
    app: {{ template "basket-api.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "basket-api.fullname" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "basket-api.name" . }}
    chart: {{ template "basket-api.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  basket__ConnectionString: {{ .Values.inf.redis.basket.constr }}
  urls__IdentityUrl: http://{{ .Values.app.svc.identity }}
  basket__EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  all__EventBusConnection: {{ .Values.inf.eventbus.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: eshop_backend_route
            virtual_hosts:
            - name: eshop_backend
              domains:
              - "*"
              routes:
              - name: "m-short"
                match:
                  prefix: "/m/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/marketing-api/"
                  cluster: marketing
              - name: "m-long"
                match:
                  prefix: "/marketing-api/"
                route:
                  auto_host_rewrite: true
                  cluster: marketing
          http_filters:
          - name: envoy.router  
          access_log:
          - name: envoy.file_access_log
            filter:
              not_health_check_filter: {}          
            config:
              json_format:
                time: "%START_TIME%"
                protocol: "%PROTOCOL%"
                duration: "%DURATION%"
                request_method: "%REQ(:METHOD)%"  
                request_host: "%REQ(HOST)%"  
                path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%" 
                response_flags: "%RESPONSE_FLAGS%"
                route_name: "%ROUTE_NAME%"
                upstream_host: "%UPSTREAM_HOST%"
                upstream_cluster: "%UPSTREAM_CLUSTER%"
                upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"    
              path: "/tmp/access.log"                 
  clusters:
  - name: marketing
    connect_timeout: 0.25s
    type: logical_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: marketing-api
        port_value: 80
  - name: locations
    connect_timeout: 0.25s
    type: logical_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: locations-api
        port_value: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: apigwmm
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /mobilemarketingapigw

image:
  repository: envoyproxy/envoy
  tag: v1.11.1

service:
  type: ClusterIP
  port: 80
  adminPort: 8001  

ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    ingress.kubernetes.io/rewrite-target: "/"
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

env: {}

envoy:
  configPath: /etc/envoy

probes:
  liveness:
    path: /ready
    initialDelaySeconds: 5
    periodSeconds: 15
    port: 8001
  readiness:
    path: /ready
    initialDelaySeconds: 5
    periodSeconds: 60
    port: 8001

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "apigwmm.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
{{- $envoycfgname := printf "%s-%s" "envoy" $name -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "apigwmm.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "apigwmm.name" . }}
    chart: {{ template "apigwmm.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "apigwmm.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "apigwmm.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}           
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ $envoycfgname }}
          items:
          - key: envoy.yaml
            path: envoy.yaml    
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}          
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: config
            mountPath: {{ .Values.envoy.configPath }}          
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: admin
              containerPort: 8001
              protocol: TCP              
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $ingressPath := include "pathBase" . -}}
{{- $serviceName := .Values.app.svc.mobilemarketingapigw -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "apigwmm.fullname" . }}
  labels:
    app: {{ template "apigwmm.name" . }}
    chart: {{ template "apigwmm.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
    {{- range .Values.ingress.hosts  }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $serviceName }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.mobilemarketingapigw }}
  labels:
    app: {{ template "apigwmm.name" . }}
    chart: {{ template "apigwmm.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
    - port: {{ .Values.service.adminPort }}
      targetPort: admin
      protocol: TCP
      name: admin    
  selector:
    app: {{ template "apigwmm.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "apigwmm.fullname" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "envoy-{{ $name }}"
  labels:
    app: {{ template "apigwmm.name" . }}
    chart: {{ template "apigwmm.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  {{ (.Files.Glob "envoy.yaml").AsConfig  | indent 2 }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: sql-data
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1

image:
  repository: microsoft/mssql-server-linux
  tag: 2017-CU7
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 1433


resources: {}

nodeSelector: {}

tolerations: []

affinity: {}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "sql-data.fullname" . }}
  labels:
    app: {{ template "sql-data.name" . }}
    chart: {{ template "sql-data.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "sql-data.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "sql-data.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: ACCEPT_EULA
            value: "Y"
          - name: MSSQL_PID
            value: {{ .Values.inf.sql.common.pid }}
          - name: MSSQL_SA_PASSWORD
            value: {{ .Values.inf.sql.common.pwd }}
          ports:
            - name: http
              containerPort: 1433
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ template "sql-name" . }}
  labels:
    app: {{ template "sql-data.name" . }}
    chart: {{ template "sql-data.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "sql-data.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: eshop-common
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.inf.registry -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.inf.registry.secretName }}
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ template "imagePullSecret" . }}
{{- end -}}

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: nosql-data
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1

image:
  repository: mongo
  tag: 3.6.5-jessie
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 27017


resources: {}

nodeSelector: {}

tolerations: []

affinity: {}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "nosql-data.fullname" . }}
  labels:
    app: {{ template "nosql-data.name" . }}
    chart: {{ template "nosql-data.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "nosql-data.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "nosql-data.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 27017
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ template "mongo-name" . }}
  labels:
    app: {{ template "nosql-data.name" . }}
    chart: {{ template "nosql-data.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "nosql-data.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: webspa
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /

image:
  repository: eshop/webspa
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations: {}
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: UseLoadTest
      key: all_EnableLoadTest
    - name: DPConnectionString
      key: webspa__keystore
    - name: PurchaseUrl
      key: urls__apigwws
    - name: CallBackUrl
      key: urls__spa
    - name: IdentityUrl
      key: urls__IdentityUrl
    - name: MarketingUrl
      key: urls__apigwwm
    - name: IdentityUrlHC
      key: internalurls__identity__hc      
    - name: SignalrHubUrl
      key: urls__apigwws
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: ASPNETCORE_URLS
      value: http://0.0.0.0:80
    - name: OrchestratorType
      value: 'K8S'
    - name: IsClusterEnv
      value: 'True'



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webspa.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "webspa.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "webspa.name" . }}
    chart: {{ template "webspa.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "webspa.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "webspa.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}          
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $ingressPath := include "pathBase" . -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "webspa.fullname" . }}
  labels:
    app: {{ template "webspa.name" . }}
    chart: {{ template "webspa.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $.Values.app.svc.spa }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.spa }}
  labels:
    app: {{ template "webspa.name" . }}
    chart: {{ template "webspa.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "webspa.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webspa.fullname" . -}}
{{- $identity := include "url-of" (list .Values.app.ingress.entries.identity .) -}}
{{- $webshoppingapigw := include "url-of" (list .Values.app.ingress.entries.webshoppingapigw .) -}}
{{- $webmarketingapigw := include "url-of" (list .Values.app.ingress.entries.webmarketingapigw .) -}}
{{- $spa := include "url-of" (list .Values.app.ingress.entries.spa .) -}}
{{- $mongo := include "mongo-name" . -}}
{{- $protocol := include "protocol" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "webspa.name" . }}
    chart: {{ template "webspa.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all_EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  webspa__keystore: {{ .Values.inf.redis.keystore.constr }}
  internalurls__apigwws: http://{{ .Values.app.svc.webshoppingapigw }}
  internalurls__identity__hc: http://{{ .Values.app.svc.identity }}/hc
  urls__apigwws: {{ $protocol }}://{{ $webshoppingapigw }}
  urls__spa: {{ $protocol }}://{{ $spa }}
  urls__IdentityUrl: {{ $protocol }}://{{ $identity }}
  urls__apigwwm: {{ $protocol }}://{{ $webmarketingapigw }}

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: webhooks-web
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /webhooks-web

image:
  repository: eshop/webhooks.client
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations: {}
  hosts:
    - chart-example.local
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: WebhooksUrl
      key: urls__webhooks
    - name: IdentityUrl
      key: identity_e
    - name: CallbackUrl
      key: webhooksweb_e
    - name: SelfUrl
      key: webhooksweb_e
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Production
    - name: OrchestratorType
      value: 'K8S'
    - name: Token
      value: "WebHooks-Demo-Web"       # Can use whatever you want




========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webhooks-web.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "webhooks-web.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "webhooks-web.name" . }}
    chart: {{ template "webhooks-web.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "webhooks-web.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "webhooks-web.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $ingressPath := include "pathBase" . -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "webhooks-web.fullname" . }}
  labels:
    app: {{ template "webhooks-web.name" . }}
    chart: {{ template "webhooks-web.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $.Values.app.svc.webhooksweb }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.webhooksweb }}
  labels:
    app: {{ template "webhooks-web.name" . }}
    chart: {{ template "webhooks-web.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "webhooks-web.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webhooks-web.fullname" . -}}
{{- $identity := include "url-of" (list .Values.app.ingress.entries.identity .) -}}
{{- $webhooksweb := include "url-of" (list .Values.app.ingress.entries.webhooksweb .) -}}
{{- $webhooks := include "url-of" (list .Values.app.ingress.entries.webhooks .) -}}
{{- $protocol := include "protocol" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "webhooks-web.name" . }}
    chart: {{ template "webhooks-web.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  urls__webhooks: {{ $protocol }}://{{ $webhooks }}
  identity_e: {{ $protocol }}://{{ $identity }}
  webhooksweb_e: {{ $protocol }}://{{ $webhooksweb }}
  urls_webhooksweb: http://{{ .Values.app.svc.webhooksweb }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: Service
apiVersion: v1
metadata:
  name: sql-service
spec:
  type: NodePort
  selector:
    app: sql-data
  ports:
    - port: 1433
      nodePort: 31433
      name: sql-port


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: Service
apiVersion: v1
metadata:
  name: rabbitmq-admin
spec:
  type: NodePort
  selector:
    app: rabbitmq
  ports:
    - port: 15672
      nodePort: 31672
      name: rabbitmq-port


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# This file contains common ingress annotations when using Kubernetes included in Docker Desktop

ingress:
  annotations:
    kubernetes.io/ingress.class: "nginx"
    ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# This helm values file defines app-based settings
# Charts use those values, so this file **MUST** be included in all chart releases

app:                                                    # app global settings
  name: "my-eshop"                                      # Override for custom app name
  ingress:                                              # ingress related settings
    entries:
      basket: basket-api                                # ingress entry for basket api
      catalog: catalog-api                              # ingress entry for catalog api
      ordering: ordering-api                            # ingress entry for ordering api
      identity: identity                                # ingress entry for identity api
      mvc: webmvc                                       # ingress entry for web mvc
      spa: ""                                           # ingress entry for web spa
      status: webstatus                                 # ingress entry for web status
      webshoppingapigw: webshoppingapigw                # ingress entry for web shopping Agw
      webmarketingapigw: webmarketingapigw              # ingress entry for web mkg Agw
      mobilemarketingapigw: mobilemarketingapigw        # ingress entry for mobile mkg Agw
      mobileshoppingapigw: mobileshoppingapigw          # ingress entry for mobile shopping Agw
      webshoppingagg: webshoppingagg                    # ingress entry for web shopping aggregator
      mobileshoppingagg: mobileshoppingagg              # ingress entry for mobile shopping aggregator
      payment: payment-api                              # ingress entry for payment api
      locations: locations-api                          # ingress entry for locations api
      marketing: marketing-api                          # ingress entry for marketing api
      webhooks: webhooks-api                            # ingress entry for webhooks api
      webhooksweb: webhooks-web                         # ingress entry for webhooks web demo client
  svc:
      basket: basket-api                                # service name for basket api
      catalog: catalog-api                              # service name for catalog api
      ordering: ordering-api                            # service name for ordering api
      orderingbackgroundtasks: ordering-backgroundtasks # service name for orderingbackgroundtasks
      orderingsignalrhub: ordering-signalrhub           # service name for orderingsignalrhub
      identity: identity-api                            # service name for identity api
      mvc: webmvc                                       # service name for web mvc
      spa: webspa                                       # service name for web spa
      status: webstatus                                 # service name for web status
      webshoppingapigw: webshoppingapigw                # service name for web shopping Agw
      webmarketingapigw: webmarketingapigw              # service name for web mkg Agw
      mobilemarketingapigw: mobilemarketingapigw        # service name for mobile mkg Agw
      mobileshoppingapigw: mobileshoppingapigw          # service name for mobile shopping Agw
      webshoppingagg: webshoppingagg                    # service name for web shopping aggregator
      mobileshoppingagg: mobileshoppingagg              # service name for mobile shopping aggregator
      payment: payment-api                              # service name for payment api
      locations: locations-api                          # service name for locations api
      marketing: marketing-api                          # service name for marketing ap
      webhooks: webhooks-api                            # service name for webhooks api
      webhooksweb: webhooks-client                      # service name for webhooks web


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
#    addonmanager.kubernetes.io/mode: Reconcile
    app: addon-http-application-routing-ingress-nginx
    kubernetes.io/cluster-service: "true"
  name: addon-http-application-routing-nginx-configuration
  namespace: kube-system
data:
  proxy-buffer-size: "128k"
  proxy-buffers: "4 256k"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# This file contains extra annotations to make Linkerd work with ingress.
# ingress.mesh.annotations are inserted into ingress.annotations of the resource being generated, if mesh is deployed
#
# It is designed to work with NGINX ingress controller or the Http Application Routing
#
# Check https://linkerd.io/2/tasks/using-ingress/ for more info or other ingress controllers
#
# If using your custom file, use -ingressMeshAnnotationsFile parameter in deploy-all.ps1

ingress:
  mesh:
    annotations:
      nginx.ingress.kubernetes.io/configuration-snippet: |
        proxy_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;
        proxy_hide_header l5d-remote-ip;
        proxy_hide_header l5d-server-id;

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# This file contains common ingress annotations when using AKS with Http Application Routing

ingress:
  annotations:
    kubernetes.io/ingress.class: addon-http-application-routing
    ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# This helm values file defines all infrastructure used by eShopOnContainers.
# It is used on all charts, so ** MUST BE INCLUDED ** on every deployment

inf:
  mesh:
    enabled: false          # True to enable Linkerd (set by deploy-all.ps1)
  tls:
    enabled: false          # True to enable TLS (set by deploy-all.ps1)
    issuer: ""              # cert-manager issuer to use for retrieving certs (set by deploy-all.ps1)
  sql:                      # inf.sql defines the sql server databases & logins
#    host:  my-sql-server   # Uncomment to specify a custom sql-server to be used. By default "sql-data-<appname>" will be used  
    common:
      user: sa              # SQL user
      pwd: Pass@word        # SQL pwd
      pid: Developer
    catalog:                # inf.sql.catalog: settings for the catalog-api sql (user, pwd, db)
      db: CatalogDb         # Catalog API SQL db name
    ordering:               # inf.sql.ordering: settings for the ordering-api sql (user, pwd, db)
      db: OrderingDb        # Ordering API SQL db name
    identity:
      db: IdentityDb        # Ordering API SQL db name
    marketing:
      db: MarketingDb       # Marketing API SQL db name
    webhooks:
      db: WebhooksDb        # Webhooks DB
  mongo:
#    host: my-nosql-data    # Uncomment to use specify custom mongo host. By default nosql-data is used
    locations:
      database: LocationsDb
    marketing:
      database: MarketingDb
  redis:                    # inf.redis defines the redis' connection strings
    basket:     
      svc: basket-data      # Name of k8s svc for basket redis     
      constr: basket-data   # Connection string to Redis used by Basket API
    keystore:
      svc: keystore-data    # Name of k8s svc for keystore-data redis
      constr: keystore-data # Connection string to Redis used as a Keystore (by Identity API)
  eventbus:
    svc: rabbitmq           # Name of k8s svc for rabbitmq
    constr: rabbitmq        # Event bus connection string
    useAzure: false         # true if use Azure Service Bus. False if RabbitMQ
  appinsights:
      key: ""               # App insights to use
  k8s:                      # inf.k8s defines Kubernetes cluster global config
    dns:  ""                # k8s external  DNS. This value or ip value MUST BE PROVIDED
    local: false            # True when deploying on "local K8s" provided by Docker Desktop.
  misc:                     # inf.misc contains miscellaneous configuration related to infrastructure
    useLoadTest: false      # If running under loading test or not
    useAzureStorage: false  # If catalog api uses azure storage or not
#  registry:                # Uncomment "registry" to specify registry secret
#    secretName:            # secretName is the name of the secret inside k8s   
#    server:                # Registry login server
#    login:                 # User login
#    pwd:                   # User pwd



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: webhooks-api
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /webhooks-api

image:
  repository: eshop/webhooks.api
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations: {}
  hosts:
    - chart-example.local
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ConnectionString
      key: webhooks__ConnectionString
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: EventBusConnection
      key: all__EventBusConnection
    - name: AzureServiceBusEnabled
      key: all__UseAzureServiceBus
    - name: IdentityUrl
      key: urls__IdentityUrl
    - name: IdentityUrlExternal
      key: urls__IdentityUrlExternal
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webhooks-api.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "webhooks-api.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "webhooks-api.name" . }}
    chart: {{ template "webhooks-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "webhooks-api.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "webhooks-api.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $ingressPath := include "pathBase" . -}}
{{- $serviceName := .Values.app.svc.webhooks }}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "webhooks-api.fullname" . }}
  labels:
    app: {{ template "webhooks-api.name" . }}
    chart: {{ template "webhooks-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $serviceName }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.webhooks }}
  labels:
    app: {{ template "webhooks-api.name" . }}
    chart: {{ template "webhooks-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "webhooks-api.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webhooks-api.fullname" . -}}
{{- $sqlsrv := include "sql-name" . -}}
{{- $identity := include "url-of" (list .Values.app.ingress.entries.identity .) -}}
{{- $protocol := include "protocol" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "webhooks-api.name" . }}
    chart: {{ template "webhooks-api.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  webhooks__ConnectionString: Server={{ $sqlsrv }};Initial Catalog={{ .Values.inf.sql.webhooks.db }};User Id={{ .Values.inf.sql.common.user }};Password={{ .Values.inf.sql.common.pwd }};
  urls__IdentityUrl: http://{{ $identity }}
  urls__IdentityUrlExternal: {{ $protocol }}://{{ $identity }}
  all__EventBusConnection: {{ .Values.inf.eventbus.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: ordering-backgroundtasks
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /ordering-backgroundtasks

image:
  repository: eshop/ordering.backgroundtasks
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
  hosts:
    - chart-example.local
  tls: []

cfg:
  checkUpdateTime: "15000"
  gracePeriodTime: "1"

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ConnectionString
      key: ordering__ConnectionString
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: EventBusConnection
      key: all__EventBusConnection
    - name: AzureServiceBusEnabled
      key: all__UseAzureServiceBus
    - name: UseLoadTest
      key: ordering__EnableLoadTest      
    - name: CheckUpdateTime
      key: graceperiodmanager__CheckUpdateTime
    - name: GracePeriodTime
      key: graceperiodmanager__GracePeriodTime
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'
probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60
    port: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "ordering-backgroundtasks.fullname" . -}}
{{- $cfgname :=  printf "cfg-%s" $name | trunc 63  }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "ordering-backgroundtasks.fullname" . }}
  labels:
    app: {{ template "ordering-backgroundtasks.name" . }}
    chart: {{ template "ordering-backgroundtasks.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "ordering-backgroundtasks.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "ordering-backgroundtasks.name" . }}
        release: {{ .Release.Name }}
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}            
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.orderingbackgroundtasks }}
  labels:
    app: {{ template "ordering-backgroundtasks.name" . }}
    chart: {{ template "ordering-backgroundtasks.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "ordering-backgroundtasks.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "ordering-backgroundtasks.fullname" . -}}
{{- $sqlsrv := include "sql-name" . -}}
{{- $cfgname :=  printf "cfg-%s" $name | trunc 63  }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ $cfgname }}"
  labels:
    app: {{ template "ordering-backgroundtasks.name" . }}
    chart: {{ template "ordering-backgroundtasks.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  ordering__ConnectionString: Server={{ $sqlsrv }};Initial Catalog={{ .Values.inf.sql.ordering.db }};User Id={{ .Values.inf.sql.common.user }};Password={{ .Values.inf.sql.common.pwd }};
  ordering__EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  all__EventBusConnection: {{ .Values.inf.eventbus.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"
  graceperiodmanager__CheckUpdateTime: "{{ .Values.cfg.checkUpdateTime }}"
  graceperiodmanager__GracePeriodTime: "{{ .Values.cfg.gracePeriodTime }}"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: ordering-signalrhub
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /ordering-signalrhub

image:
  repository: eshop/ordering.signalrhub
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
  hosts:
    - chart-example.local
  tls: []

cfg:
  checkUpdateTime: "15000"
  gracePeriodTime: "1"

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: EventBusConnection
      key: all__EventBusConnection
    - name: AzureServiceBusEnabled
      key: all__UseAzureServiceBus
    - name: IdentityUrl
      key: urls__IdentityUrl
    - name: SignalrStoreConnectionString
      key: signalr__StoreConnectionString
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'
    - name: IsClusterEnv
      values: 'True'



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "ordering-signalrhub.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "ordering-signalrhub.fullname" . }}
  labels:
    app: {{ template "ordering-signalrhub.name" . }}
    chart: {{ template "ordering-signalrhub.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "ordering-signalrhub.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "ordering-signalrhub.name" . }}
        release: {{ .Release.Name }}
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.orderingsignalrhub }}
  labels:
    app: {{ template "ordering-signalrhub.name" . }}
    chart: {{ template "ordering-signalrhub.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "ordering-signalrhub.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "ordering-signalrhub.fullname" . -}}
{{- $identity := include "url-of" (list .Values.app.ingress.entries.identity .) -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "ordering-signalrhub.name" . }}
    chart: {{ template "ordering-signalrhub.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  all__EventBusConnection: {{ .Values.inf.eventbus.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"
  signalr__StoreConnectionString: {{ .Values.inf.redis.keystore.constr }}
  urls__IdentityUrl: http://{{ $identity }}

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: eshop_backend_route
            virtual_hosts:
            - name: eshop_backend
              domains:
              - "*"
              routes:
              - name: "m-short"
                match:
                  prefix: "/m/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/marketing-api/"
                  cluster: marketing
              - name: "m-long"
                match:
                  prefix: "/marketing-api/"
                route:
                  auto_host_rewrite: true
                  cluster: marketing
          http_filters:
          - name: envoy.router      
          access_log:
          - name: envoy.file_access_log
            filter:
              not_health_check_filter: {}          
            config:
              json_format:
                time: "%START_TIME%"
                protocol: "%PROTOCOL%"
                duration: "%DURATION%"
                request_method: "%REQ(:METHOD)%"  
                request_host: "%REQ(HOST)%"  
                path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%" 
                response_flags: "%RESPONSE_FLAGS%"
                route_name: "%ROUTE_NAME%"
                upstream_host: "%UPSTREAM_HOST%"
                upstream_cluster: "%UPSTREAM_CLUSTER%"
                upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"     
              path: "/tmp/access.log"
  clusters:
  - name: marketing
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: marketing-api
        port_value: 80
  - name: locations
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: locations-api
        port_value: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: apigwwm
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /webmarketingapigw

image:
  repository: envoyproxy/envoy
  tag: v1.11.1

service:
  type: ClusterIP
  port: 80
  adminPort: 8001  

ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    ingress.kubernetes.io/rewrite-target: "/"
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env: {}

envoy:
  configPath: /etc/envoy

probes:
  liveness:
    path: /ready
    initialDelaySeconds: 5
    periodSeconds: 15
    port: 8001
  readiness:
    path: /ready
    initialDelaySeconds: 5
    periodSeconds: 60
    port: 8001

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "apigwwm.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
{{- $envoycfgname := printf "%s-%s" "envoy" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "apigwwm.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "apigwwm.name" . }}
    chart: {{ template "apigwwm.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "apigwwm.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "apigwwm.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}           
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ $envoycfgname }}
          items:
          - key: envoy.yaml
            path: envoy.yaml
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: config
            mountPath: {{ .Values.envoy.configPath }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: admin
              containerPort: 8001
              protocol: TCP              
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $ingressPath := include "pathBase" . -}}
{{- $serviceName := .Values.app.svc.webmarketingapigw -}}

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "apigwwm.fullname" . }}
  labels:
    app: {{ template "apigwwm.name" . }}
    chart: {{ template "apigwwm.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
    {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $serviceName }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.webmarketingapigw }}
  labels:
    app: {{ template "apigwwm.name" . }}
    chart: {{ template "apigwwm.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
    - port: {{ .Values.service.adminPort }}
      targetPort: admin
      protocol: TCP
      name: admin      
  selector:
    app: {{ template "apigwwm.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "apigwwm.fullname" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "envoy-{{ $name }}"
  labels:
    app: {{ template "apigwwm.name" . }}
    chart: {{ template "apigwwm.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  {{ (.Files.Glob "envoy.yaml").AsConfig | indent 2 -}} 



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: catalog-api
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /catalog-api

image:
  repository: eshop/catalog.api
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80
  grpcPort: 81

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ConnectionString
      key: catalog__ConnectionString
    - name: PicBaseUrl
      key: catalog__PicBaseUrl
    - name: AzureStorageEnabled
      key: catalog__AzureStorageEnabled
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: EventBusConnection
      key: all__EventBusConnection
    - name: AzureServiceBusEnabled
      key: all__UseAzureServiceBus
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'
    - name: PORT
      value: "80"
    - name: GRPC_PORT
      value: "81"
probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60
    port: 80



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "catalog-api.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "catalog-api.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "catalog-api.name" . }}
    chart: {{ template "catalog-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "catalog-api.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "catalog-api.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}               
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: grpc
              containerPort: 81
              protocol: TCP              
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.catalog }}
  labels:
    app: {{ template "catalog-api.name" . }}
    chart: {{ template "catalog-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
    - port: {{ .Values.service.grpcPort }}
      targetPort: grpc
      protocol: TCP
      name: grpc     
  selector:
    app: {{ template "catalog-api.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "catalog-api.fullname" . -}}
{{- $sqlsrv := include "sql-name" . -}}
{{- $webshoppingapigw := include "url-of" (list .Values.app.ingress.entries.webshoppingapigw .) -}}
{{- $protocol := include "protocol" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "catalog-api.name" . }}
    chart: {{ template "catalog-api.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  catalog__ConnectionString: Server={{ $sqlsrv }};Initial Catalog={{ .Values.inf.sql.catalog.db }};User Id={{ .Values.inf.sql.common.user }};Password={{ .Values.inf.sql.common.pwd }};
  catalog__PicBaseUrl: {{ $protocol }}://{{ $webshoppingapigw }}/c/api/v1/catalog/items/[0]/pic/
  catalog__AzureStorageEnabled: "{{ .Values.inf.misc.useAzureStorage }}"
  all__EventBusConnection: {{ .Values.inf.eventbus.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: webmvc
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /webmvc

image:
  repository: eshop/webmvc
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations: {}
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: UseLoadTest
      key: all_EnableLoadTest
    - name: DPConnectionString
      key: webmvc__keystore
    - name: PurchaseUrl
      key: internalurls__apigwws
    - name: ExternalPurchaseUrl
      key: urls__apigwws
    - name: CallBackUrl
      key: urls__mvc
    - name: IdentityUrl
      key: urls__IdentityUrl
    - name: MarketingUrl
      key: internalurls__apigwwm
    - name: IdentityUrlHC
      key: internalurls__identity__hc      
    - name: SignalrHubUrl
      key: urls__apigwws
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'
    - name: IsClusterEnv
      value: 'True'



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webmvc.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "webmvc.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "webmvc.name" . }}
    chart: {{ template "webmvc.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "webmvc.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "webmvc.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $ingressPath := include "pathBase" . -}}
{{- $serviceName := .Values.app.svc.mvc -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "webmvc.fullname" . }}
  labels:
    app: {{ template "webmvc.name" . }}
    chart: {{ template "webmvc.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
    {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $serviceName }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.mvc }}
  labels:
    app: {{ template "webmvc.name" . }}
    chart: {{ template "webmvc.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "webmvc.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webmvc.fullname" . -}}
{{- $identity := include "url-of" (list .Values.app.ingress.entries.identity .) -}}
{{- $webshoppingapigw := include "url-of" (list .Values.app.ingress.entries.webshoppingapigw .) -}}
{{- $mvc := include "url-of" (list .Values.app.ingress.entries.mvc .) -}}
{{- $protocol := include "protocol" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "webmvc.name" . }}
    chart: {{ template "webmvc.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"
  all_EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  webmvc__keystore: {{ .Values.inf.redis.keystore.constr }}
  internalurls__apigwws: http://{{ .Values.app.svc.webshoppingapigw }}
  internalurls__apigwwm: http://{{ .Values.app.svc.webmarketingapigw }}
  internalurls__identity__hc: http://{{ .Values.app.svc.identity }}/hc
  urls__apigwws: {{ $protocol }}://{{ $webshoppingapigw }}
  urls__mvc: {{ $protocol }}://{{ $mvc }}
  urls__IdentityUrl: {{ $protocol }}://{{ $identity }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- if .Values.inf.k8s.local -}}
{{- $ingressPath := include "pathBase" . -}}
{{- $serviceName := .Values.app.svc.mvc }}
{{- $name := include "webmvc.fullname" . -}} 
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ $name }}-local
  labels:
    app: {{ template "webmvc.name" . }}
    chart: {{ template "webmvc.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}    
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: {{ $serviceName }}
          servicePort: http
        path: {{ $ingressPath }}
{{- end -}}
{{- end -}}

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: eshop_backend_route
            virtual_hosts:
            - name: eshop_backend
              domains:
              - "*"
              routes:
              - name: "c-short"
                match:
                  prefix: "/c/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/catalog-api/"
                  cluster: catalog
              - name: "c-long"
                match:
                  prefix: "/catalog-api/"
                route:
                  auto_host_rewrite: true
                  cluster: catalog
              - name: "o-short"
                match:
                  prefix: "/o/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/ordering-api/"
                  cluster: ordering
              - name: "o-long"
                match:
                  prefix: "/ordering-api/"
                route:
                  auto_host_rewrite: true
                  cluster: ordering
              - name: "h-long"
                match:
                  prefix: "/hub/notificationhub"
                route:
                  auto_host_rewrite: true
                  cluster: signalr-hub
                  timeout: 300s
              - name: "b-short"
                match:
                  prefix: "/b/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/basket-api/"
                  cluster: basket
              - name: "b-long"
                match:
                  prefix: "/basket-api/"
                route:
                  auto_host_rewrite: true
                  cluster: basket
              - name: "agg"
                match:
                  prefix: "/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/"
                  cluster: shoppingagg
          http_filters:
          - name: envoy.router
          access_log:
          - name: envoy.file_access_log
            filter:
              not_health_check_filter: {}
            config:
              json_format:
                time: "%START_TIME%"
                protocol: "%PROTOCOL%"
                duration: "%DURATION%"
                request_method: "%REQ(:METHOD)%"
                request_host: "%REQ(HOST)%"
                path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                response_flags: "%RESPONSE_FLAGS%"
                route_name: "%ROUTE_NAME%"
                upstream_host: "%UPSTREAM_HOST%"
                upstream_cluster: "%UPSTREAM_CLUSTER%"
                upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"
              path: "/tmp/access.log"
  clusters:
  - name: shoppingagg
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: webshoppingagg
        port_value: 80
  - name: catalog
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: catalog-api
        port_value: 80
  - name: basket
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: basket-api
        port_value: 80
  - name: ordering
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: ordering-api
        port_value: 80
  - name: signalr-hub
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: ordering-signalrhub
        port_value: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: apigwms
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /mobileshoppingapigw

image:
  repository: envoyproxy/envoy
  tag: v1.11.1

service:
  type: ClusterIP
  port: 80
  adminPort: 8001  

ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    ingress.kubernetes.io/rewrite-target: "/"
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

env: {}

envoy:
  configPath: /etc/envoy

probes:
  liveness:
    path: /ready
    initialDelaySeconds: 5
    periodSeconds: 15
    port: 8001
  readiness:
    path: /ready
    initialDelaySeconds: 5
    periodSeconds: 60
    port: 8001

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "apigwms.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
{{- $envoycfgname := printf "%s-%s" "envoy" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "apigwms.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "apigwms.name" . }}
    chart: {{ template "apigwms.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "apigwms.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "apigwms.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}           
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ $envoycfgname }}
          items:
          - key: envoy.yaml
            path: envoy.yaml
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: config
            mountPath: {{ .Values.envoy.configPath }}         
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: admin
              containerPort: 8001
              protocol: TCP              
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $ingressPath := include "pathBase" . -}}
{{- $serviceName := .Values.app.svc.mobileshoppingapigw -}}

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "apigwms.fullname" . }}
  labels:
    app: {{ template "apigwms.name" . }}
    chart: {{ template "apigwms.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $serviceName }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.mobileshoppingapigw }}
  labels:
    app: {{ template "apigwms.name" . }}
    chart: {{ template "apigwms.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
    - port: {{ .Values.service.adminPort }}
      targetPort: admin
      protocol: TCP
      name: admin     
  selector:
    app: {{ template "apigwms.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "apigwms.fullname" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "envoy-{{ $name }}"
  labels:
    app: {{ template "apigwms.name" . }}
    chart: {{ template "apigwms.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  {{ (.Files.Glob "envoy.yaml").AsConfig | indent 2 }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: keystore-data
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1

image:
  repository: redis
  tag: 4.0.10
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 6379


resources: {}

nodeSelector: {}

tolerations: []

affinity: {}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "keystore-data.fullname" . }}
  labels:
    app: {{ template "keystore-data.name" . }}
    chart: {{ template "keystore-data.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "keystore-data.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "keystore-data.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 6379
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.inf.redis.keystore.svc }}
  labels:
    app: {{ template "keystore-data.name" . }}
    chart: {{ template "keystore-data.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "keystore-data.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: payment-api
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /payment-api

image:
  repository: eshop/payment.api
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: EventBusConnection
      key: all__EventBusConnection
    - name: AzureServiceBusEnabled
      key: all__UseAzureServiceBus
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'
probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60
    port: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "payment-api.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "payment-api.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "payment-api.name" . }}
    chart: {{ template "payment-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "payment-api.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "payment-api.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}                
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.payment }}
  labels:
    app: {{ template "payment-api.name" . }}
    chart: {{ template "payment-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "payment-api.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "payment-api.fullname" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "payment-api.name" . }}
    chart: {{ template "payment-api.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  all__EventBusConnection: {{ .Values.inf.eventbus.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: webshoppingagg
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /webshoppingagg

image:
  repository: eshop/webshoppingagg
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80
  grpcPort: 81

ingress:
  enabled: false
  annotations: {}
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: urls__basket
      key: internalurls__basket
    - name: urls__catalog
      key: internalurls__catalog
    - name: urls__orders
      key: internalurls__ordering
    - name: urls__identity
      key: internalurls__identity
    - name: CatalogUrlHC
      key: internalurls__catalog__hc
    - name: BasketUrlHC
      key: internalurls__basket__hc
    - name: IdentityUrlHC
      key: internalurls__identity__hc
    - name: OrderingUrlHC
      key: internalurls__ordering__hc
    - name: MarketingUrlHC
      key: internalurls__marketing__hc
    - name: PaymentUrlHC
      key: internalurls__payment__hc
    - name: LocationUrlHC
      key: internalurls__location__hc
    - name: urls__grpcBasket
      key: internalurls__grpcBasket
    - name: urls__grpcCatalog
      key: internalurls__grpcCatalog
    - name: urls__grpcOrdering
      key: internalurls__grpcOrdering

      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: ASPNETCORE_URLS
      value: http://0.0.0.0:80
    - name: OrchestratorType
      value: 'K8S'
    - name: IsClusterEnv
      value: 'True'
probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60      
    port: 80



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webshoppingagg.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "webshoppingagg.fullname" . }}
  labels:
    app: {{ template "webshoppingagg.name" . }}
    chart: {{ template "webshoppingagg.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}    
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "webshoppingagg.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "webshoppingagg.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}              
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.webshoppingagg }}
  labels:
    app: {{ template "webshoppingagg.name" . }}
    chart: {{ template "webshoppingagg.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "webshoppingagg.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webshoppingagg.fullname" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "webshoppingagg.name" . }}
    chart: {{ template "webshoppingagg.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all_EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  webshoppingagg__keystore: {{ .Values.inf.redis.keystore.constr }}
  internalurls__basket: http://{{ .Values.app.svc.basket }}
  internalurls__catalog: http://{{ .Values.app.svc.catalog }}
  internalurls__identity: http://{{ .Values.app.svc.identity }}
  internalurls__ordering: http://{{ .Values.app.svc.ordering }}
  internalurls__basket__hc: http://{{ .Values.app.svc.basket }}/hc
  internalurls__catalog__hc: http://{{ .Values.app.svc.catalog }}/hc
  internalurls__identity__hc: http://{{ .Values.app.svc.identity }}/hc
  internalurls__ordering__hc: http://{{ .Values.app.svc.ordering }}/hc
  internalurls__marketing__hc: http://{{ .Values.app.svc.marketing }}/hc
  internalurls__payment__hc: http://{{ .Values.app.svc.payment }}/hc
  internalurls__location__hc: http://{{ .Values.app.svc.locations }}/hc
  internalurls__grpcBasket: "http://{{ .Values.app.svc.basket }}:{{ .Values.service.grpcPort }}"
  internalurls__grpcCatalog: "http://{{ .Values.app.svc.catalog }}:{{ .Values.service.grpcPort }}"
  internalurls__grpcOrdering: "http://{{ .Values.app.svc.ordering }}:{{ .Values.service.grpcPort }}"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: tt-ssl
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

applicationName: eshop
issuerName: letsencrypt-staging
certName: eshop-cert-staging
environment: staging
server: https://acme-staging-v02.api.letsencrypt.org/directory
certSecretName: eshop-letsencrypt-staging
issuerSecretName: letsencrypt-staging
ingressClass: addon-http-application-routing

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

applicationName: eshop
issuerName: letsencrypt-prod
certName: eshop-cert-prod
environment: prod
server: https://acme-v02.api.letsencrypt.org/directory
certSecretName: eshop-letsencrypt-prod
issuerSecretName: letsencrypt-prod
ingressClass: addon-http-application-routing

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: {{ .Values.issuerName }}
  namespace: default
  environment: {{ .Values.environment }}
  app: {{ .Values.applicationName }}
spec:
  acme:
    server: {{ .Values.server }}
    email: not@used.com
    privateKeySecretRef:
      name: {{ .Values.issuerSecretName }}
    solvers:
    - http01:
        ingress:
          class: {{ .Values.ingressClass }}      

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: rabbitmq
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1

image:
  repository: rabbitmq
  tag: 3-management
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 5672


resources: {}

nodeSelector: {}

tolerations: []

affinity: {}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "rabbitmq.fullname" . }}
  labels:
    app: {{ template "rabbitmq.name" . }}
    chart: {{ template "rabbitmq.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "rabbitmq.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "rabbitmq.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 5672
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.inf.eventbus.svc }}
  labels:
    app: {{ template "rabbitmq.name" . }}
    chart: {{ template "rabbitmq.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "rabbitmq.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: locations-api
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /locations-api

image:
  repository: eshop/locations.api
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: EventBusConnection
      key: all__EventBusConnection
    - name: AzureServiceBusEnabled
      key: all__UseAzureServiceBus
    - name: UseLoadTest
      key: all_EnableLoadTest
    - name: IdentityUrl
      key: internalurls__IdentityUrl
    - name: IdentityUrlExternal
      key: urls__IdentityUrl
    - name: ConnectionString
      key: locations__ConnectionString
    - name: Database
      key: locations__Database
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'
probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60
    port: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "locations-api.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "locations-api.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "locations-api.name" . }}
    chart: {{ template "locations-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "locations-api.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "locations-api.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}     
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}            
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.locations }}
  labels:
    app: {{ template "locations-api.name" . }}
    chart: {{ template "locations-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "locations-api.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "locations-api.fullname" . -}}
{{- $identity := include "url-of" (list .Values.app.ingress.entries.identity .) -}}
{{- $mongo := include "mongo-name" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "locations-api.name" . }}
    chart: {{ template "locations-api.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  all__EventBusConnection: {{ .Values.inf.eventbus.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"
  all_EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  internalurls__IdentityUrl: http://{{ .Values.app.svc.identity }}
  urls__IdentityUrl: {{ $identity }}
  locations__ConnectionString: mongodb://{{ $mongo }}
  locations__Database: {{ .Values.inf.mongo.locations.database }}

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: eshop_backend_route
            virtual_hosts:
            - name: eshop_backend
              domains:
              - "*"
              routes:
              - name: "c-short"
                match:
                  prefix: "/c/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/catalog-api/"
                  cluster: catalog
              - name: "c-long"
                match:
                  prefix: "/catalog-api/"
                route:
                  auto_host_rewrite: true
                  cluster: catalog
              - name: "o-short"
                match:
                  prefix: "/o/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/ordering-api/"
                  cluster: ordering
              - name: "o-long"
                match:
                  prefix: "/ordering-api/"
                route:
                  auto_host_rewrite: true
                  cluster: ordering
              - name: "h-long"
                match:
                  prefix: "/hub/notificationhub"
                route:
                  auto_host_rewrite: true
                  cluster: signalr-hub
                  timeout: 300s
              - name: "b-short"
                match:
                  prefix: "/b/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/basket-api/"
                  cluster: basket
              - name: "b-long"
                match:
                  prefix: "/basket-api/"
                route:
                  auto_host_rewrite: true
                  cluster: basket
              - name: "agg"
                match:
                  prefix: "/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/"
                  cluster: shoppingagg
          http_filters:
          - name: envoy.router
          access_log:
          - name: envoy.file_access_log
            filter:
              not_health_check_filter: {}
            config:
              json_format:
                time: "%START_TIME%"
                protocol: "%PROTOCOL%"
                duration: "%DURATION%"
                request_method: "%REQ(:METHOD)%"
                request_host: "%REQ(HOST)%"
                path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                response_flags: "%RESPONSE_FLAGS%"
                route_name: "%ROUTE_NAME%"
                upstream_host: "%UPSTREAM_HOST%"
                upstream_cluster: "%UPSTREAM_CLUSTER%"
                upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"
              path: "/tmp/access.log"
  clusters:
  - name: shoppingagg
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: webshoppingagg
        port_value: 80
  - name: catalog
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: catalog-api
        port_value: 80
  - name: basket
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: basket-api
        port_value: 80
  - name: ordering
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: ordering-api
        port_value: 80
  - name: signalr-hub
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: ordering-signalrhub
        port_value: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: apigwws
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /webshoppingapigw

image:
  repository: envoyproxy/envoy
  tag: v1.11.1

service:
  type: ClusterIP
  port: 80
  adminPort: 8001

ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    ingress.kubernetes.io/rewrite-target: "/"
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env: {}

envoy:
  configPath: /etc/envoy

probes:
  liveness:
    path: /ready
    initialDelaySeconds: 5
    periodSeconds: 15
    port: 8001
  readiness:
    path: /ready
    initialDelaySeconds: 5
    periodSeconds: 60
    port: 8001

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "apigwws.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
{{- $envoycfgname := printf "%s-%s" "envoy" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "apigwws.fullname" . }}
  labels:
    app: {{ template "apigwws.name" . }}
    chart: {{ template "apigwws.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "apigwws.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "apigwws.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}           
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ $envoycfgname }}
          items:
          - key: envoy.yaml
            path: envoy.yaml
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}        
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
          - name: config
            mountPath: {{ .Values.envoy.configPath }}      
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: admin
              containerPort: 8001
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $ingressPath := include "pathBase" . -}}
{{- $serviceName := .Values.app.svc.webshoppingapigw -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "apigwws.fullname" . }}
  labels:
    app: {{ template "apigwws.name" . }}
    chart: {{ template "apigwws.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
    {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $serviceName }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.webshoppingapigw }}
  labels:
    app: {{ template "apigwws.name" . }}
    chart: {{ template "apigwws.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
    - port: {{ .Values.service.adminPort }}
      targetPort: admin
      protocol: TCP
      name: admin
  selector:
    app: {{ template "apigwws.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "apigwws.fullname" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "envoy-{{ $name }}"
  labels:
    app: {{ template "apigwws.name" . }}
    chart: {{ template "apigwws.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  {{ (.Files.Glob "envoy.yaml").AsConfig | indent 2 }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: basket-data
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1

image:
  repository: redis
  tag: 4.0.10
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 6379


resources: {}

nodeSelector: {}

tolerations: []

affinity: {}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "basket-data.fullname" . }}
  labels:
    app: {{ template "basket-data.name" . }}
    chart: {{ template "basket-data.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "basket-data.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "basket-data.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 6379
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.inf.redis.basket.svc }}
  labels:
    app: {{ template "basket-data.name" . }}
    chart: {{ template "basket-data.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "basket-data.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: ordering-api
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /ordering-api

image:
  repository: eshop/ordering.api
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80
  grpcPort: 81

ingress:
  enabled: false
  annotations: {}
  hosts:
    - chart-example.local
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ConnectionString
      key: ordering__ConnectionString
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: EventBusConnection
      key: all__EventBusConnection
    - name: AzureServiceBusEnabled
      key: all__UseAzureServiceBus
    - name: UseLoadTest
      key: ordering__EnableLoadTest
    - name: IdentityUrl
      key: urls__IdentityUrl
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'
    - name: PORT
      value: "80"
    - name: GRPC_PORT
      value: "81"      
probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60
    port: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "ordering-api.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "ordering-api.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "ordering-api.name" . }}
    chart: {{ template "ordering-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "ordering-api.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "ordering-api.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}                      
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: grpc
              containerPort: 81
              protocol: TCP              
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.ordering }}
  labels:
    app: {{ template "ordering-api.name" . }}
    chart: {{ template "ordering-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
    - port: {{ .Values.service.grpcPort }}
      targetPort: grpc
      protocol: TCP
      name: grpc
  selector:
    app: {{ template "ordering-api.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "ordering-api.fullname" . -}}
{{- $sqlsrv := include "sql-name" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "ordering-api.name" . }}
    chart: {{ template "ordering-api.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  ordering__ConnectionString: Server={{ $sqlsrv }};Initial Catalog={{ .Values.inf.sql.ordering.db }};User Id={{ .Values.inf.sql.common.user }};Password={{ .Values.inf.sql.common.pwd }};
  ordering__EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  urls__IdentityUrl: http://{{ .Values.app.svc.identity }}
  all__EventBusConnection: {{ .Values.inf.eventbus.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: marketing-api
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /marketing-api

image:
  repository: eshop/marketing.api
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: EventBusConnection
      key: all__EventBusConnection
    - name: AzureServiceBusEnabled
      key: all__UseAzureServiceBus
    - name: UseLoadTest
      key: all_EnableLoadTest
    - name: IdentityUrl
      key: internalurls__IdentityUrl
    - name: IdentityUrlExternal
      key: urls__IdentityUrl
    - name: ConnectionString
      key: marketing__ConnectionString
    - name: MongoConnectionString
      key: marketing__MongoConnectionString
    - name: MongoDatabase
      key: marketing__MongoDatabase
    - name: PicBaseUrl
      key: marketing__PicBaseUrl
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'
probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60
    port: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "marketing-api.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "marketing-api.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "marketing-api.name" . }}
    chart: {{ template "marketing-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "marketing-api.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "marketing-api.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}            
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.marketing }}
  labels:
    app: {{ template "marketing-api.name" . }}
    chart: {{ template "marketing-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "marketing-api.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "marketing-api.fullname" . -}}
{{- $identity := include "url-of" (list .Values.app.ingress.entries.identity .) -}}
{{- $webshoppingapigw := include "url-of" (list .Values.app.ingress.entries.webshoppingapigw .) -}}
{{- $mongo := include "mongo-name" . -}}
{{- $sqlsrv := include "sql-name" . -}}
{{- $protocol := include "protocol" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "marketing-api.name" . }}
    chart: {{ template "marketing-api.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  all__EventBusConnection: {{ .Values.inf.eventbus.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"
  all_EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  internalurls__IdentityUrl: http://{{ .Values.app.svc.identity }}
  urls__IdentityUrl: {{ $protocol }}://{{ $identity }}
  marketing__ConnectionString: Server={{ $sqlsrv }};Initial Catalog={{ .Values.inf.sql.marketing.db }};User Id={{ .Values.inf.sql.common.user }};Password={{ .Values.inf.sql.common.pwd }};
  marketing__MongoConnectionString: mongodb://{{ $mongo }}
  marketing__MongoDatabase: {{ .Values.inf.mongo.marketing.database }} 
  marketing__PicBaseUrl: {{ $protocol }}://{{ $webshoppingapigw }}/c/api/v1/catalog/items/[0]/pic/

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: webstatus
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /webstatus

image:
  repository: eshop/webstatus
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations: {

  }
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: HealthChecks-UI__HealthChecks__0__Name
      key: name__mvc__hc
    - name: HealthChecks-UI__HealthChecks__0__Uri
      key: internalurls__mvc__hc
    - name: HealthChecks-UI__HealthChecks__1__Name
      key: name__spa__hc
    - name: HealthChecks-UI__HealthChecks__1__Uri
      key: internalurls__spa__hc
    - name: HealthChecks-UI__HealthChecks__2__Name
      key: name__apigwwsagg__hc
    - name: HealthChecks-UI__HealthChecks__2__Uri
      key: internalurls__apigwwsagg__hc
    - name: HealthChecks-UI__HealthChecks__3__Name
      key: name__apigwmsagg__hc
    - name: HealthChecks-UI__HealthChecks__3__Uri
      key: internalurls__apigwmsagg__hc
    - name: HealthChecks-UI__HealthChecks__4__Name
      key: name__ordering__hc
    - name: HealthChecks-UI__HealthChecks__4__Uri
      key: internalurls__ordering__hc
    - name: HealthChecks-UI__HealthChecks__5__Name
      key: name__basket__hc
    - name: HealthChecks-UI__HealthChecks__5__Uri
      key: internalurls__basket__hc
    - name: HealthChecks-UI__HealthChecks__6__Name
      key: name__catalog__hc
    - name: HealthChecks-UI__HealthChecks__6__Uri
      key: internalurls__catalog__hc
    - name: HealthChecks-UI__HealthChecks__7__Name
      key: name__identity__hc
    - name: HealthChecks-UI__HealthChecks__7__Uri
      key: internalurls__identity__hc
    - name: HealthChecks-UI__HealthChecks__8__Name
      key: name__marketing__hc
    - name: HealthChecks-UI__HealthChecks__8__Uri
      key: internalurls__marketing__hc
    - name: HealthChecks-UI__HealthChecks__9__Name
      key: name__locations__hc
    - name: HealthChecks-UI__HealthChecks__9__Uri
      key: internalurls__locations__hc
    - name: HealthChecks-UI__HealthChecks__10__Name
      key: name__payment__hc
    - name: HealthChecks-UI__HealthChecks__10__Uri
      key: internalurls__payment__hc
    - name: HealthChecks-UI__HealthChecks__11__Name
      key: name__signalrhub__hc
    - name: HealthChecks-UI__HealthChecks__11__Uri
      key: internalurls__signalrhub__hc
    - name: HealthChecks-UI__HealthChecks__12__Name
      key: name__orderingbackground__hc
    - name: HealthChecks-UI__HealthChecks__12__Uri
      key: internalurls__orderingbackground__hc

      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webstatus.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "webstatus.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "webstatus.name" . }}
    chart: {{ template "webstatus.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "webstatus.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "webstatus.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $fullName := include "webstatus.fullname" . -}}
{{- $ingressPath := include "pathBase" . -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "webstatus.fullname" . }}
  labels:
    app: {{ template "webstatus.name" . }}
    chart: {{ template "webstatus.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $.Values.app.svc.status }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.status }}
  labels:
    app: {{ template "webstatus.name" . }}
    chart: {{ template "webstatus.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "webstatus.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webstatus.fullname" . -}}
{{- $identity := include "url-of" (list .Values.app.ingress.entries.identity .) -}}
{{- $webshoppingapigw := include "url-of" (list .Values.app.ingress.entries.webshoppingapigw .) -}}
{{- $mvc := include "url-of" (list .Values.app.ingress.entries.mvc .) -}}
{{- $mongo := include "mongo-name" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "webstatus.name" . }}
    chart: {{ template "webstatus.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"
  all_EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  webstatus__keystore: {{ .Values.inf.redis.keystore.constr }}
  name__mvc__hc: WebMVC HTTP Check
  internalurls__mvc__hc: http://{{ .Values.app.svc.mvc }}/hc
  name__spa__hc: WebSPA HTTP Check
  internalurls__spa__hc: http://{{ .Values.app.svc.spa }}/hc
  name__apigwws__hc: Web Shopping API GW HTTP Check
  internalurls__apigwws__hc: http://{{ .Values.app.svc.webshoppingapigw }}:8001/ready
  name__apigwwm__hc: Web Marketing API GW HTTP Check
  internalurls__apigwwm__hc: http://{{ .Values.app.svc.webmarketingapigw }}:8001/ready
  name__apigwms__hc: Mobile Shopping API GW HTTP Check
  internalurls__apigwms__hc: http://{{ .Values.app.svc.mobileshoppingapigw }}:8001/ready
  name__apigwmm__hc: Mobile Marketing API GW HTTP Check
  internalurls__apigwmm__hc: http://{{ .Values.app.svc.mobilemarketingapigw }}:8001/ready
  name__apigwwsagg__hc: Web Shopping Aggregator GW HTTP Check
  internalurls__apigwwsagg__hc: http://{{ .Values.app.svc.webshoppingagg }}/hc
  name__apigwmsagg__hc: Mobile Shopping Aggregator HTTP Check
  internalurls__apigwmsagg__hc: http://{{ .Values.app.svc.mobileshoppingagg }}/hc
  name__ordering__hc: Ordering HTTP Check
  internalurls__ordering__hc: http://{{ .Values.app.svc.ordering }}/hc
  name__orderingbackground__hc: Ordering HTTP Background Check
  internalurls__orderingbackground__hc: http://{{ .Values.app.svc.orderingbackgroundtasks }}/hc
  name__basket__hc: Basket HTTP Check
  internalurls__basket__hc: http://{{ .Values.app.svc.basket }}/hc
  name__catalog__hc: Catalog HTTP Check
  internalurls__catalog__hc: http://{{ .Values.app.svc.catalog }}/hc
  name__identity__hc: Identity HTTP Check
  internalurls__identity__hc: http://{{ .Values.app.svc.identity }}/hc
  name__marketing__hc: Marketing HTTP Check
  internalurls__marketing__hc: http://{{ .Values.app.svc.marketing }}/hc
  name__locations__hc: Locations HTTP Check
  internalurls__locations__hc: http://{{ .Values.app.svc.locations }}/hc
  name__payment__hc: Payment HTTP Check
  internalurls__payment__hc: http://{{ .Values.app.svc.payment }}/hc
  name__signalrhub__hc: Ordering SignalR Hub HTTP Check
  internalurls__signalrhub__hc: http://{{ .Values.app.svc.orderingsignalrhub }}/hc


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: identity-api
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /identity

image:
  repository: eshop/identity.api
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations: {}
  hosts:
    - chart-example.local
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

env:
  urls:
  configmap:
    - name: ConnectionString
      key: identity__ConnectionString
    - name: DPConnectionString
      key: identity__keystore
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: MvcClient
      key: mvc_e
    - name: SpaClient
      key: spa_e
    - name: LocationApiClient
      key: locations_e
    - name: MarketingApiClient
      key: marketing_e
    - name: BasketApiClient
      key: basket_e
    - name: OrderingApiClient
      key: ordering_e
    - name: MobileShoppingAggClient
      key: mobileshoppingagg_e
    - name: WebShoppingAggClient
      key: webshoppingagg_e
    - name: XamarinCallback
      key: xamarin_callback_e
    - name: WebhooksApiClient
      key: webhooksapi_e
    - name: WebhooksWebClient
      key: webhooksweb_e
    - name: EnableDevspaces
      key: enableDevspaces
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: OrchestratorType
      value: 'K8S'
    - name: IsClusterEnv
      value: 'True'

probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60
    port: 80

enableDevspaces: "false"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "identity-api.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "identity-api.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "identity-api.name" . }}
    chart: {{ template "identity-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "identity-api.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "identity-api.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}           
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $ingressPath := include "pathBase" . -}}
{{- $serviceName := .Values.app.svc.identity }}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "identity-api.fullname" . }}
  labels:
    app: {{ template "identity-api.name" . }}
    chart: {{ template "identity-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
    {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $serviceName }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.identity }}
  labels:
    app: {{ template "identity-api.name" . }}
    chart: {{ template "identity-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "identity-api.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "identity-api.fullname" . -}}
{{- $sqlsrv := include "sql-name" . -}}
{{- $mvc_url := include "url-of" (list .Values.app.ingress.entries.mvc  .) -}}
{{- $spa_url := include "url-of" (list .Values.app.ingress.entries.spa .) -}}
{{- $locations_url := include "url-of" (list .Values.app.ingress.entries.locations .) -}}
{{- $marketing_url := include "url-of" (list .Values.app.ingress.entries.marketing .) -}}
{{- $basket_url := include "url-of" (list .Values.app.ingress.entries.basket .) -}}
{{- $ordering_url := include "url-of" (list .Values.app.ingress.entries.ordering .) -}}
{{- $mobileshoppingagg := include "url-of" (list .Values.app.ingress.entries.mobileshoppingagg .) -}}
{{- $webhoppingagg := include "url-of" (list .Values.app.ingress.entries.webshoppingagg .) -}}
{{- $xamarincallback := include "url-of" (list "xamarincallback" .) -}}
{{- $webhooks_url := include "url-of" (list .Values.app.ingress.entries.webhooks .) -}}
{{- $webhooksweb_url := include "url-of" (list .Values.app.ingress.entries.webhooksweb .) -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "identity-api.name" . }}
    chart: {{ template "identity-api.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  identity__ConnectionString: Server={{ $sqlsrv }};Initial Catalog={{ .Values.inf.sql.identity.db }};User Id={{ .Values.inf.sql.common.user }};Password={{ .Values.inf.sql.common.pwd }};
  identity__keystore: {{ .Values.inf.redis.keystore.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  mvc_e: http://{{ $mvc_url }}
  spa_e: http://{{ $spa_url }}
  locations_e: http://{{ $locations_url }}
  marketing_e: http://{{ $marketing_url }}
  basket_e: http://{{ $basket_url }}
  ordering_e: http://{{ $ordering_url }}
  mobileshoppingagg_e: http://{{ $mobileshoppingagg }}
  webshoppingagg_e: http://{{ $webhoppingagg }}
  xamarin_callback_e: http://{{ $xamarincallback }}
  webhooksapi_e:  http://{{ $webhooks_url }}
  webhooksweb_e: http://{{ $webhooksweb_url }}
  enableDevspaces: "{{ .Values.enableDevspaces }}"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- if .Values.inf.k8s.local -}}
{{- $ingressPath := include "pathBase" . -}}
{{- $serviceName := .Values.app.svc.identity }}
{{- $name := include "identity-api.fullname" . -}} 
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ $name }}-local
  labels:
    app: {{ template "identity-api.name" . }}
    chart: {{ template "identity-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}    
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: {{ $serviceName }}
          servicePort: http
        path: {{ $ingressPath }}
{{- end -}}
{{- end -}}

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: mobileshoppingagg
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /mobileshoppingagg

image:
  repository: eshop/mobileshoppingagg
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80
  grpcPort: 81

ingress:
  enabled: false
  annotations: {}
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: urls__basket
      key: internalurls__basket
    - name: urls__catalog
      key: internalurls__catalog
    - name: urls__orders
      key: internalurls__ordering
    - name: urls__identity
      key: internalurls__identity
    - name: CatalogUrlHC
      key: internalurls__catalog__hc
    - name: BasketUrlHC
      key: internalurls__basket__hc
    - name: IdentityUrlHC
      key: internalurls__identity__hc
    - name: OrderingUrlHC
      key: internalurls__ordering__hc
    - name: MarketingUrlHC
      key: internalurls__marketing__hc
    - name: PaymentUrlHC
      key: internalurls__payment__hc
    - name: LocationUrlHC
      key: internalurls__location__hc
    - name: urls__grpcBasket
      key: internalurls__grpcBasket
    - name: urls__grpcCatalog
      key: internalurls__grpcCatalog
    - name: urls__grpcOrdering
      key: internalurls__grpcOrdering      
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: ASPNETCORE_URLS
      value: http://0.0.0.0:80
    - name: OrchestratorType
      value: 'K8S'
    - name: IsClusterEnv
      value: 'True'
probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60
    port: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "mobileshoppingagg.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "mobileshoppingagg.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "mobileshoppingagg.name" . }}
    chart: {{ template "mobileshoppingagg.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "mobileshoppingagg.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "mobileshoppingagg.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}                
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.mobileshoppingagg }}
  labels:
    app: {{ template "mobileshoppingagg.name" . }}
    chart: {{ template "mobileshoppingagg.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "mobileshoppingagg.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "mobileshoppingagg.fullname" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "mobileshoppingagg.name" . }}
    chart: {{ template "mobileshoppingagg.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all_EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  mobileshoppingagg__keystore: {{ .Values.inf.redis.keystore.constr }}
  internalurls__basket: http://{{ .Values.app.svc.basket }}
  internalurls__catalog: http://{{ .Values.app.svc.catalog }}
  internalurls__identity: http://{{ .Values.app.svc.identity }}
  internalurls__ordering: http://{{ .Values.app.svc.ordering }}
  internalurls__basket__hc: http://{{ .Values.app.svc.basket }}/hc
  internalurls__catalog__hc: http://{{ .Values.app.svc.catalog }}/hc
  internalurls__identity__hc: http://{{ .Values.app.svc.identity }}/hc
  internalurls__ordering__hc: http://{{ .Values.app.svc.ordering }}/hc
  internalurls__marketing__hc: http://{{ .Values.app.svc.marketing }}/hc
  internalurls__payment__hc: http://{{ .Values.app.svc.payment }}/hc
  internalurls__location__hc: http://{{ .Values.app.svc.locations }}/hc
  internalurls__grpcBasket: "http://{{ .Values.app.svc.basket }}:{{ .Values.service.grpcPort }}"
  internalurls__grpcCatalog: "http://{{ .Values.app.svc.catalog }}:{{ .Values.service.grpcPort }}"
  internalurls__grpcOrdering: "http://{{ .Values.app.svc.ordering }}:{{ .Values.service.grpcPort }}"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: basket-api
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /basket-api

image:
  repository: eshop/basket.api
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80
  grpcPort: 81  

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ConnectionString
      key: basket__ConnectionString
    - name: EventBusConnection
      key: all__EventBusConnection
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: AzureServiceBusEnabled
      key: all__UseAzureServiceBus
    - name: IdentityUrl
      key: urls__IdentityUrl
    - name: UseLoadTest
      key: basket__EnableLoadTest
  # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: OrchestratorType
      value: 'K8S'
    - name: PORT
      value: "80"
    - name: GRPC_PORT
      value: "81"      
probes:
  liveness:
    path: /liveness
    initialDelaySeconds: 10
    periodSeconds: 15
    port: 80
  readiness:
    path: /hc
    timeoutSeconds: 5
    initialDelaySeconds: 90
    periodSeconds: 60
    port: 80

ingress:
  enabled: false

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "basket-api.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "basket-api.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "basket-api.name" . }}
    chart: {{ template "basket-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "basket-api.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "basket-api.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}        
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet: 
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}        
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: grpc
              containerPort: 81
              protocol: TCP                
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.basket }}
  labels:
    app: {{ template "basket-api.name" . }}
    chart: {{ template "basket-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
    - port: {{ .Values.service.grpcPort }}
      targetPort: grpc
      protocol: TCP
      name: grpc
  selector:
    app: {{ template "basket-api.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "basket-api.fullname" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "basket-api.name" . }}
    chart: {{ template "basket-api.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  basket__ConnectionString: {{ .Values.inf.redis.basket.constr }}
  urls__IdentityUrl: http://{{ .Values.app.svc.identity }}
  basket__EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  all__EventBusConnection: {{ .Values.inf.eventbus.constr }}
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all__UseAzureServiceBus: "{{ .Values.inf.eventbus.useAzure }}"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: eshop_backend_route
            virtual_hosts:
            - name: eshop_backend
              domains:
              - "*"
              routes:
              - name: "m-short"
                match:
                  prefix: "/m/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/marketing-api/"
                  cluster: marketing
              - name: "m-long"
                match:
                  prefix: "/marketing-api/"
                route:
                  auto_host_rewrite: true
                  cluster: marketing
          http_filters:
          - name: envoy.router  
          access_log:
          - name: envoy.file_access_log
            filter:
              not_health_check_filter: {}          
            config:
              json_format:
                time: "%START_TIME%"
                protocol: "%PROTOCOL%"
                duration: "%DURATION%"
                request_method: "%REQ(:METHOD)%"  
                request_host: "%REQ(HOST)%"  
                path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%" 
                response_flags: "%RESPONSE_FLAGS%"
                route_name: "%ROUTE_NAME%"
                upstream_host: "%UPSTREAM_HOST%"
                upstream_cluster: "%UPSTREAM_CLUSTER%"
                upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"    
              path: "/tmp/access.log"                 
  clusters:
  - name: marketing
    connect_timeout: 0.25s
    type: logical_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: marketing-api
        port_value: 80
  - name: locations
    connect_timeout: 0.25s
    type: logical_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: locations-api
        port_value: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: apigwmm
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /mobilemarketingapigw

image:
  repository: envoyproxy/envoy
  tag: v1.11.1

service:
  type: ClusterIP
  port: 80
  adminPort: 8001  

ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    ingress.kubernetes.io/rewrite-target: "/"
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

env: {}

envoy:
  configPath: /etc/envoy

probes:
  liveness:
    path: /ready
    initialDelaySeconds: 5
    periodSeconds: 15
    port: 8001
  readiness:
    path: /ready
    initialDelaySeconds: 5
    periodSeconds: 60
    port: 8001

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "apigwmm.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
{{- $envoycfgname := printf "%s-%s" "envoy" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "apigwmm.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "apigwmm.name" . }}
    chart: {{ template "apigwmm.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "apigwmm.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "apigwmm.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}           
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ $envoycfgname }}
          items:
          - key: envoy.yaml
            path: envoy.yaml    
      containers:
        - name: {{ .Chart.Name }}
          {{ if .Values.probes -}}
          {{- if .Values.probes.liveness -}}
          livenessProbe:
            httpGet:
              port: {{ .Values.probes.liveness.port }}
              path: {{ .Values.probes.liveness.path }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.probes -}}
          {{- if .Values.probes.readiness }}
          readinessProbe:
            httpGet:
              port: {{ .Values.probes.readiness.port }}
              path: {{ .Values.probes.readiness.path }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end -}}
          {{- end }}          
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: config
            mountPath: {{ .Values.envoy.configPath }}          
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: admin
              containerPort: 8001
              protocol: TCP              
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $ingressPath := include "pathBase" . -}}
{{- $serviceName := .Values.app.svc.mobilemarketingapigw -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "apigwmm.fullname" . }}
  labels:
    app: {{ template "apigwmm.name" . }}
    chart: {{ template "apigwmm.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
    {{- range .Values.ingress.hosts  }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $serviceName }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.mobilemarketingapigw }}
  labels:
    app: {{ template "apigwmm.name" . }}
    chart: {{ template "apigwmm.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
    - port: {{ .Values.service.adminPort }}
      targetPort: admin
      protocol: TCP
      name: admin    
  selector:
    app: {{ template "apigwmm.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "apigwmm.fullname" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "envoy-{{ $name }}"
  labels:
    app: {{ template "apigwmm.name" . }}
    chart: {{ template "apigwmm.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  {{ (.Files.Glob "envoy.yaml").AsConfig  | indent 2 }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: sql-data
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1

image:
  repository: microsoft/mssql-server-linux
  tag: 2017-CU7
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 1433


resources: {}

nodeSelector: {}

tolerations: []

affinity: {}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "sql-data.fullname" . }}
  labels:
    app: {{ template "sql-data.name" . }}
    chart: {{ template "sql-data.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "sql-data.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "sql-data.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: ACCEPT_EULA
            value: "Y"
          - name: MSSQL_PID
            value: {{ .Values.inf.sql.common.pid }}
          - name: MSSQL_SA_PASSWORD
            value: {{ .Values.inf.sql.common.pwd }}
          ports:
            - name: http
              containerPort: 1433
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ template "sql-name" . }}
  labels:
    app: {{ template "sql-data.name" . }}
    chart: {{ template "sql-data.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "sql-data.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: eshop-common
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.inf.registry -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.inf.registry.secretName }}
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ template "imagePullSecret" . }}
{{- end -}}

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: nosql-data
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1

image:
  repository: mongo
  tag: 3.6.5-jessie
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 27017


resources: {}

nodeSelector: {}

tolerations: []

affinity: {}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "nosql-data.fullname" . }}
  labels:
    app: {{ template "nosql-data.name" . }}
    chart: {{ template "nosql-data.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "nosql-data.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "nosql-data.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 27017
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ template "mongo-name" . }}
  labels:
    app: {{ template "nosql-data.name" . }}
    chart: {{ template "nosql-data.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "nosql-data.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: webspa
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /

image:
  repository: eshop/webspa
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations: {}
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: ApplicationInsights__InstrumentationKey
      key: all__InstrumentationKey
    - name: UseLoadTest
      key: all_EnableLoadTest
    - name: DPConnectionString
      key: webspa__keystore
    - name: PurchaseUrl
      key: urls__apigwws
    - name: CallBackUrl
      key: urls__spa
    - name: IdentityUrl
      key: urls__IdentityUrl
    - name: MarketingUrl
      key: urls__apigwwm
    - name: IdentityUrlHC
      key: internalurls__identity__hc      
    - name: SignalrHubUrl
      key: urls__apigwws
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Development
    - name: ASPNETCORE_URLS
      value: http://0.0.0.0:80
    - name: OrchestratorType
      value: 'K8S'
    - name: IsClusterEnv
      value: 'True'



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webspa.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "webspa.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "webspa.name" . }}
    chart: {{ template "webspa.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "webspa.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "webspa.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}          
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $ingressPath := include "pathBase" . -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "webspa.fullname" . }}
  labels:
    app: {{ template "webspa.name" . }}
    chart: {{ template "webspa.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $.Values.app.svc.spa }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.spa }}
  labels:
    app: {{ template "webspa.name" . }}
    chart: {{ template "webspa.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "webspa.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webspa.fullname" . -}}
{{- $identity := include "url-of" (list .Values.app.ingress.entries.identity .) -}}
{{- $webshoppingapigw := include "url-of" (list .Values.app.ingress.entries.webshoppingapigw .) -}}
{{- $webmarketingapigw := include "url-of" (list .Values.app.ingress.entries.webmarketingapigw .) -}}
{{- $spa := include "url-of" (list .Values.app.ingress.entries.spa .) -}}
{{- $mongo := include "mongo-name" . -}}
{{- $protocol := include "protocol" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "webspa.name" . }}
    chart: {{ template "webspa.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  all__InstrumentationKey: "{{ .Values.inf.appinsights.key }}"
  all_EnableLoadTest: "{{ .Values.inf.misc.useLoadTest }}"
  webspa__keystore: {{ .Values.inf.redis.keystore.constr }}
  internalurls__apigwws: http://{{ .Values.app.svc.webshoppingapigw }}
  internalurls__identity__hc: http://{{ .Values.app.svc.identity }}/hc
  urls__apigwws: {{ $protocol }}://{{ $webshoppingapigw }}
  urls__spa: {{ $protocol }}://{{ $spa }}
  urls__IdentityUrl: {{ $protocol }}://{{ $identity }}
  urls__apigwwm: {{ $protocol }}://{{ $webmarketingapigw }}

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: webhooks-web
version: 0.1.0


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

replicaCount: 1
clusterName: eshop-aks
pathBase: /webhooks-web

image:
  repository: eshop/webhooks.client
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations: {}
  hosts:
    - chart-example.local
  tls: []

resources: {}


nodeSelector: {}

tolerations: []

affinity: {}

# env defines the environment variables that will be declared in the pod
env:
  urls:
  # configmap declares variables which value is taken from the config map defined in template configmap.yaml (name is name of var and key the key in configmap).
  configmap:
    - name: WebhooksUrl
      key: urls__webhooks
    - name: IdentityUrl
      key: identity_e
    - name: CallbackUrl
      key: webhooksweb_e
    - name: SelfUrl
      key: webhooksweb_e
      # values define environment variables with a fixed value (no configmap involved) (name is name of var, and value is its value)
  values:
    - name: ASPNETCORE_ENVIRONMENT
      value: Production
    - name: OrchestratorType
      value: 'K8S'
    - name: Token
      value: "WebHooks-Demo-Web"       # Can use whatever you want




========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webhooks-web.fullname" . -}}
{{- $cfgname := printf "%s-%s" "cfg" $name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "webhooks-web.fullname" . }}
  labels:
    ufo: {{ $cfgname}}
    app: {{ template "webhooks-web.name" . }}
    chart: {{ template "webhooks-web.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "webhooks-web.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "webhooks-web.name" . }}
        release: {{ .Release.Name }}
      {{ if .Values.inf.mesh.enabled -}}
      annotations:
        linkerd.io/inject: enabled
      {{- end }}             
    spec:
      {{ if .Values.inf.registry -}}
      imagePullSecrets:
      - name: {{ .Values.inf.registry.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ template "fqdn-image" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: PATH_BASE
              value: {{ include "pathBase" . }}
            - name: k8sname
              value: {{ .Values.clusterName }}
          {{- if .Values.env.values -}}
          {{- range .Values.env.values }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end -}}
          {{- end -}}
          {{- if .Values.env.configmap -}}
          {{- range .Values.env.configmap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $cfgname }}
                  key: {{ .key }}
          {{- end -}}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- if .Values.ingress.enabled -}}
{{- $ingressPath := include "pathBase" . -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "webhooks-web.fullname" . }}
  labels:
    app: {{ template "webhooks-web.name" . }}
    chart: {{ template "webhooks-web.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.ingress.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- if and .Values.inf.tls.enabled .Values.inf.tls.issuer }}
    cert-manager.io/issuer: {{ .Values.inf.tls.issuer }} 
{{- end }}
{{- if .Values.inf.mesh.enabled }} 
{{- with .Values.ingress.mesh.annotations }}
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
    - host: {{ . }}
      http:
        paths:
          - path: {{ $ingressPath }}
            backend:
              serviceName: {{ $.Values.app.svc.webhooksweb }}
              servicePort: http
  {{- end }}
{{- end }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.app.svc.webhooksweb }}
  labels:
    app: {{ template "webhooks-web.name" . }}
    chart: {{ template "webhooks-web.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ template "webhooks-web.name" . }}
    release: {{ .Release.Name }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

{{- $name := include "webhooks-web.fullname" . -}}
{{- $identity := include "url-of" (list .Values.app.ingress.entries.identity .) -}}
{{- $webhooksweb := include "url-of" (list .Values.app.ingress.entries.webhooksweb .) -}}
{{- $webhooks := include "url-of" (list .Values.app.ingress.entries.webhooks .) -}}
{{- $protocol := include "protocol" . -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "cfg-{{ $name }}"
  labels:
    app: {{ template "webhooks-web.name" . }}
    chart: {{ template "webhooks-web.chart" .}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  urls__webhooks: {{ $protocol }}://{{ $webhooks }}
  identity_e: {{ $protocol }}://{{ $identity }}
  webhooksweb_e: {{ $protocol }}://{{ $webhooksweb }}
  urls_webhooksweb: http://{{ .Values.app.svc.webhooksweb }}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: Service
apiVersion: v1
metadata:
  name: sql-service
spec:
  type: NodePort
  selector:
    app: sql-data
  ports:
    - port: 1433
      nodePort: 31433
      name: sql-port


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: Service
apiVersion: v1
metadata:
  name: rabbitmq-admin
spec:
  type: NodePort
  selector:
    app: rabbitmq
  ports:
    - port: 15672
      nodePort: 31672
      name: rabbitmq-port


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

---
## Default Kibana configuration from kibana-docker.
## from https://github.com/elastic/kibana-docker/blob/master/build/kibana/config/kibana.yml
#
server.name: kibana
server.host: "0"
elasticsearch.url: http://elasticsearch:9200


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

---
## Default Logstash configuration from logstash-docker.
## from https://github.com/elastic/logstash-docker/blob/master/build/logstash/config/logstash-oss.yml
#
http.host: "0.0.0.0"
path.config: /usr/share/logstash/pipeline

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

---
## Default Elasticsearch configuration from elasticsearch-docker.
## from https://github.com/elastic/elasticsearch-docker/blob/master/build/elasticsearch/elasticsearch.yml
#
cluster.name: "docker-cluster"
network.host: 0.0.0.0

# minimum_master_nodes need to be explicitly set when bound on a public IP
# set to 1 to allow single node clusters
# Details: https://github.com/elastic/elasticsearch/pull/17288
discovery.zen.minimum_master_nodes: 1

## Use single node discovery in order to disable production mode and avoid bootstrap checks
## see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
#
discovery.type: single-node


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

parameters:
  services: ''
  registryEndpoint: ''
  helmfrom: ''
  helmto: ''

jobs:
- job: BuildContainersForPR_Linux
  condition: eq('${{ variables['Build.Reason'] }}', 'PullRequest')
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - bash: docker-compose -f src/docker-compose.yml build ${{ parameters.services }}
    displayName: Compose build ${{ parameters.services }}
    env:
      TAG: ${{ variables['Build.SourceBranchName'] }}
- job: BuildContainersForPR_Windows
  condition: False
  # condition: eq('${{ variables['Build.Reason'] }}', 'PullRequest')
  pool:
    vmImage: 'windows-2019'
  steps:
  - bash: docker-compose f src/docker-compose.yml build ${{ parameters.services }}
    displayName: Compose build ${{ parameters.services }}
    env:
      TAG: ${{ variables['Build.SourceBranchName'] }}
      PLATFORM: win
      NODE_IMAGE: stefanscherer/node-windows:10
- job: BuildLinux
  condition: ne('${{ variables['Build.Reason'] }}', 'PullRequest')
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DockerCompose@0
    displayName: Compose build ${{ parameters.services }}
    inputs:
      dockerComposeCommand: 'build ${{ parameters.services }}'
      containerregistrytype: Container Registry
      dockerRegistryEndpoint: ${{ parameters.registryEndpoint }}
      dockerComposeFile: src/docker-compose.yml
      qualifyImageNames: true
      projectName: ""
      dockerComposeFileArgs: |
        TAG=${{ variables['Build.SourceBranchName'] }}
  - task: DockerCompose@0
    displayName: Compose push ${{ parameters.images }}
    inputs:
      dockerComposeCommand: 'push ${{ parameters.services }}'
      containerregistrytype: Container Registry
      dockerRegistryEndpoint: ${{ parameters.registryEndpoint }}
      dockerComposeFile: src/docker-compose.yml
      qualifyImageNames: true
      projectName: ""
      dockerComposeFileArgs: |
        TAG=${{ variables['Build.SourceBranchName'] }}
  - task: CopyFiles@2
    inputs:
      sourceFolder: ${{ parameters.helmfrom }}
      targetFolder: ${{ parameters.helmto }}
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: ${{ parameters.helmto }}
      artifactName: helm
- job: BuildWindows
  condition: False
  # condition: ne('${{ variables['Build.Reason'] }}', 'PullRequest')
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: DockerCompose@0
    displayName: Compose build ${{ parameters.services }}
    inputs:
      dockerComposeCommand: 'build ${{ parameters.services }}'
      containerregistrytype: Container Registry
      dockerRegistryEndpoint: ${{ parameters.registryEndpoint }}
      dockerComposeFile: src/docker-compose.yml
      qualifyImageNames: true
      projectName: ""
      dockerComposeFileArgs: |
        TAG=${{ variables['Build.SourceBranchName'] }}
        PLATFORM=win
        NODE_IMAGE=stefanscherer/node-windows:10
  - task: DockerCompose@0
    displayName: Compose push ${{ parameters.services }}
    inputs:
      dockerComposeCommand: 'push ${{ parameters.services }}'
      containerregistrytype: Container Registry
      dockerRegistryEndpoint: ${{ parameters.registryEndpoint }}
      dockerComposeFile: src/docker-compose.yml
      qualifyImageNames: true
      projectName: ""
      dockerComposeFileArgs: |
        TAG=${{ variables['Build.SourceBranchName'] }}
        PLATFORM=win


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

parameters:
  image: ''
  branch: ''
  registry: 'eshop'
  registryEndpoint: ''

jobs:
- job: manifest
  condition: and(succeeded(),ne('${{ variables['Build.Reason'] }}', 'PullRequest'))
  dependsOn:
    # - BuildWindows
    - BuildLinux  
  pool: 
    vmImage: 'Ubuntu 16.04'
  steps:
  - task: Docker@1
    displayName: Docker Login
    inputs:
      command: login
      containerregistrytype: 'Container Registry'
      dockerRegistryEndpoint: ${{ parameters.registryEndpoint }}
      # Disabled windows deploy
      # docker --config ~/.docker manifest create ${{ parameters.registry }}/${{ parameters.image }}:${{ parameters.branch }} ${{ parameters.registry }}/${{ parameters.image }}:linux-${{ parameters.branch }} ${{ parameters.registry }}/${{ parameters.image }}:win-${{ parameters.branch }}
      # docker --config ~/.docker manifest create ${{ parameters.registry }}/${{ parameters.image }}:latest ${{ parameters.registry }}/${{ parameters.image }}:linux-latest ${{ parameters.registry }}/${{ parameters.image }}:win-latest
  - bash: |
      mkdir -p ~/.docker
      sed '$ s/.$//' $DOCKER_CONFIG/config.json > ~/.docker/config.json
      echo ',"experimental": "enabled" }' >> ~/.docker/config.json
      docker --config ~/.docker manifest create ${{ parameters.registry }}/${{ parameters.image }}:${{ parameters.branch }} ${{ parameters.registry }}/${{ parameters.image }}:linux-${{ parameters.branch }}
      docker --config ~/.docker manifest create ${{ parameters.registry }}/${{ parameters.image }}:latest ${{ parameters.registry }}/${{ parameters.image }}:linux-latest
      docker --config ~/.docker manifest push ${{ parameters.registry }}/${{ parameters.image }}:${{ parameters.branch }}
      docker --config ~/.docker manifest push ${{ parameters.registry }}/${{ parameters.image }}:latest
    displayName: Create multiarch manifest


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

variables:
    registryEndpoint: eshop-registry
trigger:
  branches:
    include:
    - master
    - dev
  paths:
    include:
    - src/BuildingBlocks/*
    - src/Services/Webhooks/*
    - build/azure-devops/buildimages.yml
    - build/azure-devops/multiarch.yml
    - build/azure-devops/webhooks-api/*
    - deploy/k8s/helm/webhooks-api/*
jobs:
- template: ../buildimages.yaml
  parameters:
    services: webhooks-api
    registryEndpoint: $(registryEndpoint)
    helmfrom: $(Build.SourcesDirectory)/deploy/k8s/helm
    helmto: $(Build.ArtifactStagingDirectory)/deploy/k8s/helm
- template: ../multiarch.yaml
  parameters:
    image: webhooks.api
    branch: $(Build.SourceBranchName)
    registryEndpoint: $(registryEndpoint)

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

variables:
    registryEndpoint: eshop-registry
trigger:
  branches:
    include:
    - master
    - dev
  paths:
    include:
    - src/BuildingBlocks/*
    - src/Services/Catalog/*
    - build/azure-devops/buildimages.yml
    - build/azure-devops/multiarch.yml
    - build/azure-devops/catalog-api/*
    - deploy/k8s/helm/catalog-api/*
jobs:
- template: ../buildimages.yaml
  parameters:
    services: catalog-api
    registryEndpoint: $(registryEndpoint)
    helmfrom: $(Build.SourcesDirectory)/deploy/k8s/helm
    helmto: $(Build.ArtifactStagingDirectory)/deploy/k8s/helm
- template: ../multiarch.yaml
  parameters:
    image: catalog.api
    branch: $(Build.SourceBranchName)
    registryEndpoint: $(registryEndpoint)


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

variables:
    registryEndpoint: eshop-registry
trigger:
  branches:
    include:
    - master
    - dev
  paths:
    include:
    - src/BuildingBlocks/*
    - src/Web/WebMVC/*
    - build/azure-devops/buildimages.yml
    - build/azure-devops/multiarch.yml
    - build/azure-devops/webmvc/*
    - deploy/k8s/helm/webmvc/*
jobs:
- template: ../buildimages.yaml
  parameters:
    services: webmvc
    registryEndpoint: $(registryEndpoint)
    helmfrom: $(Build.SourcesDirectory)/deploy/k8s/helm
    helmto: $(Build.ArtifactStagingDirectory)/deploy/k8s/helm
- template: ../multiarch.yaml
  parameters:
    image: webmvc
    branch: $(Build.SourceBranchName)
    registryEndpoint: $(registryEndpoint)

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

variables:
    registryEndpoint: eshop-registry
trigger:
  branches:
    include:
    - master
    - dev
  paths:
    include:
    - src/ApiGateways/Mobile.Bff.Shopping/aggregator/*
    - build/azure-devops/buildimages.yml
    - build/azure-devops/multiarch.yml
    - build/azure-devops/mobile-shopping-agg/*
    - deploy/k8s/helm/mobileshoppingagg/*
jobs:
- template: ../buildimages.yaml
  parameters:
    services: mobileshoppingagg
    registryEndpoint: $(registryEndpoint)
    helmfrom: $(Build.SourcesDirectory)/deploy/k8s/helm
    helmto: $(Build.ArtifactStagingDirectory)/deploy/k8s/helm
- template: ../multiarch.yaml
  parameters:
    image: mobileshoppingagg
    branch: $(Build.SourceBranchName)
    registryEndpoint: $(registryEndpoint)



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

variables:
    registryEndpoint: eshop-registry
trigger:
  branches:
    include:
    - master
    - dev
  paths:
    include:
    - src/BuildingBlocks/*
    - src/Services/Payment/*
    - build/azure-devops/buildimages.yml
    - build/azure-devops/multiarch.yml
    - build/azure-devops/payment-api/*
    - deploy/k8s/helm/payment-api/*
jobs:
- template: ../buildimages.yaml
  parameters:
    services: payment-api
    registryEndpoint: $(registryEndpoint)
    helmfrom: $(Build.SourcesDirectory)/deploy/k8s/helm
    helmto: $(Build.ArtifactStagingDirectory)/deploy/k8s/helm
- template: ../multiarch.yaml
  parameters:
    image: payment.api
    branch: $(Build.SourceBranchName)
    registryEndpoint: $(registryEndpoint)

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

variables:
    registryEndpoint: eshop-registry
trigger:
  branches:
    include:
    - master
    - dev
  paths:
    include:
    - src/BuildingBlocks/*
    - src/Web/WebhookClient/*
    - build/azure-devops/buildimages.yml
    - build/azure-devops/multiarch.yml
    - build/azure-devops/webhooks-client/*
    - deploy/k8s/helm/webhooks-web/*
jobs:
- template: ../buildimages.yaml
  parameters:
    services: webhooks-client
    registryEndpoint: $(registryEndpoint)
    helmfrom: $(Build.SourcesDirectory)/deploy/k8s/helm
    helmto: $(Build.ArtifactStagingDirectory)/deploy/k8s/helm
- template: ../multiarch.yaml
  parameters:
    image: webhooks.client
    branch: $(Build.SourceBranchName)
    registryEndpoint: $(registryEndpoint)


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

variables:
    registryEndpoint: eshop-registry
trigger:
  branches:
    include:
    - master
    - dev
  paths:
    include:
    - src/BuildingBlocks/*
    - src/Services/Ordering/*
    - build/azure-devops/buildimages.yml
    - build/azure-devops/multiarch.yml
    - build/azure-devops/ordering-api/*
    - deploy/k8s/helm/ordering-api/*
    - deploy/k8s/helm/ordering-backgroundtasks/*
    - deploy/k8s/helm/ordering-signalrhub/*
jobs:
- template: ../buildimages.yaml
  parameters:
    services: ordering-api
    registryEndpoint: $(registryEndpoint)
    helmfrom: $(Build.SourcesDirectory)/deploy/k8s/helm
    helmto: $(Build.ArtifactStagingDirectory)/deploy/k8s/helm
- template: ../multiarch.yaml
  parameters:
    image: ordering.api
    branch: $(Build.SourceBranchName)
    registryEndpoint: $(registryEndpoint)

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

variables:
    registryEndpoint: eshop-registry
trigger:
  branches:
    include:
    - master
    - dev
  paths:
    include:
    - src/BuildingBlocks/*
    - src/Services/Marketing/*
    - build/azure-devops/buildimages.yml
    - build/azure-devops/multiarch.yml
    - build/azure-devops/marketing-api/*
    - deploy/k8s/helm/marketing-api/*
jobs:
- template: ../buildimages.yaml
  parameters:
    services: marketing-api
    registryEndpoint: $(registryEndpoint)
    helmfrom: $(Build.SourcesDirectory)/deploy/k8s/helm
    helmto: $(Build.ArtifactStagingDirectory)/deploy/k8s/helm
- template: ../multiarch.yaml
  parameters:
    image: marketing.api
    branch: $(Build.SourceBranchName)
    registryEndpoint: $(registryEndpoint)


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

variables:
    registryEndpoint: eshop-registry
trigger:
  branches:
    include:
    - master
    - dev
  paths:
    include:
    - src/BuildingBlocks/*
    - src/Services/Location/*
    - build/azure-devops/buildimages.yml
    - build/azure-devops/multiarch.yml
    - build/azure-devops/location-api/*
    - deploy/k8s/helm/locations-api/*
jobs:
- template: ../buildimages.yaml
  parameters:
    services: locations-api
    registryEndpoint: $(registryEndpoint)
    helmfrom: $(Build.SourcesDirectory)/deploy/k8s/helm
    helmto: $(Build.ArtifactStagingDirectory)/deploy/k8s/helm
- template: ../multiarch.yaml
  parameters:
    image: locations.api
    branch: $(Build.SourceBranchName)
    registryEndpoint: $(registryEndpoint)


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

variables:
    registryEndpoint: eshop-registry
trigger:
  branches:
    include:
    - master
    - dev
  paths:
    include:
    - src/BuildingBlocks/*
    - src/Web/WebStatus/*
    - build/azure-devops/buildimages.yml
    - build/azure-devops/multiarch.yml
    - build/azure-devops/webstatus/*
    - deploy/k8s/helm/webstatus/*
jobs:
- template: ../buildimages.yaml
  parameters:
    services: webstatus
    registryEndpoint: $(registryEndpoint)
    helmfrom: $(Build.SourcesDirectory)/deploy/k8s/helm
    helmto: $(Build.ArtifactStagingDirectory)/deploy/k8s/helm
- template: ../multiarch.yaml
  parameters:
    image: webstatus
    branch: $(Build.SourceBranchName)
    registryEndpoint: $(registryEndpoint)

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

variables:
    registryEndpoint: eshop-registry
trigger:
  branches:
    include:
    - master
    - dev
  paths:
    include:
    - src/BuildingBlocks/*
    - src/Services/Identity/*
    - build/azure-devops/buildimages.yml
    - build/azure-devops/multiarch.yml
    - build/azure-devops/identity-api/*
    - deploy/k8s/helm/identity-api/*
jobs:
- template: ../buildimages.yaml
  parameters:
    services: identity-api
    registryEndpoint: $(registryEndpoint)
    helmfrom: $(Build.SourcesDirectory)/deploy/k8s/helm
    helmto: $(Build.ArtifactStagingDirectory)/deploy/k8s/helm
- template: ../multiarch.yaml
  parameters:
    image: identity.api
    branch: $(Build.SourceBranchName)
    registryEndpoint: $(registryEndpoint)


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

variables:
    registryEndpoint: eshop-registry
trigger:
  branches:
    include:
    - master
    - dev
  paths:
    include:
    - src/BuildingBlocks/*
    - src/Services/Basket/*
    - build/azure-devops/buildimages.yml
    - build/azure-devops/multiarch.yml
    - build/azure-devops/basket-api/*
    - deploy/k8s/helm/basket-api/*
jobs:
- template: ../buildimages.yaml
  parameters:
    services: basket-api
    registryEndpoint: $(registryEndpoint)
    helmfrom: $(Build.SourcesDirectory)/deploy/k8s/helm
    helmto: $(Build.ArtifactStagingDirectory)/deploy/k8s/helm
- template: ../multiarch.yaml
  parameters:
    image: basket.api
    branch: $(Build.SourceBranchName)
    registryEndpoint: $(registryEndpoint)


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

trigger:
  branches:
    include:
    - master
    - dev
  paths:
    include:
    - src/ApiGateways/*
    - build/azure-devops/buildimages.yml
    - build/azure-devops/multiarch.yml
    - build/azure-devops/apigws/*
    - deploy/k8s/helm/apigwmm/*
    - deploy/k8s/helm/apigwms/*
    - deploy/k8s/helm/apigwwm/*
    - deploy/k8s/helm/apigwws/*
    exclude:
    - src/ApiGateways/Mobile.Bff.Shopping/aggregator/*
    - src/ApiGateways/Web.Bff.Shopping/aggregator/*
jobs:
- job: PublishCharts
  condition: ne('$(Build.Reason)', 'PullRequest')
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/deploy/k8s/helm
      targetFolder: $(Build.ArtifactStagingDirectory)/deploy/k8s/helm
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)/deploy/k8s/helm
      artifactName: helm


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

pool:
  vmImage: 'ubuntu-16.04'
variables:
    registryEndpoint: eshop-registry
trigger:
  branches:
    include:
    - master
    - dev
  paths:
    include:
    - build/azure-devops/buildimages.yml
    - build/azure-devops/multiarch.yml
    - build/azure-devops/infrastructure/*
    - deploy/k8s/helm/basket-data/*
    - deploy/k8s/helm/keystore-data/*
    - deploy/k8s/helm/nosql-data/*
    - deploy/k8s/helm/rabbitmq/*
    - deploy/k8s/helm/sql-data/*
steps:
- task: CopyFiles@2
  inputs:
    sourceFolder: $(Build.SourcesDirectory)/deploy/k8s/helm
    targetFolder: $(Build.ArtifactStagingDirectory)/deploy/k8s/helm
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: $(Build.ArtifactStagingDirectory)/deploy/k8s/helm
    artifactName: helm


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

variables:
    registryEndpoint: eshop-registry
trigger:
  branches:
    include:
    - master
    - dev
  paths:
    include:
    - src/ApiGateways/Web.Bff.Shopping/aggregator/*
    - build/azure-devops/buildimages.yml
    - build/azure-devops/multiarch.yml
    - build/azure-devops/web-shopping-agg/*
    - deploy/k8s/helm/webshoppingagg/*
jobs:
- template: ../buildimages.yaml
  parameters:
    services: webshoppingagg
    registryEndpoint: $(registryEndpoint)
    helmfrom: $(Build.SourcesDirectory)/deploy/k8s/helm
    helmto: $(Build.ArtifactStagingDirectory)/deploy/k8s/helm
- template: ../multiarch.yaml
  parameters:
    image: webshoppingagg
    branch: $(Build.SourceBranchName)
    registryEndpoint: $(registryEndpoint)

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

variables:
    registryEndpoint: eshop-registry
trigger:
  branches:
    include:
    - master
    - dev
  paths:
    include:
    - src/BuildingBlocks/*
    - src/Web/WebSPA/*
    - build/azure-devops/buildimages.yml
    - build/azure-devops/multiarch.yml
    - build/azure-devops/webspa/*
    - deploy/k8s/helm/webspa/*
jobs:
- template: ../buildimages.yaml
  parameters:
    services: webspa
    registryEndpoint: $(registryEndpoint)
    helmfrom: $(Build.SourcesDirectory)/deploy/k8s/helm
    helmto: $(Build.ArtifactStagingDirectory)/deploy/k8s/helm
- template: ../multiarch.yaml
  parameters:
    image: webspa
    branch: $(Build.SourceBranchName)
    registryEndpoint: $(registryEndpoint)

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# This file contains specific services build and images for Windows Containers.
#
# MUST be used alongside "docker-compose.yml" in all windows container commands

version: '3.4'

services:
  sqldata:
    image: mcr.microsoft.com/mssql/server:2017-latest 

  nosqldata:
    image: mongo:windowsservercore

  basket.data:
    image: redis:nanoserver

  rabbitmq:
    image: spring2/rabbitmq

  identity-api:
    build:
      args:
        NODE_IMAGE: stefanscherer/node-windows:10

  webspa:
    build:
      args:
        NODE_IMAGE: stefanscherer/node-windows:10

  webmvc:
    build:
      args:
        NODE_IMAGE: stefanscherer/node-windows:10


networks:
  default:
    external:
      name: nat

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

version: '3.4'

# The default docker-compose.override file can use the "localhost" as the external name for testing web apps within the same dev machine.
# The ESHOP_EXTERNAL_DNS_NAME_OR_IP environment variable is taken, by default, from the ".env" file defined like:
#     ESHOP_EXTERNAL_DNS_NAME_OR_IP=localhost
# but values present in the environment vars at runtime will always override those defined inside the .env file
# An external IP or DNS name has to be used (instead localhost and the 10.0.75.1 IP) when testing the Web apps and the Xamarin apps from remote machines/devices using the same WiFi, for instance.

services:
  seq:
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "5340:80"

  sqldata:
    environment:
      - SA_PASSWORD=Pass@word
      - ACCEPT_EULA=Y
    ports:
      - "5433:1433"
    volumes:
      - eshop-sqldata:/var/opt/mssql

  nosqldata:
    ports:
      - "27017:27017"
    volumes:
      - eshop-nosqldata:/data/db

  basketdata:
    ports:
      - "6379:6379"
    volumes:
      - eshop-basketdata:/data
  rabbitmq:
    ports:
      - "15672:15672"
      - "5672:5672"

  identity-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - SpaClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5104
      - XamarinCallback=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5105/xamarincallback
      - ConnectionString=${ESHOP_AZURE_IDENTITY_DB:-Server=sqldata;Database=Microsoft.eShopOnContainers.Service.IdentityDb;User Id=sa;Password=Pass@word}
      - MvcClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5100
      - LocationApiClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5109
      - MarketingApiClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5110
      - BasketApiClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5103
      - OrderingApiClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5102
      - MobileShoppingAggClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5120
      - WebShoppingAggClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5121
      - WebhooksApiClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5113
      - WebhooksWebClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5114
      - UseCustomizationData=True
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
    ports:
      - "5105:80"

  basket-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_REDIS_BASKET_DB:-basketdata}
      - identityUrl=http://identity-api
      - IdentityUrlExternal=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5105
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureServiceBusEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
      - PATH_BASE=/basket-api
      - GRPC_PORT=81
      - PORT=80
    ports:
      - "5103:80"
      - "9103:81"

  catalog-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionString=${ESHOP_AZURE_CATALOG_DB:-Server=sqldata;Database=Microsoft.eShopOnContainers.Services.CatalogDb;User Id=sa;Password=Pass@word}
      - PicBaseUrl=${ESHOP_STORAGE_CATALOG_URL}
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureStorageAccountName=${ESHOP_AZURE_STORAGE_CATALOG_NAME}
      - AzureStorageAccountKey=${ESHOP_AZURE_STORAGE_CATALOG_KEY}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
      - AzureStorageEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - GRPC_PORT=81
      - PORT=80
      - PATH_BASE=/catalog-api
    ports:
      - "5101:80"
      - "9101:81"

  ordering-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_ORDERING_DB:-Server=sqldata;Database=Microsoft.eShopOnContainers.Services.OrderingDb;User Id=sa;Password=Pass@word}
      - identityUrl=http://identity-api
      - IdentityUrlExternal=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5105
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
      - CheckUpdateTime=30000
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
      - Serilog__MinimumLevel__Override__Microsoft.eShopOnContainers.BuildingBlocks.EventBusRabbitMQ=Verbose
      - Serilog__MinimumLevel__Override__ordering-api=Verbose
      - PATH_BASE=/ordering-api
      - GRPC_PORT=81
      - PORT=80
    ports:
      - "5102:80"
      - "9102:81"

  ordering-backgroundtasks:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_ORDERING_DB:-Server=sqldata;Database=Microsoft.eShopOnContainers.Services.OrderingDb;User Id=sa;Password=Pass@word}
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
      - CheckUpdateTime=30000
      - GracePeriodTime=1
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
      - Serilog__MinimumLevel__Override__Microsoft.eShopOnContainers.BuildingBlocks.EventBusRabbitMQ=Verbose
    ports:
      - "5111:80"

  marketing-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_MARKETING_DB:-Server=sqldata;Database=Microsoft.eShopOnContainers.Services.MarketingDb;User Id=sa;Password=Pass@word}
      - MongoConnectionString=${ESHOP_AZURE_COSMOSDB:-mongodb://nosqldata}
      - MongoDatabase=MarketingDb
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - identityUrl=http://identity-api
      - IdentityUrlExternal=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5105
      - CampaignDetailFunctionUri=${ESHOP_AZUREFUNC_CAMPAIGN_DETAILS_URI}
      - PicBaseUrl=${ESHOP_STORAGE_MARKETING_URL}
      - AzureStorageAccountName=${ESHOP_AZURE_STORAGE_MARKETING_NAME}
      - AzureStorageAccountKey=${ESHOP_AZURE_STORAGE_MARKETING_KEY}
      - AzureServiceBusEnabled=False
      - AzureStorageEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
      - PATH_BASE=/marketing-api
    ports:
      - "5110:80"

  payment-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureServiceBusEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - Serilog__MinimumLevel__Override__payment-api.IntegrationEvents.EventHandling=Verbose
      - Serilog__MinimumLevel__Override__Microsoft.eShopOnContainers.BuildingBlocks.EventBusRabbitMQ=Verbose
    ports:
      - "5108:80"

  locations-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_COSMOSDB:-mongodb://nosqldata}
      - Database=LocationsDb
      - identityUrl=http://identity-api
      - IdentityUrlExternal=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5105
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureServiceBusEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
      - PATH_BASE=/locations-api
    ports:
      - "5109:80"

  webhooks-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_WEBHOOKS_DB:-Server=sqldata;Database=Microsoft.eShopOnContainers.Services.WebhooksDb;User Id=sa;Password=Pass@word}
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - IdentityUrl=http://identity-api
      - IdentityUrlExternal=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5105
    ports:
      - "5113:80"

  mobileshoppingapigw:
    volumes:
      - ./ApiGateways/Envoy/config/mobilemarketing:/etc/envoy
    ports:
    - "5200:80"
    - "15200:8001"

  mobilemarketingapigw:
    volumes:
      - ./ApiGateways/Envoy/config/mobileshopping:/etc/envoy
    ports:
    - "5201:80"
    - "15201:8001"

  webshoppingapigw:
    volumes:
      - ./ApiGateways/Envoy/config/webshopping:/etc/envoy
    ports:
    - "5202:80"
    - "15202:8001"

  webmarketingapigw:
    volumes:
      - ./ApiGateways/Envoy/config/webmarketing:/etc/envoy
    ports:
    - "5203:80"
    - "15203:8001"

  mobileshoppingagg:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - urls__basket=http://basket-api
      - urls__catalog=http://catalog-api
      - urls__orders=http://ordering-api
      - urls__identity=http://identity-api
      - urls__grpcBasket=http://basket-api:81
      - urls__grpcCatalog=http://catalog-api:81
      - urls__grpcOrdering=http://ordering-api:81
      - CatalogUrlHC=http://catalog-api/hc
      - OrderingUrlHC=http://ordering-api/hc
      - IdentityUrlHC=http://identity-api/hc
      - BasketUrlHC=http://basket-api/hc
      - MarketingUrlHC=http://marketing-api/hc
      - PaymentUrlHC=http://payment-api/hc
      - LocationUrlHC=http://locations-api/hc
      - IdentityUrlExternal=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5105
    ports:
      - "5120:80"

  webshoppingagg:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - urls__basket=http://basket-api
      - urls__catalog=http://catalog-api
      - urls__orders=http://ordering-api
      - urls__identity=http://identity-api
      - urls__grpcBasket=http://basket-api:81
      - urls__grpcCatalog=http://catalog-api:81
      - urls__grpcOrdering=http://ordering-api:81
      - CatalogUrlHC=http://catalog-api/hc
      - OrderingUrlHC=http://ordering-api/hc
      - IdentityUrlHC=http://identity-api/hc
      - BasketUrlHC=http://basket-api/hc
      - MarketingUrlHC=http://marketing-api/hc
      - PaymentUrlHC=http://payment-api/hc
      - LocationUrlHC=http://locations-api/hc
      - IdentityUrlExternal=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5105
    ports:
      - "5121:80"

  ordering-signalrhub:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureServiceBusEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - identityUrl=http://identity-api
    ports:
      - "5112:80"

  webstatus:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - HealthChecksUI__HealthChecks__0__Name=WebMVC HTTP Check
      - HealthChecksUI__HealthChecks__0__Uri=http://webmvc/hc
      - HealthChecksUI__HealthChecks__1__Name=WebSPA HTTP Check
      - HealthChecksUI__HealthChecks__1__Uri=http://webspa/hc
      - HealthChecksUI__HealthChecks__2__Name=Web Shopping Aggregator GW HTTP Check
      - HealthChecksUI__HealthChecks__2__Uri=http://webshoppingagg/hc
      - HealthChecksUI__HealthChecks__3__Name=Mobile Shopping Aggregator HTTP Check
      - HealthChecksUI__HealthChecks__3__Uri=http://mobileshoppingagg/hc
      - HealthChecksUI__HealthChecks__4__Name=Ordering HTTP Check
      - HealthChecksUI__HealthChecks__4__Uri=http://ordering-api/hc
      - HealthChecksUI__HealthChecks__5__Name=Basket HTTP Check
      - HealthChecksUI__HealthChecks__5__Uri=http://basket-api/hc
      - HealthChecksUI__HealthChecks__6__Name=Catalog HTTP Check
      - HealthChecksUI__HealthChecks__6__Uri=http://catalog-api/hc
      - HealthChecksUI__HealthChecks__7__Name=Identity HTTP Check
      - HealthChecksUI__HealthChecks__7__Uri=http://identity-api/hc
      - HealthChecksUI__HealthChecks__8__Name=Marketing HTTP Check
      - HealthChecksUI__HealthChecks__8__Uri=http://marketing-api/hc
      - HealthChecksUI__HealthChecks__9__Name=Locations HTTP Check
      - HealthChecksUI__HealthChecks__9__Uri=http://locations-api/hc
      - HealthChecksUI__HealthChecks__10__Name=Payments HTTP Check
      - HealthChecksUI__HealthChecks__10__Uri=http://payment-api/hc
      - HealthChecksUI__HealthChecks__11__Name=Ordering SignalRHub HTTP Check
      - HealthChecksUI__HealthChecks__11__Uri=http://ordering-signalrhub/hc
      - HealthChecksUI__HealthChecks__12__Name=Ordering HTTP Background Check
      - HealthChecksUI__HealthChecks__12__Uri=http://ordering-backgroundtasks/hc
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
    ports:
      - "5107:80"

  webspa:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - IdentityUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5105
      - PurchaseUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5202
      - MarketingUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5203
      - IdentityUrlHC=http://identity-api/hc
      - UseCustomizationData=True
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - SignalrHubUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5202
    ports:
      - "5104:80"

  webmvc:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - PurchaseUrl=http://webshoppingapigw
      - IdentityUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5105
      - MarketingUrl=http://webmarketingapigw
      - SignalrHubUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5202
      - IdentityUrlHC=http://identity-api/hc
      - UseCustomizationData=True
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
    ports:
      - "5100:80"

  webhooks-client:
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - Token=6168DB8D-DC58-4094-AF24-483278923590      # Webhooks are registered with this token (any value is valid) but the client won't check it
      - IdentityUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5105
      - CallBackUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5114
      - WebhooksUrl=http://webhooks-api
      - SelfUrl=http://webhooks-client/
    ports:
      - "5114:80"
volumes:
  eshop-sqldata:
    external: false
  eshop-nosqldata:
    external: false
  eshop-basketdata:
    external: false



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

version: '3.4'

services:
  sql-data-test:
    image: mcr.microsoft.com/mssql/server:2017-latest 

  nosql-data-test:
    image: mongo

  basket-data-test:
    image: redis:alpine

  rabbitmq-test:
    image: rabbitmq:3-management-alpine

  identity-api-test:
    image: ${REGISTRY:-eshop}/identity-api-test:${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Identity/Identity.API/Dockerfile
    depends_on:
      - sql-data-test

  basket-api-functional-test:
    image: ${REGISTRY:-eshop}/basket-api-test:${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Basket/Basket.API/Dockerfile
      target: functionaltest
    depends_on:
      - basket-data-test
      - identity-api-test
      - rabbitmq-test
    volumes:
      - ${BUILD_ARTIFACTSTAGINGDIRECTORY:-./tests-results/}:/tests

  basket-api-unit-test:
    image: ${REGISTRY:-eshop}/basket-api-unit-test:${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Basket/Basket.API/Dockerfile
      target: unittest
    depends_on:
      - basket-data-test
      - identity-api-test
      - rabbitmq-test
    volumes:
      - ${BUILD_ARTIFACTSTAGINGDIRECTORY:-./tests-results/}:/tests

  catalog-api-functional-test:
    image: ${REGISTRY:-eshop}/catalog-api-functional-test:${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Catalog/Catalog.API/Dockerfile
      target: functionaltest
    depends_on:
      - sql-data-test
      - rabbitmq-test
    volumes:
      - ${BUILD_ARTIFACTSTAGINGDIRECTORY:-./tests-results/}:/tests

  catalog-api-unit-test:
    image: ${REGISTRY:-eshop}/catalog-api-unit-test:${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Catalog/Catalog.API/Dockerfile
      target: unittest
    depends_on:
      - sql-data-test
      - rabbitmq-test
    volumes:
      - ${BUILD_ARTIFACTSTAGINGDIRECTORY:-./tests-results/}:/tests

  ordering-api-functional-test:
    image: ${REGISTRY:-eshop}/ordering-api-test:${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.API/Dockerfile
      target: functionaltest
    depends_on:
      - sql-data-test
      - rabbitmq-test
    volumes:
      - ${BUILD_ARTIFACTSTAGINGDIRECTORY:-./tests-results/}:/tests

  ordering-api-unit-test:
    image: ${REGISTRY:-eshop}/ordering-api-unit-test:${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.API/Dockerfile
      target: unittest
    depends_on:
      - sql-data-test
      - rabbitmq-test
    volumes:
      - ${BUILD_ARTIFACTSTAGINGDIRECTORY:-./tests-results/}:/tests

  marketing-api-functional-test:
    image: ${REGISTRY:-eshop}/marketing-api-test:${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Marketing/Marketing.API/Dockerfile
      target: functionaltest
    depends_on:
      - sql-data-test
      - nosql-data-test
      - identity-api-test
      - rabbitmq-test
    volumes:
      - ${BUILD_ARTIFACTSTAGINGDIRECTORY:-./tests-results/}:/tests

  payment-api-test:
    image: ${REGISTRY:-eshop}/payment-api-test:${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Payment/Payment.API/Dockerfile
    depends_on:
      - rabbitmq-test

  locations-api-functional-test:
    image: ${REGISTRY:-eshop}/locations-api-test:${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Location/Locations.API/Dockerfile
      target: functionaltest
    depends_on:
      - nosql-data-test
      - rabbitmq-test
    volumes:
      - ${BUILD_ARTIFACTSTAGINGDIRECTORY:-./tests-results/}:/tests

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

version: '3.4'

services:

  elasticsearch:
    build:
      context: elk/elasticsearch/
    volumes:
      - ./elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"

  logstash:
    build:
      context: elk/logstash/
    volumes:
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "8080:8080"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: elk/kibana/
    volumes:
      - ./elk/kibana/config/:/usr/share/kibana/config:ro
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

version: '3.4'

# The Production docker-compose file has to have the external/real IPs or DNS names for the services 
# The ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP environment variable is taken, by default, from the ".env" file defined like: 
#     ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP=192.168.88.248
# but values present in the environment vars at runtime will always override those defined inside the .env file
# An external IP or DNS name has to be used when testing the Web apps and the Xamarin apps from remote machines/devices using the same WiFi, for instance.
#
# Set ASPNETCORE_ENVIRONMENT=Development to get errors while testing. 
#
# You need to start it with the following CLI command:
# docker-compose -f docker-compose-windows.yml -f docker-compose-windows.prod.yml up -d

services:

  basket-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_REDIS_BASKET_DB:-basket.data}
      - identityUrl=http://identity-api              #Local: You need to open your local dev-machine firewall at range 5100-5110.
      - IdentityUrlExternal=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5105
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - AzureServiceBusEnabled=False
    ports:
      - "5103:5103"

  catalog-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_CATALOG_DB:-Server=sqldata;Database=Microsoft.eShopOnContainers.Services.CatalogDb;User Id=sa;Password=Pass@word}
      - PicBaseUrl=${ESHOP_AZURE_STORAGE_CATALOG:-http://localhost:5101/api/v1/catalog/items/[0]/pic/}   #Local: You need to open your local dev-machine firewall at range 5100-5110.  
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - AzureStorageAccountName=${ESHOP_AZURE_STORAGE_CATALOG_NAME}
      - AzureStorageAccountKey=${ESHOP_AZURE_STORAGE_CATALOG_KEY}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
      - AzureStorageEnabled=False
    ports:
      - "5101:80"

  identity-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - SpaClient=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5104
      - XamarinCallback=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5105/xamarincallback
      - ConnectionStrings__DefaultConnection=${ESHOP_AZURE_IDENTITY_DB:-Server=sqldata;Database=Microsoft.eShopOnContainers.Service.IdentityDb;User Id=sa;Password=Pass@word}       
      - MvcClient=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5100              #Local: You need to open your local dev-machine firewall at range 5100-5110. 
      - LocationApiClient=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5109
      - MarketingApiClient=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5110
      - BasketApiClient=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5103
      - OrderingApiClient=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5102      
      - UseCustomizationData=True
    ports:
      - "5105:80"

  ordering-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_ORDERING_DB:-Server=sqldata;Database=Microsoft.eShopOnContainers.Services.OrderingDb;User Id=sa;Password=Pass@word}
      - identityUrl=http://identity-api              #Local: You need to open your local dev-machine firewall at range 5100-5110.
      - IdentityUrlExternal=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5105
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
    ports:
      - "5102:80"

  ordering.backgroundtasks:
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_ORDERING_DB:-Server=sqldata;Database=Microsoft.eShopOnContainers.Services.OrderingDb;User Id=sa;Password=Pass@word}
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
    ports:
      - "5111:80"
  
  webspa:
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0
      - CatalogUrl=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5101
      - OrderingUrl=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5102
      - IdentityUrl=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5105              #Local: You need to open your host's firewall at range 5100-5110. 
      - BasketUrl=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5103
      - MarketingUrl=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5110
      - CatalogUrlHC=http://catalog-api/hc
      - OrderingUrlHC=http://ordering-api/hc
      - IdentityUrlHC=http://identity-api/hc     #Local: Use ${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}, if using external IP or DNS name from browser.          
      - BasketUrlHC=http://basket-api/hc
      - MarketingUrlHC=http://marketing-api/hc
      - UseCustomizationData=True         
    ports:
      - "5104:80"

  webmvc:
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - CatalogUrl=http://catalog-api
      - OrderingUrl=http://ordering-api
      - IdentityUrl=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5105     #Local: Use ${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}, if using external IP or DNS name from browser.          
      - BasketUrl=http://basket-api
      - MarketingUrl=http://marketing-api
      - UseCustomizationData=True   #Remote: Use ${ESHOP_EXTERNAL_DNS_NAME_OR_IP} if using external IP or DNS name from browser. 
    ports:
      - "5100:80"
  
  marketing-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_MARKETING_DB:-Server=sqldata;Database=Microsoft.eShopOnContainers.Services.MarketingDb;User Id=sa;Password=Pass@word}
      - MongoConnectionString=${ESHOP_AZURE_COSMOSDB:-mongodb://nosqldata}
      - MongoDatabase=MarketingDb
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - identityUrl=http://identity-api              #Local: You need to open your local dev-machine firewall at range 5100-5110. 
      - IdentityUrlExternal=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5105
      - CampaignDetailFunctionUri=${ESHOP_AZUREFUNC_CAMPAIGN_DETAILS_URI}
      - PicBaseUrl=${ESHOP_AZURE_STORAGE_MARKETING:-http://localhost:5110/api/v1/campaigns/[0]/pic/}
      - AzureStorageAccountName=${ESHOP_AZURE_STORAGE_MARKETING_NAME}
      - AzureStorageAccountKey=${ESHOP_AZURE_STORAGE_MARKETING_KEY}
      - AzureServiceBusEnabled=False
      - AzureStorageEnabled=False
    ports:
      - "5110:80"

  sqldata:
    environment:
      - MSSQL_SA_PASSWORD=Pass@word
      - ACCEPT_EULA=Y
    ports:
      - "5433:1433"
  
  nosqldata:
    ports:
      - "27017:27017"

  webstatus:
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - CatalogUrl=http://catalog-api/hc
      - OrderingUrl=http://ordering-api/hc
      - BasketUrl=http://basket-api/hc
      - IdentityUrl=http://identity-api/hc
      - LocationsUrl=http://locations-api/hc
      - MarketingUrl=http://marketing-api/hc
      - mvc=http://webmvc/hc
      - spa=http://webspa/hc
      
    ports:
      - "5107:80"

  payment-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:5108
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - AzureServiceBusEnabled=False
    ports:
      - "5108:80"

  locations-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_COSMOSDB:-mongodb://nosqldata}
      - Database=LocationsDb
      - identityUrl=http://identity-api              #Local: You need to open your local dev-machine firewall at range 5100-5110. 
      - IdentityUrlExternal=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5105
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - AzureServiceBusEnabled=False
    ports:
      - "5109:80"

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

version: '3.4'

services:
  rabbitmq-test:
    ports:
      - "15672:15672"
      - "5672:5672"

  basket-data-test:
    ports:
      - "6379:6379"

  sql-data-test:
    environment:
      - SA_PASSWORD=Pass@word
      - ACCEPT_EULA=Y
    ports:
      - "5433:1433"

  nosql-data-test:
    ports:
      - "27017:27017"

  identity-api-test:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - SpaClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5104
      - XamarinCallback=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5105/xamarincallback
      - ConnectionString=${ESHOP_AZURE_IDENTITY_DB:-Server=sql-data-test;Database=Microsoft.eShopOnContainers.Service.IdentityDb;User Id=sa;Password=Pass@word}
      - MvcClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5100
      - LocationApiClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5109
      - MarketingApiClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5110
      - BasketApiClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5103
      - OrderingApiClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5102
      - MobileShoppingAggClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5120
      - WebShoppingAggClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5121
      - UseCustomizationData=True
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
    ports:
      - "5105:80"

  basket-api-functional-test:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_REDIS_BASKET_DB:-basket-data-test}
      - identityUrl=http://identity-api
      - IdentityUrlExternal=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5105
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq-test}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureServiceBusEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
    ports:
      - "5103:80"
    entrypoint:
        - dotnet
        - test
        - --logger
        - trx;LogFileName=/tests/basket-functional-test-results.xml

  basket-api-unit-test:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_REDIS_BASKET_DB:-basket-data-test}
      - identityUrl=http://identity-api
      - IdentityUrlExternal=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5105
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq-test}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureServiceBusEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
    ports:
      - "5113:80"
    entrypoint:
        - dotnet
        - test
        - --logger
        - trx;LogFileName=/tests/basket-unit-test-results.xml

  catalog-api-functional-test:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_CATALOG_DB:-Server=sql-data-test;Database=Microsoft.eShopOnContainers.Services.CatalogDb;User Id=sa;Password=Pass@word}
      - PicBaseUrl=${ESHOP_STORAGE_CATALOG_URL}
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq-test}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureStorageAccountName=${ESHOP_AZURE_STORAGE_CATALOG_NAME}
      - AzureStorageAccountKey=${ESHOP_AZURE_STORAGE_CATALOG_KEY}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
      - AzureStorageEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
    ports:
      - "5101:80"
    entrypoint:
        - dotnet
        - test
        - --logger
        - trx;LogFileName=/tests/catalog-functional-test-results.xml

  catalog-api-unit-test:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_CATALOG_DB:-Server=sql-data-test;Database=Microsoft.eShopOnContainers.Services.CatalogDb;User Id=sa;Password=Pass@word}
      - PicBaseUrl=${ESHOP_STORAGE_CATALOG_URL}
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq-test}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureStorageAccountName=${ESHOP_AZURE_STORAGE_CATALOG_NAME}
      - AzureStorageAccountKey=${ESHOP_AZURE_STORAGE_CATALOG_KEY}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
      - AzureStorageEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
    ports:
      - "5191:80"
    entrypoint:
        - dotnet
        - test
        - --logger
        - trx;LogFileName=/tests/catalog-unit-test-results.xml

  ordering-api-functional-test:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_ORDERING_DB:-Server=sql-data-test;Database=Microsoft.eShopOnContainers.Services.OrderingDb;User Id=sa;Password=Pass@word}
      - identityUrl=http://identity-api
      - IdentityUrlExternal=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5105
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq-test}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
      - CheckUpdateTime=30000
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
    ports:
      - "5102:80"
    entrypoint:
        - dotnet
        - test
        - --logger
        - trx;LogFileName=/tests/ordering-functional-test-results.xml

  ordering-api-unit-test:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_ORDERING_DB:-Server=sql-data-test;Database=Microsoft.eShopOnContainers.Services.OrderingDb;User Id=sa;Password=Pass@word}
      - identityUrl=http://identity-api
      - IdentityUrlExternal=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5105
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq-test}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
      - CheckUpdateTime=30000
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
    ports:
      - "5112:80"
    entrypoint:
        - dotnet
        - test
        - --logger
        - trx;LogFileName=/tests/ordering-unit-test-results.xml

  marketing-api-functional-test:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_MARKETING_DB:-Server=sql-data-test;Database=Microsoft.eShopOnContainers.Services.MarketingDb;User Id=sa;Password=Pass@word}
      - MongoConnectionString=${ESHOP_AZURE_COSMOSDB:-mongodb://nosql-data-test}
      - MongoDatabase=MarketingDb
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq-test}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - identityUrl=http://identity-api
      - IdentityUrlExternal=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5105
      - CampaignDetailFunctionUri=${ESHOP_AZUREFUNC_CAMPAIGN_DETAILS_URI}
      - PicBaseUrl=${ESHOP_STORAGE_MARKETING_URL}
      - AzureStorageAccountName=${ESHOP_AZURE_STORAGE_MARKETING_NAME}
      - AzureStorageAccountKey=${ESHOP_AZURE_STORAGE_MARKETING_KEY}
      - AzureServiceBusEnabled=False
      - AzureStorageEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
    ports:
      - "5110:80"
    entrypoint:
        - dotnet
        - test
        - --logger
        - trx;LogFileName=/tests/marketing-functional-test-results.xml

  payment-api-test:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq-test}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureServiceBusEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
    ports:
      - "5108:80"

  locations-api-functional-test:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_COSMOSDB:-mongodb://nosql-data-test}
      - Database=LocationsDb
      - identityUrl=http://identity-api
      - IdentityUrlExternal=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5105
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq-test}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureServiceBusEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
    ports:
      - "5109:80"
    entrypoint:
      - dotnet
      - test
      - --logger
      - trx;LogFileName=/tests/locations-functional-test-results.xml

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

version: '3.4'

# The Production docker-compose file has to have the external/real IPs or DNS names for the services
# The ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP environment variable is taken, by default, from the ".env" file defined like:
#     ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP=192.168.88.248
# but values present in the environment vars at runtime will always override those defined inside the .env file
# An external IP or DNS name has to be used when testing the Web apps and the Xamarin apps from remote machines/devices using the same WiFi, for instance.
#
# IMPORTANT: Note that this compose file uses ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP instead of ESHOP_EXTERNAL_DNS_NAME_OR_IP

# Set ASPNETCORE_ENVIRONMENT= Development or Production, depending if you want to show up errors while testing.
#
# You need to start it with the following CLI command:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:

  basket-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_REDIS_BASKET_DB:-basket.data}
      - identityUrl=http://identity-api              #Local: You need to open your local dev-machine firewall at range 5100-5110.
      - IdentityUrlExternal=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5105
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureServiceBusEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}

    ports:
      - "80"   # The API Gateway redirects and access through the internal port (80).

  catalog-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_CATALOG_DB:-Server=sqldata;Database=Microsoft.eShopOnContainers.Services.CatalogDb;User Id=sa;Password=Pass@word}
      - PicBaseUrl=${ESHOP_STORAGE_CATALOG_URL}
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureStorageAccountName=${ESHOP_AZURE_STORAGE_CATALOG_NAME}
      - AzureStorageAccountKey=${ESHOP_AZURE_STORAGE_CATALOG_KEY}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
      - AzureStorageEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
    ports:
      - "80"   # The API Gateway redirects and access through the internal port (80).

  identity-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - SpaClient=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5104
      - XamarinCallback=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5105/xamarincallback      #localhost do not work for UWP login, so we have to use "external" IP always
      - ConnectionString=${ESHOP_AZURE_IDENTITY_DB:-Server=sqldata;Database=Microsoft.eShopOnContainers.Service.IdentityDb;User Id=sa;Password=Pass@word}
      - MvcClient=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5100              #Local: You need to open your local dev-machine firewall at range 5100-5110.
      - LocationApiClient=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5109
      - MarketingApiClient=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5110
      - BasketApiClient=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5103
      - OrderingApiClient=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5102
      - MobileShoppingAggClient=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5120
      - WebShoppingAggClient=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5121
      - UseCustomizationData=True
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
    ports:
      - "5105:80"

  ordering-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_ORDERING_DB:-Server=sqldata;Database=Microsoft.eShopOnContainers.Services.OrderingDb;User Id=sa;Password=Pass@word}
      - identityUrl=http://identity-api              #Local: You need to open your local dev-machine firewall at range 5100-5110.
      - IdentityUrlExternal=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5105
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
      - CheckUpdateTime=30000
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
    ports:
      - "80"   # The API Gateway redirects and access through the internal port (80).

  ordering.backgroundtasks:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_ORDERING_DB:-Server=sqldata;Database=Microsoft.eShopOnContainers.Services.OrderingDb;User Id=sa;Password=Pass@word}
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
      - CheckUpdateTime=30000
      - GracePeriodTime=1
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
    ports:
      - "5111:80"

  marketing-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_MARKETING_DB:-Server=sqldata;Database=Microsoft.eShopOnContainers.Services.MarketingDb;User Id=sa;Password=Pass@word}
      - MongoConnectionString=${ESHOP_AZURE_COSMOSDB:-mongodb://nosqldata}
      - MongoDatabase=MarketingDb
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - identityUrl=http://identity-api              #Local: You need to open your local dev-machine firewall at range 5100-5110.
      - IdentityUrlExternal=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5105
      - CampaignDetailFunctionUri=${ESHOP_AZUREFUNC_CAMPAIGN_DETAILS_URI}
      - PicBaseUrl=${ESHOP_STORAGE_MARKETING_URL}
      - AzureStorageAccountName=${ESHOP_AZURE_STORAGE_MARKETING_NAME}
      - AzureStorageAccountKey=${ESHOP_AZURE_STORAGE_MARKETING_KEY}
      - AzureServiceBusEnabled=False
      - AzureStorageEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
    ports:
      - "80"   # The API Gateway redirects and access through the internal port (80).

  webspa:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - IdentityUrl=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5105              #Local: You need to open your local dev-machine firewall at range 5100-5105.  at range 5100-5105.
      - PurchaseUrl=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5202
      - MarketingUrl=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5203
      - CatalogUrlHC=http://catalog-api/hc
      - OrderingUrlHC=http://ordering-api/hc
      - IdentityUrlHC=http://identity-api/hc     #Local: Use ${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}, if using external IP or DNS name from browser.
      - BasketUrlHC=http://basket-api/hc
      - MarketingUrlHC=http://marketing-api/hc
      - PaymentUrlHC=http://payment-api/hc
      - UseCustomizationData=True
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
    ports:
      - "5104:80"

  webmvc:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - PurchaseUrl=http://webshoppingapigw
      - IdentityUrl=http://10.0.75.1:5105  # Local Mac: Use http://docker.for.mac.localhost:5105 || Local Windows:  Use 10.0.75.1 in a "Docker for Windows" environment, if using "localhost" from browser. || #Remote access: Use ${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP} if using external IP or DNS name from browser.
      - MarketingUrl=http://webmarketingapigw
      - CatalogUrlHC=http://catalog-api/hc
      - OrderingUrlHC=http://ordering-api/hc
      - IdentityUrlHC=http://identity-api/hc     #Local: Use ${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}, if using external IP or DNS name from browser.
      - BasketUrlHC=http://basket-api/hc
      - MarketingUrlHC=http://marketing-api/hc
      - PaymentUrlHC=http://payment-api/hc
      - UseCustomizationData=True
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
    ports:
      - "5100:80"

  webstatus:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - CatalogUrl=http://catalog-api/hc
      - OrderingUrl=http://ordering-api/hc
      - BasketUrl=http://basket-api/hc
      - IdentityUrl=http://identity-api/hc
      - LocationsUrl=http://locations-api/hc
      - MarketingUrl=http://marketing-api/hc
      - PaymentUrl=http://payment-api/hc
      - mvc=http://webmvc/hc
      - spa=http://webspa/hc
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
    ports:
      - "5107:80"

  payment-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureServiceBusEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
    ports:
      - "80"   # The API Gateway redirects and access through the internal port (80).

  locations-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=${ESHOP_AZURE_COSMOSDB:-mongodb://nosqldata}
      - Database=LocationsDb
      - identityUrl=http://identity-api              #Local: You need to open your local dev-machine firewall at range 5100-5110.
      - IdentityUrlExternal=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5105
      - EventBusConnection=${ESHOP_AZURE_SERVICE_BUS:-rabbitmq}
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureServiceBusEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
    ports:
      - "80"   # The API Gateway redirects and access through the internal port (80).

  sqldata:
    environment:
      - SA_PASSWORD=Pass@word
      - ACCEPT_EULA=Y
    ports:
      - "5433:1433"    # Important: In a production environment your should remove the external port

  nosqldata:
    ports:
      - "27017:27017"  # Important: In a production environment your should remove the external port

  basket.data:
    ports:
      - "6379:6379"    # Important: In a production environment your should remove the external port

  rabbitmq:
    ports:
      - "15672:15672"  # Important: In a production environment your should remove the external port
      - "5672:5672"    # Important: In a production environment your should remove the external port

  mobileshoppingapigw:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - IdentityUrl=http://identity-api              #Local: You need to open your local dev-machine firewall at range 5100-5110.
    ports:
      - "5200:80"   # Important: In a production environment your should remove the external port (5200) kept here for microservice debugging purposes.
                    # The API Gateway redirects and access through the internal port (80).
    volumes:
      - ./ApiGateways/Mobile.Bff.Shopping/apigw:/app/configuration

  mobilemarketingapigw:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - IdentityUrl=http://identity-api              #Local: You need to open your local dev-machine firewall at range 5100-5110.
    ports:
      - "5201:80"   # Important: In a production environment your should remove the external port (5201) kept here for microservice debugging purposes.
                    # The API Gateway redirects and access through the internal port (80).
    volumes:
      - ./ApiGateways/Mobile.Bff.Marketing/apigw:/app/configuration

  webshoppingapigw:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - IdentityUrl=http://identity-api              #Local: You need to open your local dev-machine firewall at range 5100-5110.
    ports:
      - "5202:80"   # Important: In a production environment your should remove the external port (5202) kept here for microservice debugging purposes.
                    # The API Gateway redirects and access through the internal port (80).
    volumes:
      - ./ApiGateways/Web.Bff.Shopping/apigw:/app/configuration

  webmarketingapigw:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - IdentityUrl=http://identity-api              #Local: You need to open your local dev-machine firewall at range 5100-5110.
    ports:
      - "5203:80"   # Important: In a production environment your should remove the external port (5203) kept here for microservice debugging purposes.
                    # The API Gateway redirects and access through the internal port (80).
    volumes:
      - ./ApiGateways/Web.Bff.Marketing/apigw:/app/configuration

  mobileshoppingagg:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - urls__basket=http://basket-api
      - urls__catalog=http://catalog-api
      - urls__orders=http://ordering-api
      - urls__identity=http://identity-api              #Local: You need to open your local dev-machine firewall at range 5100-5110.
    ports:
      - "80"   # Important: In a production environment your should remove the external port (5120) kept here for microservice debugging purposes.
                    # The API Gateway redirects and access through the internal port (80).

  webshoppingagg:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - urls__basket=http://basket-api
      - urls__catalog=http://catalog-api
      - urls__orders=http://ordering-api
      - urls__identity=http://identity-api              #Local: You need to open your local dev-machine firewall at range 5100-5110.
    ports:
      - "80"   # Important: In a production environment your should remove the external port (5121) kept here for microservice debugging purposes.
                    # The API Gateway redirects and access through the internal port (80).



========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

version: '3.4'

# ONLY NEEDED WHEN RUNNING WINDOWS CONTAINERS
#
# This file sets the containers' environment variables:
#
#  - EventBusUerName
#  - EventBusPassword
#
# To the default username & password used in the spring2/rabbitmq image.
#
# If you are using any other rabbitmq image with any other username/pwd then you can:
#
#  Set your shell environment variables:
#   - ESHOP_SERVICE_BUS_USERNAME
#   - ESHOP_SERVICE_BUS_PASSWORD
#
# With the appropiate values (note that you can use .env file also) AND DO NOT USE THIS FILE when launching windows container:
#
# docker-compose -f docker-compose-windows.yml -f docker-compose.override.yml up
# INSTEAD OF
# docker-compose -f docker-compose-windows.yml -f docker-compose.override.yml -f docker-compose.override.windows.yml up

services:      
  basket-api:
    environment:
      - EventBusUserName=admin
      - EventBusPassword=password

  catalog-api:
    environment:
      - EventBusUserName=admin
      - EventBusPassword=password

  ordering-api:
    environment:
      - EventBusUserName=admin
      - EventBusPassword=password

  ordering-backgroundtasks:
    environment:
      - EventBusUserName=admin
      - EventBusPassword=password

  payment-api:
    environment:
      - EventBusUserName=admin
      - EventBusPassword=password

  locations-api:
    environment:
      - EventBusUserName=admin
      - EventBusPassword=password

  ordering-signalrhub:
    environment:
      - EventBusUserName=admin
      - EventBusPassword=password


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: helm-release
apiVersion: 1.1
build:
  context: ..\..\..\
  dockerfile: Dockerfile
install:
  chart: ../../../k8s/helm/webmvc
  set:
    replicaCount: 1
    image:
      tag: $(tag)
      pullPolicy: Never
    ingress:
      annotations:
        kubernetes.io/ingress.class: traefik-azds
      hosts:
      - $(spacePrefix)eshop$(hostSuffix)
    inf:
      k8s:
        dns: $(spacePrefix)eshop$(hostSuffix)
  values:
  - values.dev.yaml?
  - secrets.dev.yaml?
  - inf.yaml
  - app.yaml
configurations:
  develop:
    build:
      useGitIgnore: true
      dockerfile: Dockerfile.develop
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION:-Debug}
    container:
      sync:
      - '**/Pages/**'
      - '**/Views/**'
      - '**/wwwroot/**'
      - '!**/*.{sln,csproj}'
      command: [dotnet, run, --no-restore, --no-build, --no-launch-profile, -c, "${BUILD_CONFIGURATION:-Debug}"]
      iterate:
        processesToKill: [dotnet, vsdbg]
        buildCommands:
        - [dotnet, build, --no-restore, -c, "${BUILD_CONFIGURATION:-Debug}"]


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

inf:
  k8s:
    dns: $(spacePrefix)identity-api$(hostSuffix)

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

﻿rules:
  # https://github.com/sasstools/sass-lint/tree/master/docs/rules
  # 0 = disabled - 1 = warning - 2 = error
  # Extends
  extends-before-mixins: 1
  extends-before-declarations: 2
  placeholder-in-extend: 0

  # Mixins
  mixins-before-declarations: 2

  # Line Spacing
  one-declaration-per-line: 2
  empty-line-between-blocks: 2
  single-line-per-selector: 2

  # Disallows
  # We disable some of that because we know that
  # if you use it is because is necessary
  no-attribute-selectors: 0
  no-color-hex: 0
  no-color-keywords: 2
  no-color-literals: 0
  no-combinators: 0
  no-css-comments: 0
  no-debug: 1
  no-disallowed-properties: 0
  no-duplicate-properties: 2
  no-empty-rulesets: 1
  no-extends: 0
  no-ids: 2
  no-important: 0
  no-invalid-hex: 2
  no-mergeable-selectors: 1
  no-misspelled-properties: 2
  no-qualifying-elements: 0
  no-trailing-whitespace: 2
  no-trailing-zero: 2
  no-transition-all: 0
  no-universal-selectors: 0
  no-url-domains: 0
  no-url-protocols: 0
  no-vendor-prefixes: 0
  no-warn: 2
  property-units: 0

  # Nesting
  declarations-before-nesting: 2
  force-attribute-nesting: 0
  force-element-nesting: 0
  force-pseudo-nesting: 0

  # Name Formats
  class-name-format: 0
  function-name-format: 0
  id-name-format: 0
  mixin-name-format: 0
  placeholder-name-format:
    - 1
    - allow-leading-underscore: true
    - convention: hyphenatedlowercase
  variable-name-format: 
    - 1
    - allow-leading-underscore: true
    - convention: hyphenatedlowercase

  # Style Guide
  attribute-quotes: 2
  # We know that always 1 level
  bem-depth: 0
  border-zero: 2
  brace-style: 
    - 2
    - style: 1tbs
  clean-import-paths: 2
  empty-args: 2
  hex-length:
    - 2 
    - style: long
  hex-notation:
    - 2
    - style: uppercase
  indentation:
    - 2
    - size: 4
  leading-zero: 2
  max-line-length: 0
  max-file-line-count: 0
  nesting-depth: 0
  # alphabetically
  property-sort-order: 2
  pseudo-element: 0
  quotes: 2
  shorthand-values: 0
  url-quotes: 0
  variable-for-property: 0
  zero-unit: 2

  # Inner Spacing
  space-after-comma: 2
  space-before-colon: 2
  space-after-colon: 2
  space-before-brace: 2
  space-before-bang: 2
  space-after-bang: 2
  space-between-parens: 2
  space-around-operator: 2

  # Final Items
  trailing-semicolon: 2
  final-newline: 2

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: helm-release
apiVersion: 1.1
build:
  context: ..\..\..\..
  dockerfile: Dockerfile
install:
  chart: ../../../../k8s/helm/webshoppingagg
  set:
    image:
      tag: $(tag)
      pullPolicy: Never
    ingress:
      annotations:
        kubernetes.io/ingress.class: traefik-azds
      hosts:
      # This expands to [space.s.]apigwms.<guid>.<region>.aksapp.io
      - $(spacePrefix)eshop$(hostSuffix)
    inf:
      k8s:
        dns: $(spacePrefix)eshop$(hostSuffix)      
  values:
  - values.dev.yaml?
  - secrets.dev.yaml?
  - app.yaml
  - inf.yaml
configurations:
  develop:
    build:
      useGitIgnore: true
      dockerfile: Dockerfile.develop
    container:
      syncTarget: /src
      sync:
      - '**/Pages/**'
      - '**/Views/**'
      - '**/wwwroot/**'
      - '!**/*.{sln,csproj}'
      command:
      - dotnet
      - run
      - --no-restore
      - --no-build
      - --no-launch-profile
      - -c
      - ${Configuration:-Debug}
      iterate:
        processesToKill:
        - dotnet
        - vsdbg
        buildCommands:
        - - dotnet
          - build
          - --no-restore
          - -c
          - ${Configuration:-Debug}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ocelot:
  configPath: /app/configuration

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: eshop_backend_route
            virtual_hosts:
            - name: eshop_backend
              domains:
              - "*"
              routes:
              - name: "c-short"
                match:
                  prefix: "/c/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/catalog-api/"
                  cluster: catalog
              - name: "c-long"
                match:
                  prefix: "/catalog-api/"
                route:
                  auto_host_rewrite: true
                  cluster: catalog
              - name: "o-short"
                match:
                  prefix: "/o/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/ordering-api/"
                  cluster: ordering
              - name: "o-long"
                match:
                  prefix: "/ordering-api/"
                route:
                  auto_host_rewrite: true
                  cluster: ordering
              - name: "h-long"
                match:
                  prefix: "/hub/notificationhub"
                route:
                  auto_host_rewrite: true
                  cluster: signalr-hub
                  timeout: 300s
              - name: "b-short"
                match:
                  prefix: "/b/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/basket-api/"
                  cluster: basket
              - name: "b-long"
                match:
                  prefix: "/basket-api/"
                route:
                  auto_host_rewrite: true
                  cluster: basket
              - name: "agg"
                match:
                  prefix: "/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/"
                  cluster: shoppingagg
          http_filters:
          - name: envoy.router
          access_log:
          - name: envoy.file_access_log
            filter:
              not_health_check_filter: {}
            config:
              json_format:
                time: "%START_TIME%"
                protocol: "%PROTOCOL%"
                duration: "%DURATION%"
                request_method: "%REQ(:METHOD)%"
                request_host: "%REQ(HOST)%"
                path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                response_flags: "%RESPONSE_FLAGS%"
                route_name: "%ROUTE_NAME%"
                upstream_host: "%UPSTREAM_HOST%"
                upstream_cluster: "%UPSTREAM_CLUSTER%"
                upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"
              path: "/tmp/access.log"
  clusters:
  - name: shoppingagg
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: webshoppingagg
        port_value: 80
  - name: catalog
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: catalog-api
        port_value: 80
  - name: basket
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: basket-api
        port_value: 80
  - name: ordering
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: ordering-api
        port_value: 80
  - name: signalr-hub
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: ordering-signalrhub
        port_value: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: eshop_backend_route
            virtual_hosts:
            - name: eshop_backend
              domains:
              - "*"
              routes:
              - name: "m-short"
                match:
                  prefix: "/m/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/marketing-api/"
                  cluster: marketing
              - name: "m-long"
                match:
                  prefix: "/marketing-api/"
                route:
                  auto_host_rewrite: true
                  cluster: marketing
              - name: "l-short"
                match:
                  prefix: "/l/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/locations-api/"
                  cluster: locations
              - name: "l-long"
                match:
                  prefix: "/locations-api/"
                route:
                  auto_host_rewrite: true
                  cluster: locations
          http_filters:
          - name: envoy.router      
          access_log:
          - name: envoy.file_access_log
            filter:
              not_health_check_filter: {}          
            config:
              json_format:
                time: "%START_TIME%"
                protocol: "%PROTOCOL%"
                duration: "%DURATION%"
                request_method: "%REQ(:METHOD)%"  
                request_host: "%REQ(HOST)%"  
                path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%" 
                response_flags: "%RESPONSE_FLAGS%"
                route_name: "%ROUTE_NAME%"
                upstream_host: "%UPSTREAM_HOST%"
                upstream_cluster: "%UPSTREAM_CLUSTER%"
                upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"     
              path: "/tmp/access.log"
  clusters:
  - name: marketing
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: marketing-api
        port_value: 80
  - name: locations
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: locations-api
        port_value: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: eshop_backend_route
            virtual_hosts:
            - name: eshop_backend
              domains:
              - "*"
              routes:
              - name: "c-short"
                match:
                  prefix: "/c/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/catalog-api/"
                  cluster: catalog
              - name: "c-long"
                match:
                  prefix: "/catalog-api/"
                route:
                  auto_host_rewrite: true
                  cluster: catalog
              - name: "o-short"
                match:
                  prefix: "/o/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/ordering-api/"
                  cluster: ordering
              - name: "o-long"
                match:
                  prefix: "/ordering-api/"
                route:
                  auto_host_rewrite: true
                  cluster: ordering
              - name: "h-long"
                match:
                  prefix: "/hub/notificationhub"
                route:
                  auto_host_rewrite: true
                  cluster: signalr-hub
                  timeout: 300s
                  upgrade_configs:
                    upgrade_type: "websocket"
                    enabled: true
              - name: "b-short"
                match:
                  prefix: "/b/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/basket-api/"
                  cluster: basket
              - name: "b-long"
                match:
                  prefix: "/basket-api/"
                route:
                  auto_host_rewrite: true
                  cluster: basket
              - name: "agg"
                match:
                  prefix: "/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/"
                  cluster: shoppingagg
          http_filters:
          - name: envoy.router
          access_log:
          - name: envoy.file_access_log
            filter:
              not_health_check_filter: {}
            config:
              json_format:
                time: "%START_TIME%"
                protocol: "%PROTOCOL%"
                duration: "%DURATION%"
                request_method: "%REQ(:METHOD)%"
                request_host: "%REQ(HOST)%"
                path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                response_flags: "%RESPONSE_FLAGS%"
                route_name: "%ROUTE_NAME%"
                upstream_host: "%UPSTREAM_HOST%"
                upstream_cluster: "%UPSTREAM_CLUSTER%"
                upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"
              path: "/tmp/access.log"
  clusters:
  - name: shoppingagg
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: webshoppingagg
        port_value: 80
  - name: catalog
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: catalog-api
        port_value: 80
  - name: basket
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: basket-api
        port_value: 80
  - name: ordering
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: ordering-api
        port_value: 80
  - name: signalr-hub
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: ordering-signalrhub
        port_value: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: eshop_backend_route
            virtual_hosts:
            - name: eshop_backend
              domains:
              - "*"
              routes:
              - name: "m-short"
                match:
                  prefix: "/m/"
                route:
                  auto_host_rewrite: true
                  prefix_rewrite: "/marketing-api/"
                  cluster: marketing
              - name: "m-long"
                match:
                  prefix: "/marketing-api/"
                route:
                  auto_host_rewrite: true
                  cluster: marketing
          http_filters:
          - name: envoy.router  
          access_log:
          - name: envoy.file_access_log
            filter:
              not_health_check_filter: {}          
            config:
              json_format:
                time: "%START_TIME%"
                protocol: "%PROTOCOL%"
                duration: "%DURATION%"
                request_method: "%REQ(:METHOD)%"  
                request_host: "%REQ(HOST)%"  
                path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%" 
                response_flags: "%RESPONSE_FLAGS%"
                route_name: "%ROUTE_NAME%"
                upstream_host: "%UPSTREAM_HOST%"
                upstream_cluster: "%UPSTREAM_CLUSTER%"
                upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"    
              path: "/tmp/access.log"                 
  clusters:
  - name: marketing
    connect_timeout: 0.25s
    type: logical_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: marketing-api
        port_value: 80
  - name: locations
    connect_timeout: 0.25s
    type: logical_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: locations-api
        port_value: 80


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: helm-release
apiVersion: 1.1
build:
  context: ..\..\..\..\
  dockerfile: ..\..\..\ApiGateways\ApiGw-Base\Dockerfile
install:
  chart: ../../../../k8s/helm/apigwms
  set:
    replicaCount: 1
    image:
      tag: $(tag)
      pullPolicy: Never
    ingress:
      annotations:
        kubernetes.io/ingress.class: traefik-azds
      hosts:
      # This expands to [space.s.]webmvc.<guid>.<region>.aksapp.io
      - $(spacePrefix)eshop$(hostSuffix)
    inf:
      k8s:
        dns: $(spacePrefix)eshop$(hostSuffix)      
  values:
  - values.dev.yaml?
  - secrets.dev.yaml?
  - inf.yaml
  - app.yaml
configurations:
  develop:
    build:
      useGitIgnore: true
      dockerfile: ..\..\..\ApiGateways\ApiGw-Base\Dockerfile.develop
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION:-Debug}
    container:
      sync:
      - '**/Pages/**'
      - '**/Views/**'
      - '**/wwwroot/**'
      - '!**/*.{sln,csproj}'
      command: [dotnet, run, --no-restore, --no-build, --no-launch-profile, -c, "${BUILD_CONFIGURATION:-Debug}"]
      iterate:
        processesToKill: [dotnet, vsdbg]
        buildCommands:
        - [dotnet, build, --no-restore, -c, "${BUILD_CONFIGURATION:-Debug}"]


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ocelot:
  configPath: /src/src/ApiGateways/ApiGw-Base/configuration

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: helm-release
apiVersion: 1.1
build:
  context: ..\..\..\..
  dockerfile: Dockerfile
install:
  chart: ../../../../k8s/helm/mobileshoppingagg
  set:
    image:
      tag: $(tag)
      pullPolicy: Never
    ingress:
      annotations:
        kubernetes.io/ingress.class: traefik-azds
      hosts:
      # This expands to [space.s.]apigwms.<guid>.<region>.aksapp.io
      - $(spacePrefix)eshop$(hostSuffix)
    inf:
      k8s:
        dns: $(spacePrefix)eshop$(hostSuffix)      
  values:
  - values.dev.yaml?
  - secrets.dev.yaml?
  - app.yaml
  - inf.yaml
configurations:
  develop:
    build:
      useGitIgnore: true
      dockerfile: Dockerfile.develop
    container:
      syncTarget: /src
      sync:
      - '**/Pages/**'
      - '**/Views/**'
      - '**/wwwroot/**'
      - '!**/*.{sln,csproj}'
      command:
      - dotnet
      - run
      - --no-restore
      - --no-build
      - --no-launch-profile
      - -c
      - ${Configuration:-Debug}
      iterate:
        processesToKill:
        - dotnet
        - vsdbg
        buildCommands:
        - - dotnet
          - build
          - --no-restore
          - -c
          - ${Configuration:-Debug}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ingress:
  enabled: true
  tls: []

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: helm-release
apiVersion: 1.1
build:
  context: ..\..\..\..
  dockerfile: Dockerfile
install:
  chart: ../../../../k8s/helm/basket-api
  set:
    replicaCount: 1
    image:
      tag: $(tag)
      pullPolicy: Never
    ingress:
      annotations:
        kubernetes.io/ingress.class: traefik-azds
      hosts:
      - $(spacePrefix)eshop$(hostSuffix)
    inf:
      k8s:
        dns: $(spacePrefix)eshop$(hostSuffix)
  values:
  - values.dev.yaml?
  - secrets.dev.yaml?
  - inf.yaml
  - app.yaml
configurations:
  develop:
    build:
      useGitIgnore: true
      dockerfile: Dockerfile.develop
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION:-Debug}
    container:
      sync:
      - '**/Pages/**'
      - '**/Views/**'
      - '**/wwwroot/**'
      - '!**/*.{sln,csproj}'
      command:
      - dotnet
      - run
      - --no-restore
      - --no-build
      - --no-launch-profile
      - -c
      - ${BUILD_CONFIGURATION:-Debug}
      iterate:
        processesToKill:
        - dotnet
        - vsdbg
        buildCommands:
        - - dotnet
          - build
          - --no-restore
          - -c
          - ${BUILD_CONFIGURATION:-Debug}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ingress:
  enabled: true
  tls: []

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: helm-release
apiVersion: 1.1
build:
  context: ..\..\..\..
  dockerfile: Dockerfile
install:
  chart: ../../../../k8s/helm/identity-api
  set:
    replicaCount: 1
    image:
      tag: $(tag)
      pullPolicy: Never
    ingress:
      annotations:
        kubernetes.io/ingress.class: traefik-azds
      hosts:
      - $(spacePrefix)eshop$(hostSuffix)
    inf:
      k8s:
        dns: $(spacePrefix)eshop$(hostSuffix)      
  values:
  - values.dev.yaml?
  - secrets.dev.yaml?
  - inf.yaml
  - app.yaml
configurations:
  develop:
    build:
      useGitIgnore: true
      dockerfile: Dockerfile.develop
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION:-Debug}
    container:
      sync:
      - '**/Pages/**'
      - '**/Views/**'
      - '**/wwwroot/**'
      - '!**/*.{sln,csproj}'
      command:
      - dotnet
      - run
      - --no-restore
      - --no-build
      - --no-launch-profile
      - -c
      - ${BUILD_CONFIGURATION:-Debug}
      iterate:
        processesToKill:
        - dotnet
        - vsdbg
        buildCommands:
        - - dotnet
          - build
          - --no-restore
          - -c
          - ${BUILD_CONFIGURATION:-Debug}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

﻿enableDevspaces: "true"


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: helm-release
apiVersion: 1.1
build:
  context: ..\..\..\..
  dockerfile: Dockerfile
install:
  chart: ../../../../k8s/helm/locations-api
  set:
    replicaCount: 1
    image:
      tag: $(tag)
      pullPolicy: Never
    ingress:
      annotations:
        kubernetes.io/ingress.class: traefik-azds
      hosts:
      - $(spacePrefix)eshop$(hostSuffix)
    inf:
      k8s:
        dns: $(spacePrefix)eshop$(hostSuffix)      
  values:
  - values.dev.yaml?
  - secrets.dev.yaml?
  - inf.yaml
  - app.yaml
configurations:
  develop:
    build:
      useGitIgnore: true
      dockerfile: Dockerfile.develop
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION:-Debug}
    container:
      sync:
      - '**/Pages/**'
      - '**/Views/**'
      - '**/wwwroot/**'
      - '!**/*.{sln,csproj}'
      command:
      - dotnet
      - run
      - --no-restore
      - --no-build
      - --no-launch-profile
      - -c
      - ${BUILD_CONFIGURATION:-Debug}
      iterate:
        processesToKill:
        - dotnet
        - vsdbg
        buildCommands:
        - - dotnet
          - build
          - --no-restore
          - -c
          - ${BUILD_CONFIGURATION:-Debug}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ingress:
  enabled: true
  tls: []

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: helm-release
apiVersion: 1.1
build:
  context: ..\..\..\..
  dockerfile: Dockerfile
install:
  chart: ../../../../k8s/helm/payment-api
  set:
    replicaCount: 1
    image:
      tag: $(tag)
      pullPolicy: Never
    ingress:
      annotations:
        kubernetes.io/ingress.class: traefik-azds
      hosts:
      - $(spacePrefix)eshop$(hostSuffix)
    inf:
      k8s:
        dns: $(spacePrefix)eshop$(hostSuffix)            
  values:
  - values.dev.yaml?
  - secrets.dev.yaml?
  - inf.yaml
  - app.yaml
configurations:
  develop:
    build:
      useGitIgnore: true
      dockerfile: Dockerfile.develop
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION:-Debug}
    container:
      sync:
      - '**/Pages/**'
      - '**/Views/**'
      - '**/wwwroot/**'
      - '!**/*.{sln,csproj}'
      command:
      - dotnet
      - run
      - --no-restore
      - --no-build
      - --no-launch-profile
      - -c
      - ${BUILD_CONFIGURATION:-Debug}
      iterate:
        processesToKill:
        - dotnet
        - vsdbg
        buildCommands:
        - - dotnet
          - build
          - --no-restore
          - -c
          - ${BUILD_CONFIGURATION:-Debug}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: helm-release
apiVersion: 1.1
build:
  context: ..\..\..\..
  dockerfile: Dockerfile
install:
  chart: ../../../../k8s/helm/catalog-api
  set:
    image:
      tag: $(tag)
      pullPolicy: Never
    ingress:
      annotations:
        kubernetes.io/ingress.class: traefik-azds
      hosts:
      - $(spacePrefix)eshop$(hostSuffix)
    inf:
      k8s:
        dns: $(spacePrefix)eshop$(hostSuffix)      
  values:
  - values.dev.yaml?
  - secrets.dev.yaml?
  - inf.yaml
  - app.yaml
configurations:
  develop:
    build:
      useGitIgnore: true
      dockerfile: Dockerfile.develop
    container:
      syncTarget: /src
      sync:
      - '**/Pages/**'
      - '**/Views/**'
      - '**/wwwroot/**'
      - '!**/*.{sln,csproj}'
      command:
      - dotnet
      - run
      - --no-restore
      - --no-build
      - --no-launch-profile
      - -c
      - ${Configuration:-Debug}
      iterate:
        processesToKill:
        - dotnet
        - vsdbg
        buildCommands:
        - - dotnet
          - build
          - --no-restore
          - -c
          - ${Configuration:-Debug}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ingress:
  enabled: true
  tls: []

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: helm-release
apiVersion: 1.1
build:
  context: ..\..\..\..
  dockerfile: Dockerfile
install:
  chart: ../../../../k8s/helm/ordering-api
  set:
    replicaCount: 1
    image:
      tag: $(tag)
      pullPolicy: Never
    ingress:
      annotations:
        kubernetes.io/ingress.class: traefik-azds
      hosts:
      - $(spacePrefix)eshop$(hostSuffix)
    inf:
      k8s:
        dns: $(spacePrefix)eshop$(hostSuffix)            
  values:
  - values.dev.yaml?
  - secrets.dev.yaml?
  - inf.yaml
  - app.yaml
configurations:
  develop:
    build:
      useGitIgnore: true
      dockerfile: Dockerfile.develop
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION:-Debug}
    container:
      sync:
      - '**/Pages/**'
      - '**/Views/**'
      - '**/wwwroot/**'
      - '!**/*.{sln,csproj}'
      command:
      - dotnet
      - run
      - --no-restore
      - --no-build
      - --no-launch-profile
      - -c
      - ${BUILD_CONFIGURATION:-Debug}
      iterate:
        processesToKill:
        - dotnet
        - vsdbg
        buildCommands:
        - - dotnet
          - build
          - --no-restore
          - -c
          - ${BUILD_CONFIGURATION:-Debug}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: helm-release
apiVersion: 1.1
build:
  context: ..\..\..\..
  dockerfile: Dockerfile
install:
  chart: ../../../../k8s/helm/ordering-signalrhub
  set:
    replicaCount: 1
    image:
      tag: $(tag)
      pullPolicy: Never
    ingress:
      annotations:
        kubernetes.io/ingress.class: traefik-azds
      hosts:
      - $(spacePrefix)eshop$(hostSuffix)
    inf:
      k8s:
        dns: $(spacePrefix)eshop$(hostSuffix)            
  values:
  - values.dev.yaml?
  - secrets.dev.yaml?
  - inf.yaml
  - app.yaml
configurations:
  develop:
    build:
      useGitIgnore: true
      dockerfile: Dockerfile.develop
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION:-Debug}
    container:
      sync:
      - '**/Pages/**'
      - '**/Views/**'
      - '**/wwwroot/**'
      - '!**/*.{sln,csproj}'
      command:
      - dotnet
      - run
      - --no-restore
      - --no-build
      - --no-launch-profile
      - -c
      - ${BUILD_CONFIGURATION:-Debug}
      iterate:
        processesToKill:
        - dotnet
        - vsdbg
        buildCommands:
        - - dotnet
          - build
          - --no-restore
          - -c
          - ${BUILD_CONFIGURATION:-Debug}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: helm-release
apiVersion: 1.1
build:
  context: ..\..\..\..
  dockerfile: Dockerfile
install:
  chart: ../../../../k8s/helm/marketing-api
  set:
    replicaCount: 1
    image:
      tag: $(tag)
      pullPolicy: Never
    ingress:
      annotations:
        kubernetes.io/ingress.class: traefik-azds
      hosts:
      - $(spacePrefix)eshop$(hostSuffix)
    inf:
      k8s:
        dns: $(spacePrefix)eshop$(hostSuffix)      
  values:
  - values.dev.yaml?
  - secrets.dev.yaml?
  - inf.yaml
  - app.yaml
configurations:
  develop:
    build:
      useGitIgnore: true
      dockerfile: Dockerfile.develop
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION:-Debug}
    container:
      sync:
      - '**/Pages/**'
      - '**/Views/**'
      - '**/wwwroot/**'
      - '!**/*.{sln,csproj}'
      command:
      - dotnet
      - run
      - --no-restore
      - --no-build
      - --no-launch-profile
      - -c
      - ${BUILD_CONFIGURATION:-Debug}
      iterate:
        processesToKill:
        - dotnet
        - vsdbg
        buildCommands:
        - - dotnet
          - build
          - --no-restore
          - -c
          - ${BUILD_CONFIGURATION:-Debug}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

ingress:
  enabled: true
  tls: []

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

kind: helm-release
apiVersion: 1.1
build:
  context: ..\..\..\..
  dockerfile: Dockerfile
install:
  chart: ../../../../k8s/helm/webhooks-api
  set:
    image:
      tag: $(tag)
      pullPolicy: Never
    ingress:
      annotations:
        kubernetes.io/ingress.class: traefik-azds
      hosts:
      - $(spacePrefix)eshop$(hostSuffix)
    inf:
      k8s:
        dns: $(spacePrefix)eshop$(hostSuffix)      
  values:
  - values.dev.yaml?
  - secrets.dev.yaml?
  - inf.yaml
  - app.yaml
configurations:
  develop:
    build:
      useGitIgnore: true
      dockerfile: Dockerfile.develop
    container:
      syncTarget: /src
      sync:
      - '**/Pages/**'
      - '**/Views/**'
      - '**/wwwroot/**'
      - '!**/*.{sln,csproj}'
      command:
      - dotnet
      - run
      - --no-restore
      - --no-build
      - --no-launch-profile
      - -c
      - ${Configuration:-Debug}
      iterate:
        processesToKill:
        - dotnet
        - vsdbg
        buildCommands:
        - - dotnet
          - build
          - --no-restore
          - -c
          - ${Configuration:-Debug}


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: restricted
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: unprivileged-rbac
rules:
- apiGroups: [""]
  resources: ["pods", "deployments"]
  verbs: ["get", "watch", "create", "update", "list"]


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: unprivileged-psp
rules:
- apiGroups:
  - policy
  resources:
  - podsecuritypolicies
  resourceNames:
  - restricted
  verbs:
  - use


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ServiceAccount
metadata:
  name: unprivileged-user


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: unprivileged-psp-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: unprivileged-psp
subjects:
- kind: ServiceAccount
  name: unprivileged-user
  namespace: default


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: unprivileged-rbac-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: unprivileged-rbac
subjects:
- kind: ServiceAccount
  name: unprivileged-user
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-psp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: unprivileged-psp
subjects:
- kind: ServiceAccount
  name: default


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Pod
metadata:
  name: root-container
spec:
  hostPID: true
  containers:
  - name: alpine
    image: alpine
    command: ["tail"]
    args: ["-f", "/dev/null"]
    securityContext:
      privileged: true


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ssrf-server
spec:
  selector:
    matchLabels:
      app: ssrf-server
  replicas: 3
  template:
    metadata:
      labels:
        app: ssrf-server
    spec:
      containers:
      - name: ssrf-server
        image: suezawa/vulnerable-ssrf-server
        env:
        - name: DB_Password
          valueFrom:
            secretKeyRef:
              name: dummy-secret
              key: dummy-secret
        ports:
        - containerPort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-psp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gce:podsecuritypolicy:privileged
subjects:
- kind: ServiceAccount
  name: default


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Secret
metadata:
  name: dummy-secret
type: Opaque
data:
  dummy-secret: VGhpcyBpcyBkdW1teQo=


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: skaffold/v1
kind: Config
metadata:
  name: tenpo-challenge
build:
  artifacts:
    - image: cagodoy/tenpo-gateway-api
      context: src/gateway-api
    - image: cagodoy/tenpo-auth-api
      context: src/auth-api
    - image: cagodoy/tenpo-users-api
      context: src/users-api
    - image: cagodoy/tenpo-restaurants-api
      context: src/restaurants-api
    - image: cagodoy/tenpo-history-api
      context: src/history-api
deploy:
  kubectl:
    manifests:
      - infra/services/gateway-api.yaml
      - infra/services/auth-api.yaml
      - infra/services/auth-postgres.yaml
      - infra/services/restaurants-api.yaml
      - infra/services/restaurants-postgres.yaml
      - infra/services/users-api.yaml
      - infra/services/users-postgres.yaml
      - infra/services/history-api.yaml
      - infra/services/history-postgres.yaml
portForward:
  - resourceType: deployment
    resourceName: gateway-api
    port: 5000
    localPort: 5000
  - resourceType: deployment
    resourceName: auth-api
    port: 5010
    localPort: 5010
  - resourceType: deployment
    resourceName: users-api
    port: 5020
    localPort: 5020
  - resourceType: deployment
    resourceName: restaurants-api
    port: 5030
    localPort: 5030
  - resourceType: deployment
    resourceName: history-api
    port: 5040
    localPort: 5040


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: <EMAIL>
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
      - http01:
          ingress:
            class: nginx


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: tenpo-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;
      grpc_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;
spec:
  tls:
    - hosts:
        - tenpo-challenge.centralus.cloudapp.azure.com
      secretName: tls-secret
  rules:
    - host: tenpo-challenge.centralus.cloudapp.azure.com
      http:
        paths:
          - backend:
              serviceName: gateway-api
              servicePort: 5000
            path: /


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: web-ingress-auth
  namespace: linkerd
data:
  auth: <AUTH>
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: web-ingress
  namespace: linkerd
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:8084;
      proxy_set_header Origin "";
      proxy_hide_header l5d-remote-ip;
      proxy_hide_header l5d-server-id;
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: web-ingress-auth
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
spec:
  tls:
    - hosts:
        - linkerd.tenpo-challenge.centralus.cloudapp.azure.com
      secretName: tls-secret
spec:
  rules:
  - host: linkerd.tenpo-challenge.centralus.cloudapp.azure.com
    http:
      paths:
      - backend:
          serviceName: linkerd-web
          servicePort: 8084

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: tls-secret
spec:
  secretName: tls-secret
  dnsNames:
    - tenpo-challenge.centralus.cloudapp.azure.com
  acme:
    config:
      - http01:
          ingressClass: nginx
        domains:
          - tenpo-challenge.centralus.cloudapp.azure.com
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: history-api
  labels:
    app: history-api
    service: history-api
spec:
  ports:
    - port: 5040
      name: grpc
  selector:
    app: history-api
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tenpo-history-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: history-api
  labels:
    app: history-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: history-api
  template:
    metadata:
      labels:
        app: history-api
    spec:
      nodeSelector:
        service: general
      serviceAccountName: tenpo-history-api
      containers:
        - name: history-api
          image: cagodoy/tenpo-history-api:0.0.4
          ports:
            - containerPort: 5040
          env:
            - name: POSTGRES_DSN
              value: postgres://postgres:postgres@history-postgres:5432/postgres?sslmode=disable
            - name: PORT
              value: '5040'
            - name: NATS_HOST
              value: nats
            - name: NATS_PORT
              value: '4222'
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 200m
              memory: 512Mi
      volumes:
        - name: history-postgresdb
          persistentVolumeClaim:
            claimName: history-postgres-pv-claim


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: auth-api
  labels:
    app: auth-api
    service: auth-api
spec:
  ports:
    - port: 5010
      name: grpc
  selector:
    app: auth-api
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tenpo-auth-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-api
  labels:
    app: auth-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-api
  template:
    metadata:
      labels:
        app: auth-api
    spec:
      nodeSelector:
        service: general
      serviceAccountName: tenpo-auth-api
      containers:
        - name: auth-api
          image: cagodoy/tenpo-auth-api:0.0.11
          ports:
            - containerPort: 5010
          env:
            - name: POSTGRES_DSN
              value: postgres://postgres:postgres@auth-postgres:5432/postgres?sslmode=disable
            - name: PORT
              value: '5010'
            - name: USERS_HOST
              value: users-api
            - name: USERS_PORT
              value: '5020'
            - name: JWT_SECRET
              value: <JWT_SECRET>
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 200m
              memory: 512Mi
      volumes:
        - name: auth-postgresdb
          persistentVolumeClaim:
            claimName: auth-postgres-pv-claim


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: users-api
  labels:
    app: users-api
    service: users-api
spec:
  ports:
    - port: 5020
      name: grpc
  selector:
    app: users-api
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tenpo-users-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: users-api
  labels:
    app: users-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: users-api
  template:
    metadata:
      labels:
        app: users-api
    spec:
      nodeSelector:
        service: general
      serviceAccountName: tenpo-users-api
      containers:
        - name: users-api
          image: cagodoy/tenpo-users-api:0.0.5
          ports:
            - containerPort: 5020
          env:
            - name: POSTGRES_DSN
              value: postgres://postgres:postgres@users-postgres:5432/postgres?sslmode=disable
            - name: PORT
              value: '5020'
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 200m
              memory: 512Mi
      volumes:
        - name: users-postgresdb
          persistentVolumeClaim:
            claimName: users-postgres-pv-claim


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  name: history-postgres-config
  labels:
    app: history-postgres
data:
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: history-postgres-pv-volume
  labels:
    type: local
    app: history-postgres
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: '/mnt/data/history'
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: history-postgres-pv-claim
  labels:
    app: history-postgres
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: history-postgres
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: history-postgres
    spec:
      nodeSelector:
        service: databases
      containers:
        - name: history-postgres
          image: postgres:10.4
          imagePullPolicy: 'IfNotPresent'
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: history-postgres-config
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: history-postgresdb
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 200m
              memory: 512Mi
      volumes:
        - name: history-postgresdb
          persistentVolumeClaim:
            claimName: history-postgres-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: history-postgres
  labels:
    app: history-postgres
spec:
  type: ClusterIP
  ports:
    - port: 5432
  selector:
    app: history-postgres


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nats
  labels:
    app: nats
spec:
  selector:
    matchLabels:
      app: nats
  replicas: 1
  template:
    metadata:
      labels:
        app: nats
    spec:
      containers:
        - name: nats
          image: nats:latest
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
            limits:
              cpu: 200m
              memory: 300Mi
          ports:
            - containerPort: 4222
---
apiVersion: v1
kind: Service
metadata:
  name: nats
  labels:
    app: nats
spec:
  ports:
    - port: 4222
      targetPort: 4222
  selector:
    app: nats


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  name: auth-postgres-config
  labels:
    app: auth-postgres
data:
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: auth-postgres-pv-volume
  labels:
    type: local
    app: auth-postgres
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: '/mnt/data/auth'
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: auth-postgres-pv-claim
  labels:
    app: auth-postgres
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: auth-postgres
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: auth-postgres
    spec:
      nodeSelector:
        service: databases
      containers:
        - name: auth-postgres
          image: postgres:10.4
          imagePullPolicy: 'IfNotPresent'
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: auth-postgres-config
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: auth-postgresdb
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 200m
              memory: 512Mi
      volumes:
        - name: auth-postgresdb
          persistentVolumeClaim:
            claimName: auth-postgres-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: auth-postgres
  labels:
    app: auth-postgres
spec:
  type: ClusterIP
  ports:
    - port: 5432
  selector:
    app: auth-postgres


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: gateway-api
  labels:
    app: gateway-api
    service: gateway-api
spec:
  ports:
    - port: 5000
      name: http
  selector:
    app: gateway-api
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tenpo-gateway-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-api
  labels:
    app: gateway-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway-api
  template:
    metadata:
      labels:
        app: gateway-api
    spec:
      nodeSelector:
        service: general
      serviceAccountName: tenpo-gateway-api
      containers:
        - name: gateway-api
          image: cagodoy/tenpo-gateway-api:0.0.4
          ports:
            - containerPort: 5000
          env:
            - name: PORT
              value: '5000'
            - name: AUTH_HOST
              value: auth-api
            - name: AUTH_PORT
              value: '5010'
            - name: RESTAURANTS_HOST
              value: restaurants-api
            - name: RESTAURANTS_PORT
              value: '5030'
            - name: HISTORY_HOST
              value: history-api
            - name: HISTORY_PORT
              value: '5040'
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 200m
              memory: 512Mi


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: Service
metadata:
  name: restaurants-api
  labels:
    app: restaurants-api
    service: restaurants-api
spec:
  ports:
    - port: 5030
      name: grpc
  selector:
    app: restaurants-api
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tenpo-restaurants-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: restaurants-api
  labels:
    app: restaurants-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: restaurants-api
  template:
    metadata:
      labels:
        app: restaurants-api
    spec:
      nodeSelector:
        service: general
      serviceAccountName: tenpo-restaurants-api
      containers:
        - name: restaurants-api
          image: cagodoy/tenpo-restaurants-api:0.0.7
          ports:
            - containerPort: 5030
          env:
            - name: API_KEY
              value: <API_KEY>
            - name: PORT
              value: '5030'
            - name: NATS_HOST
              value: nats
            - name: NATS_PORT
              value: '4222'
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 200m
              memory: 512Mi


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  name: users-postgres-config
  labels:
    app: users-postgres
data:
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: users-postgres-pv-volume
  labels:
    type: local
    app: users-postgres
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: '/mnt/data/users'
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: users-postgres-pv-claim
  labels:
    app: users-postgres
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: users-postgres
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: users-postgres
    spec:
      nodeSelector:
        service: databases
      containers:
        - name: users-postgres
          image: postgres:10.4
          imagePullPolicy: 'IfNotPresent'
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: users-postgres-config
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: users-postgresdb
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 200m
              memory: 512Mi
      volumes:
        - name: users-postgresdb
          persistentVolumeClaim:
            claimName: users-postgres-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: users-postgres
  labels:
    app: users-postgres
spec:
  type: ClusterIP
  ports:
    - port: 5432
  selector:
    app: users-postgres


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            make test
      # run lints     

      - run:
          name: run lint
          command: |
            . venv/bin/activate
            wget https://github.com/hadolint/hadolint/releases/download/v1.17.5/hadolint-Linux-x86_64
            chmod +x hadolint-Linux-x86_64
            sudo mv hadolint-Linux-x86_64 /usr/local/bin/hadolint
            pip install pylint
            make lint

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: skaffold/v2beta5
kind: Config
metadata:
  name: simple-microservices
build:
  artifacts:
    - image: piomin/employee-service
      jib:
        args:
          - -Pjib
        project: employee-service
    - image: piomin/department-service
      jib:
        args:
          - -Pjib
        project: department-service
    - image: piomin/organization-service
      jib:
        args:
          - -Pjib
        project: organization-service
  tagPolicy:
    gitCommit: {}

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: skaffold/v2beta5
kind: Config
metadata:
  name: employee-service
build:
  artifacts:
    - image: piomin/employee-service
      jib:
        args:
          - -Pjib
  tagPolicy:
    gitCommit: {}

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: employee-deployment-v1
spec:
  selector:
    matchLabels:
      app: employee
      version: v1
  template:
    metadata:
      labels:
        app: employee
        version: v1
    spec:
      containers:
      - name: employee
        image: piomin/employee-service
        ports:
        - containerPort: 8080
        volumeMounts:
          - mountPath: /etc/podinfo
            name: podinfo
      volumes:
        - name: podinfo
          downwardAPI:
            items:
              - path: "labels"
                fieldRef:
                  fieldPath: metadata.labels
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: employee-deployment-v2
spec:
  selector:
    matchLabels:
      app: employee
      version: v2
  template:
    metadata:
      labels:
        app: employee
        version: v2
    spec:
      containers:
        - name: employee
          image: piomin/employee-service
          ports:
            - containerPort: 8080
          volumeMounts:
            - mountPath: /etc/podinfo
              name: podinfo
      volumes:
        - name: podinfo
          downwardAPI:
            items:
              - path: "labels"
                fieldRef:
                  fieldPath: metadata.labels
---
apiVersion: v1
kind: Service
metadata:
  name: employee-service
spec:
  type: ClusterIP
  selector:
    app: employee
  ports:
  - port: 8080
    targetPort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: employee-service-destination
spec:
  host: employee-service.default.svc.cluster.local
  subsets:
    - name: v1
      labels:
        version: v1
    - name: v2
      labels:
        version: v2
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: employee-service-route
spec:
  hosts:
    - employee-service.default.svc.cluster.local
  http:
    - match:
        - headers:
            X-Version:
              exact: v1
      route:
        - destination:
            host: employee-service.default.svc.cluster.local
            subset: v1
    - match:
        - headers:
            X-Version:
              exact: v2
      route:
        - destination:
            host: employee-service.default.svc.cluster.local
            subset: v2
    - route:
        - destination:
            host: employee-service.default.svc.cluster.local
            subset: v1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: employee-service
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: password
    hikari:
      connection-timeout: 2000
      initialization-fail-timeout: 0
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
management:
  endpoints.web.exposure.include: '*'
  endpoint:
    health:
      show-details: always

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: skaffold/v2beta5
kind: Config
metadata:
  name: department-service
build:
  artifacts:
    - image: piomin/department-service
      jib:
        args:
          - -Pjib
  tagPolicy:
    gitCommit: {}

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: department-deployment-v1
spec:
  selector:
    matchLabels:
      app: department
      version: v1
  template:
    metadata:
      labels:
        app: department
        version: v1
    spec:
      containers:
      - name: department
        image: piomin/department-service
        ports:
        - containerPort: 8080
        volumeMounts:
          - mountPath: /etc/podinfo
            name: podinfo
      volumes:
        - name: podinfo
          downwardAPI:
            items:
              - path: "labels"
                fieldRef:
                  fieldPath: metadata.labels
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: department-deployment-v2
spec:
  selector:
    matchLabels:
      app: department
      version: v2
  template:
    metadata:
      labels:
        app: department
        version: v2
    spec:
      containers:
        - name: department
          image: piomin/department-service
          ports:
            - containerPort: 8080
          volumeMounts:
            - mountPath: /etc/podinfo
              name: podinfo
      volumes:
        - name: podinfo
          downwardAPI:
            items:
              - path: "labels"
                fieldRef:
                  fieldPath: metadata.labels
---
apiVersion: v1
kind: Service
metadata:
  name: department-service
spec:
  type: ClusterIP
  selector:
    app: department
  ports:
  - port: 8080
    targetPort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: department-service-destination
spec:
  host: department-service.default.svc.cluster.local
  subsets:
    - name: v1
      labels:
        version: v1
    - name: v2
      labels:
        version: v2
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: department-service-route
spec:
  hosts:
    - department-service.default.svc.cluster.local
  http:
    - match:
        - headers:
            X-Version:
              exact: v1
      route:
        - destination:
            host: department-service.default.svc.cluster.local
            subset: v1
    - match:
        - headers:
            X-Version:
              exact: v2
      route:
        - destination:
            host: department-service.default.svc.cluster.local
            subset: v2
    - route:
        - destination:
            host: department-service.default.svc.cluster.local
            subset: v1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: department-service
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: password
    hikari:
      connection-timeout: 2000
      initialization-fail-timeout: 0
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
management:
  endpoints.web.exposure.include: '*'
  endpoint:
    health:
      show-details: always

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: microservices-router
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
    - http:
        paths:
          - path: /employee(/|$)(.*)
            backend:
              serviceName: employee-service
              servicePort: 8080
          - path: /department(/|$)(.*)
            backend:
              serviceName: department-service
              servicePort: 8080
          - path: /organization(/|$)(.*)
            backend:
              serviceName: organization-service
              servicePort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: microservices-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "microservices.example.com"
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: employee-service-gateway-route
spec:
  hosts:
    - "microservices.example.com"
  gateways:
    - microservices-gateway
  http:
    - match:
        - headers:
            X-Version:
              exact: v1
          uri:
            prefix: "/employee"
      rewrite:
        uri: " "
      route:
        - destination:
            host: employee-service.default.svc.cluster.local
            subset: v1
    - match:
        - uri:
            prefix: "/employee"
          headers:
            X-Version:
              exact: v2
      rewrite:
        uri: " "
      route:
        - destination:
            host: employee-service.default.svc.cluster.local
            subset: v2
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: department-service-gateway-route
spec:
  hosts:
    - "microservices.example.com"
  gateways:
    - microservices-gateway
  http:
    - match:
        - headers:
            X-Version:
              exact: v1
          uri:
            prefix: "/department"
      rewrite:
        uri: " "
      route:
        - destination:
            host: department-service.default.svc.cluster.local
            subset: v1
    - match:
        - uri:
            prefix: "/department"
          headers:
            X-Version:
              exact: v2
      rewrite:
        uri: " "
      route:
        - destination:
            host: department-service.default.svc.cluster.local
            subset: v2
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: organization-service-gateway-route
spec:
  hosts:
    - "microservices.example.com"
  gateways:
    - microservices-gateway
  http:
    - match:
        - headers:
            X-Version:
              exact: v1
          uri:
            prefix: "/organization"
      rewrite:
        uri: " "
      route:
        - destination:
            host: organization-service.default.svc.cluster.local
            subset: v1
    - match:
        - uri:
            prefix: "/organization"
          headers:
            X-Version:
              exact: v2
      rewrite:
        uri: " "
      route:
        - destination:
            host: organization-service.default.svc.cluster.local
            subset: v2

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: skaffold/v2beta5
kind: Config
metadata:
  name: organization-service
build:
  artifacts:
    - image: piomin/organization-service
      jib:
        args:
          - -Pjib
  tagPolicy:
    gitCommit: {}

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: apps/v1
kind: Deployment
metadata:
  name: organization-deployment-v1
spec:
  selector:
    matchLabels:
      app: organization
      version: v1
  template:
    metadata:
      labels:
        app: organization
        version: v1
    spec:
      containers:
      - name: organization
        image: piomin/organization-service
        ports:
        - containerPort: 8080
        volumeMounts:
          - mountPath: /etc/podinfo
            name: podinfo
      volumes:
        - name: podinfo
          downwardAPI:
            items:
              - path: "labels"
                fieldRef:
                  fieldPath: metadata.labels
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: organization-deployment-v2
spec:
  selector:
    matchLabels:
      app: organization
      version: v2
  template:
    metadata:
      labels:
        app: organization
        version: v2
    spec:
      containers:
        - name: organization
          image: piomin/organization-service
          ports:
            - containerPort: 8080
          volumeMounts:
            - mountPath: /etc/podinfo
              name: podinfo
      volumes:
        - name: podinfo
          downwardAPI:
            items:
              - path: "labels"
                fieldRef:
                  fieldPath: metadata.labels
---
apiVersion: v1
kind: Service
metadata:
  name: organization-service
spec:
  type: ClusterIP
  selector:
    app: organization
  ports:
  - port: 8080
    targetPort: 8080


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: organization-service-destination
spec:
  host: organization-service.default.svc.cluster.local
  subsets:
    - name: v1
      labels:
        version: v1
    - name: v2
      labels:
        version: v2
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: organization-service-route
spec:
  hosts:
    - organization-service.default.svc.cluster.local
  http:
    - match:
        - headers:
            X-Version:
              exact: v1
      route:
        - destination:
            host: organization-service.default.svc.cluster.local
            subset: v1
    - match:
        - headers:
            X-Version:
              exact: v2
      route:
        - destination:
            host: organization-service.default.svc.cluster.local
            subset: v2
    - route:
        - destination:
            host: organization-service.default.svc.cluster.local
            subset: v1

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: organization-service
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: password
    hikari:
      connection-timeout: 2000
      initialization-fail-timeout: 0
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
management:
  endpoints.web.exposure.include: '*'
  endpoint:
    health:
      show-details: always

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: skaffold/v2beta5
kind: Config
metadata:
  name: best-practices-on-kubernetes
build:
  artifacts:
    - image: piomin/best-practices-on-kubernetes
      jib:
        args:
          - -Pjib
  tagPolicy:
    gitCommit: {}

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql
data:
  postgresql-name: test
  postgresql-user: test
---
apiVersion: v1
kind: Secret
metadata:
  name: postgresql
type: Opaque
data:
  postgresql-password: dGVzdDEyMw==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq
data:
  rabbitmq-user: test
---
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq
type: Opaque
data:
  rabbitmq-password: dGVzdDEyMw==
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: best-practices-on-kubernetes-deployment
spec:
  selector:
    matchLabels:
      app: best-practices-on-kubernetes
  template:
    metadata:
      labels:
        app: best-practices-on-kubernetes
    spec:
      containers:
      - name: best-practices-on-kubernetes
        image: piomin/best-practices-on-kubernetes
        ports:
        - containerPort: 8080
        env:
          - name: POSTGRES_DATABASE
            valueFrom:
              configMapKeyRef:
                name: postgresql
                key: postgresql-name
          - name: POSTGRES_USERNAME
            valueFrom:
              configMapKeyRef:
                name: postgresql
                key: postgresql-user
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgresql
                key: postgresql-password
          - name: RABBITMQ_USER
            valueFrom:
              configMapKeyRef:
                name: rabbitmq
                key: rabbitmq-user
          - name: RABBITMQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: rabbitmq
                key: rabbitmq-password
        livenessProbe:
          httpGet:
            port: 8080
            path: /actuator/health/liveness
            scheme: HTTP
          periodSeconds: 3
          initialDelaySeconds: 20
          failureThreshold: 3
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            port: 8080
            path: /actuator/health/readiness
            scheme: HTTP
          periodSeconds: 3
          initialDelaySeconds: 20
          failureThreshold: 3
          timeoutSeconds: 1
---
apiVersion: v1
kind: Service
metadata:
  name: best-practices-on-kubernetes-service
spec:
  type: ClusterIP
  selector:
    app: best-practices-on-kubernetes
  ports:
  - port: 8080
    name: http


========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

spring:
  application:
    name: best-practices
  datasource:
    url: jdbc:postgresql://postgresql:5432/${POSTGRES_DATABASE}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    hikari:
      connection-timeout: 2000
      initialization-fail-timeout: 0
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  rabbitmq:
    host: rabbitmq
    username: ${RABBITMQ_USER}
    password: ${RABBITMQ_PASSWORD}
    port: 5672
    connection-timeout: 2000
management:
  endpoints.web.exposure.include: '*'
  endpoint:
    health:
      show-details: always

========================================
==============Repository Name==============
==============File path==============
==============File Contents==============

databaseChangeLog:
  - changeSet:
      id: 1
      author: piomin
      changes:
        - createTable:
            tableName: person
            columns:
              - column:
                  name: id
                  type: int
                  autoIncrement: true
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: name
                  type: varchar(50)
                  constraints:
                    nullable: false
              - column:
                  name: age
                  type: int
                  constraints:
                    nullable: false
              - column:
                  name: gender
                  type: smallint
                  constraints:
                    nullable: false

========================================